// SPDX-License-Identifier: MIT
pragma solidity 0.8.30;

/**
 * @title PaymentsFacet
 * @notice Autogenerated ABI-accurate stub facet (PayRox)
 * @dev Generated from ABI + selectors manifest; bodies intentionally revert.
 */
library PaymentsFacetStorage {
    bytes32 internal constant SLOT = keccak256("payrox.facets.PaymentsFacet.v1");
    struct Layout { uint256 __reserved; }
    function layout() internal pure returns (Layout storage l) { bytes32 p = SLOT; assembly { l.slot := p } }
}

contract PaymentsFacet {
    function getPaymentConfig() external view returns (uint256 ret0) {
        revert("TODO: migrate");
    }

    function setPaymentConfig(uint256 newValue) external {
        revert("TODO: migrate");
    }

    function isInitialized() external view returns (bool ret0) {
        revert("TODO: migrate");
    }

    function getOps() external view returns (uint256 ret0) {
        revert("TODO: migrate");
    }

    function getFacetInfo() external pure returns (string memory name, string memory version, bytes4[] memory selectors) {
        revert("TODO: migrate");
    }

    function initializePayments(address operator) external {
        revert("TODO: migrate");
    }

    function getLastCaller() external view returns (address ret0) {
        revert("TODO: migrate");
    }

    function getPaymentState() external view returns (uint256 config, uint256 ops, address operator, address lastCaller, bool paused) {
        revert("TODO: migrate");
    }

    function getOperator() external view returns (address ret0) {
        revert("TODO: migrate");
    }

    function OPERATOR_ROLE() external view returns (bytes32 ret0) {
        revert("TODO: migrate");
    }
}
