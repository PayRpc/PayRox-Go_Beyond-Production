/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PayRoxAdminFacetInterface extends Interface {
  getFunction(
    nameOrSignature: "getConfig" | "initPayRox" | "setFee"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "StorageLayoutValidated"): EventFragment;

  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initPayRox",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initPayRox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
}

export namespace StorageLayoutValidatedEvent {
  export type InputTuple = [namespace_: BytesLike, structHash: BytesLike];
  export type OutputTuple = [namespace_: string, structHash: string];
  export interface OutputObject {
    namespace: string;
    structHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PayRoxAdminFacet extends BaseContract {
  connect(runner?: ContractRunner | null): PayRoxAdminFacet;
  waitForDeployment(): Promise<this>;

  interface: PayRoxAdminFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getConfig: TypedContractMethod<
    [],
    [
      [string, string, bigint, boolean] & {
        owner: string;
        treasury: string;
        feeBps: bigint;
        paused: boolean;
      }
    ],
    "view"
  >;

  initPayRox: TypedContractMethod<
    [
      owner: AddressLike,
      treasury: AddressLike,
      feeBps: BigNumberish,
      expectedStructHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<[feeBps: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<
    [],
    [
      [string, string, bigint, boolean] & {
        owner: string;
        treasury: string;
        feeBps: bigint;
        paused: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initPayRox"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      treasury: AddressLike,
      feeBps: BigNumberish,
      expectedStructHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[feeBps: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "StorageLayoutValidated"
  ): TypedContractEvent<
    StorageLayoutValidatedEvent.InputTuple,
    StorageLayoutValidatedEvent.OutputTuple,
    StorageLayoutValidatedEvent.OutputObject
  >;

  filters: {
    "StorageLayoutValidated(bytes32,bytes32)": TypedContractEvent<
      StorageLayoutValidatedEvent.InputTuple,
      StorageLayoutValidatedEvent.OutputTuple,
      StorageLayoutValidatedEvent.OutputObject
    >;
    StorageLayoutValidated: TypedContractEvent<
      StorageLayoutValidatedEvent.InputTuple,
      StorageLayoutValidatedEvent.OutputTuple,
      StorageLayoutValidatedEvent.OutputObject
    >;
  };
}
