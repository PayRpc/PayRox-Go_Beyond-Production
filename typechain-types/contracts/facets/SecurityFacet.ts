/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace SecurityFacet {
  export type SecurityConfigStruct = {
    antibotEnabled: boolean;
    buybackPaused: boolean;
    circuitBroken: boolean;
    throttleBlocks: BigNumberish;
    pauseThresholdBps: BigNumberish;
    circuitThresholdBps: BigNumberish;
  };

  export type SecurityConfigStructOutput = [
    antibotEnabled: boolean,
    buybackPaused: boolean,
    circuitBroken: boolean,
    throttleBlocks: bigint,
    pauseThresholdBps: bigint,
    circuitThresholdBps: bigint
  ] & {
    antibotEnabled: boolean;
    buybackPaused: boolean;
    circuitBroken: boolean;
    throttleBlocks: bigint;
    pauseThresholdBps: bigint;
    circuitThresholdBps: bigint;
  };
}

export interface SecurityFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "GOVERNANCE_ROLE"
      | "MONITOR_ROLE"
      | "addTrusted"
      | "ensureBuybackAllowed"
      | "getSecurityConfig"
      | "initializeSecurityFacet"
      | "isSecurityInitialized"
      | "isTrusted"
      | "removeTrusted"
      | "reportMarketMove"
      | "resetCircuitBreaker"
      | "setBuybackPaused"
      | "setEnabled"
      | "setThresholds"
      | "setThrottleBlocks"
      | "validateTransaction"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AntibotStatusUpdated"
      | "BuybackPaused"
      | "CircuitBreaker"
      | "MonitorPing"
      | "RoleGranted"
      | "RoleRevoked"
      | "ThresholdsUpdated"
      | "ThrottleUpdated"
      | "Throttled"
      | "TrustedAdded"
      | "TrustedRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "GOVERNANCE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MONITOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTrusted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ensureBuybackAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecurityConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeSecurityFacet",
    values: [
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike[],
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isSecurityInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrusted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTrusted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reportMarketMove",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetCircuitBreaker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBuybackPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setEnabled", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setThresholds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setThrottleBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransaction",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "GOVERNANCE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MONITOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addTrusted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ensureBuybackAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecurityConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeSecurityFacet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSecurityInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isTrusted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTrusted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportMarketMove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetCircuitBreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuybackPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEnabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThrottleBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTransaction",
    data: BytesLike
  ): Result;
}

export namespace AntibotStatusUpdatedEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuybackPausedEvent {
  export type InputTuple = [status: boolean];
  export type OutputTuple = [status: boolean];
  export interface OutputObject {
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CircuitBreakerEvent {
  export type InputTuple = [status: boolean, moveBps: BigNumberish];
  export type OutputTuple = [status: boolean, moveBps: bigint];
  export interface OutputObject {
    status: boolean;
    moveBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MonitorPingEvent {
  export type InputTuple = [monitor: AddressLike, moveBps: BigNumberish];
  export type OutputTuple = [monitor: string, moveBps: bigint];
  export interface OutputObject {
    monitor: string;
    moveBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike];
  export type OutputTuple = [role: string, account: string];
  export interface OutputObject {
    role: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike];
  export type OutputTuple = [role: string, account: string];
  export interface OutputObject {
    role: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ThresholdsUpdatedEvent {
  export type InputTuple = [pauseBps: BigNumberish, circuitBps: BigNumberish];
  export type OutputTuple = [pauseBps: bigint, circuitBps: bigint];
  export interface OutputObject {
    pauseBps: bigint;
    circuitBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ThrottleUpdatedEvent {
  export type InputTuple = [blocks: BigNumberish];
  export type OutputTuple = [blocks: bigint];
  export interface OutputObject {
    blocks: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ThrottledEvent {
  export type InputTuple = [user: AddressLike, untilBlock: BigNumberish];
  export type OutputTuple = [user: string, untilBlock: bigint];
  export interface OutputObject {
    user: string;
    untilBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustedAddedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustedRemovedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SecurityFacet extends BaseContract {
  connect(runner?: ContractRunner | null): SecurityFacet;
  waitForDeployment(): Promise<this>;

  interface: SecurityFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  GOVERNANCE_ROLE: TypedContractMethod<[], [string], "view">;

  MONITOR_ROLE: TypedContractMethod<[], [string], "view">;

  addTrusted: TypedContractMethod<[a: AddressLike], [void], "nonpayable">;

  ensureBuybackAllowed: TypedContractMethod<[], [boolean], "view">;

  getSecurityConfig: TypedContractMethod<
    [],
    [SecurityFacet.SecurityConfigStructOutput],
    "view"
  >;

  initializeSecurityFacet: TypedContractMethod<
    [
      enabled: boolean,
      throttleBlocks: BigNumberish,
      pauseBps: BigNumberish,
      circuitBps: BigNumberish,
      initialTrusted: AddressLike[],
      governance: AddressLike,
      monitor: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isSecurityInitialized: TypedContractMethod<[], [boolean], "view">;

  isTrusted: TypedContractMethod<[a: AddressLike], [boolean], "view">;

  removeTrusted: TypedContractMethod<[a: AddressLike], [void], "nonpayable">;

  reportMarketMove: TypedContractMethod<
    [moveBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  resetCircuitBreaker: TypedContractMethod<[], [void], "nonpayable">;

  setBuybackPaused: TypedContractMethod<
    [paused: boolean],
    [void],
    "nonpayable"
  >;

  setEnabled: TypedContractMethod<[enabled: boolean], [void], "nonpayable">;

  setThresholds: TypedContractMethod<
    [pauseBps_: BigNumberish, circuitBps_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setThrottleBlocks: TypedContractMethod<
    [blocks_: BigNumberish],
    [void],
    "nonpayable"
  >;

  validateTransaction: TypedContractMethod<
    [sender: AddressLike],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "GOVERNANCE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MONITOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addTrusted"
  ): TypedContractMethod<[a: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ensureBuybackAllowed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getSecurityConfig"
  ): TypedContractMethod<
    [],
    [SecurityFacet.SecurityConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initializeSecurityFacet"
  ): TypedContractMethod<
    [
      enabled: boolean,
      throttleBlocks: BigNumberish,
      pauseBps: BigNumberish,
      circuitBps: BigNumberish,
      initialTrusted: AddressLike[],
      governance: AddressLike,
      monitor: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isSecurityInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTrusted"
  ): TypedContractMethod<[a: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeTrusted"
  ): TypedContractMethod<[a: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reportMarketMove"
  ): TypedContractMethod<[moveBps: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resetCircuitBreaker"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBuybackPaused"
  ): TypedContractMethod<[paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEnabled"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setThresholds"
  ): TypedContractMethod<
    [pauseBps_: BigNumberish, circuitBps_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setThrottleBlocks"
  ): TypedContractMethod<[blocks_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validateTransaction"
  ): TypedContractMethod<[sender: AddressLike], [boolean], "nonpayable">;

  getEvent(
    key: "AntibotStatusUpdated"
  ): TypedContractEvent<
    AntibotStatusUpdatedEvent.InputTuple,
    AntibotStatusUpdatedEvent.OutputTuple,
    AntibotStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BuybackPaused"
  ): TypedContractEvent<
    BuybackPausedEvent.InputTuple,
    BuybackPausedEvent.OutputTuple,
    BuybackPausedEvent.OutputObject
  >;
  getEvent(
    key: "CircuitBreaker"
  ): TypedContractEvent<
    CircuitBreakerEvent.InputTuple,
    CircuitBreakerEvent.OutputTuple,
    CircuitBreakerEvent.OutputObject
  >;
  getEvent(
    key: "MonitorPing"
  ): TypedContractEvent<
    MonitorPingEvent.InputTuple,
    MonitorPingEvent.OutputTuple,
    MonitorPingEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "ThresholdsUpdated"
  ): TypedContractEvent<
    ThresholdsUpdatedEvent.InputTuple,
    ThresholdsUpdatedEvent.OutputTuple,
    ThresholdsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ThrottleUpdated"
  ): TypedContractEvent<
    ThrottleUpdatedEvent.InputTuple,
    ThrottleUpdatedEvent.OutputTuple,
    ThrottleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Throttled"
  ): TypedContractEvent<
    ThrottledEvent.InputTuple,
    ThrottledEvent.OutputTuple,
    ThrottledEvent.OutputObject
  >;
  getEvent(
    key: "TrustedAdded"
  ): TypedContractEvent<
    TrustedAddedEvent.InputTuple,
    TrustedAddedEvent.OutputTuple,
    TrustedAddedEvent.OutputObject
  >;
  getEvent(
    key: "TrustedRemoved"
  ): TypedContractEvent<
    TrustedRemovedEvent.InputTuple,
    TrustedRemovedEvent.OutputTuple,
    TrustedRemovedEvent.OutputObject
  >;

  filters: {
    "AntibotStatusUpdated(bool)": TypedContractEvent<
      AntibotStatusUpdatedEvent.InputTuple,
      AntibotStatusUpdatedEvent.OutputTuple,
      AntibotStatusUpdatedEvent.OutputObject
    >;
    AntibotStatusUpdated: TypedContractEvent<
      AntibotStatusUpdatedEvent.InputTuple,
      AntibotStatusUpdatedEvent.OutputTuple,
      AntibotStatusUpdatedEvent.OutputObject
    >;

    "BuybackPaused(bool)": TypedContractEvent<
      BuybackPausedEvent.InputTuple,
      BuybackPausedEvent.OutputTuple,
      BuybackPausedEvent.OutputObject
    >;
    BuybackPaused: TypedContractEvent<
      BuybackPausedEvent.InputTuple,
      BuybackPausedEvent.OutputTuple,
      BuybackPausedEvent.OutputObject
    >;

    "CircuitBreaker(bool,int256)": TypedContractEvent<
      CircuitBreakerEvent.InputTuple,
      CircuitBreakerEvent.OutputTuple,
      CircuitBreakerEvent.OutputObject
    >;
    CircuitBreaker: TypedContractEvent<
      CircuitBreakerEvent.InputTuple,
      CircuitBreakerEvent.OutputTuple,
      CircuitBreakerEvent.OutputObject
    >;

    "MonitorPing(address,int256)": TypedContractEvent<
      MonitorPingEvent.InputTuple,
      MonitorPingEvent.OutputTuple,
      MonitorPingEvent.OutputObject
    >;
    MonitorPing: TypedContractEvent<
      MonitorPingEvent.InputTuple,
      MonitorPingEvent.OutputTuple,
      MonitorPingEvent.OutputObject
    >;

    "RoleGranted(bytes32,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "ThresholdsUpdated(uint256,uint256)": TypedContractEvent<
      ThresholdsUpdatedEvent.InputTuple,
      ThresholdsUpdatedEvent.OutputTuple,
      ThresholdsUpdatedEvent.OutputObject
    >;
    ThresholdsUpdated: TypedContractEvent<
      ThresholdsUpdatedEvent.InputTuple,
      ThresholdsUpdatedEvent.OutputTuple,
      ThresholdsUpdatedEvent.OutputObject
    >;

    "ThrottleUpdated(uint256)": TypedContractEvent<
      ThrottleUpdatedEvent.InputTuple,
      ThrottleUpdatedEvent.OutputTuple,
      ThrottleUpdatedEvent.OutputObject
    >;
    ThrottleUpdated: TypedContractEvent<
      ThrottleUpdatedEvent.InputTuple,
      ThrottleUpdatedEvent.OutputTuple,
      ThrottleUpdatedEvent.OutputObject
    >;

    "Throttled(address,uint256)": TypedContractEvent<
      ThrottledEvent.InputTuple,
      ThrottledEvent.OutputTuple,
      ThrottledEvent.OutputObject
    >;
    Throttled: TypedContractEvent<
      ThrottledEvent.InputTuple,
      ThrottledEvent.OutputTuple,
      ThrottledEvent.OutputObject
    >;

    "TrustedAdded(address)": TypedContractEvent<
      TrustedAddedEvent.InputTuple,
      TrustedAddedEvent.OutputTuple,
      TrustedAddedEvent.OutputObject
    >;
    TrustedAdded: TypedContractEvent<
      TrustedAddedEvent.InputTuple,
      TrustedAddedEvent.OutputTuple,
      TrustedAddedEvent.OutputObject
    >;

    "TrustedRemoved(address)": TypedContractEvent<
      TrustedRemovedEvent.InputTuple,
      TrustedRemovedEvent.OutputTuple,
      TrustedRemovedEvent.OutputObject
    >;
    TrustedRemoved: TypedContractEvent<
      TrustedRemovedEvent.InputTuple,
      TrustedRemovedEvent.OutputTuple,
      TrustedRemovedEvent.OutputObject
    >;
  };
}
