/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ExampleFacetAInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchExecute"
      | "calculateHash"
      | "executeA"
      | "getData"
      | "getFacetInfo"
      | "getUserCount"
      | "lastCaller"
      | "storeData"
      | "totalExecutions"
      | "verifySignature"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchExecutedOptimized"
      | "DataStored"
      | "FacetAExecuted"
      | "FacetAExecutedHash"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchExecute",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "executeA", values: [string]): string;
  encodeFunctionData(functionFragment: "getData", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getFacetInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastCaller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storeData",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalExecutions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifySignature",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executeA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFacetInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastCaller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "storeData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalExecutions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySignature",
    data: BytesLike
  ): Result;
}

export namespace BatchExecutedOptimizedEvent {
  export type InputTuple = [
    messageCount: BigNumberish,
    gasUsed: BigNumberish,
    packedMetadata: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    messageCount: bigint,
    gasUsed: bigint,
    packedMetadata: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    messageCount: bigint;
    gasUsed: bigint;
    packedMetadata: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataStoredEvent {
  export type InputTuple = [
    key: BytesLike,
    dataHash: BytesLike,
    size: BigNumberish,
    setter: AddressLike
  ];
  export type OutputTuple = [
    key: string,
    dataHash: string,
    size: bigint,
    setter: string
  ];
  export interface OutputObject {
    key: string;
    dataHash: string;
    size: bigint;
    setter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FacetAExecutedEvent {
  export type InputTuple = [
    caller: AddressLike,
    value: BigNumberish,
    message: string
  ];
  export type OutputTuple = [caller: string, value: bigint, message: string];
  export interface OutputObject {
    caller: string;
    value: bigint;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FacetAExecutedHashEvent {
  export type InputTuple = [caller: AddressLike, msgHash: BytesLike];
  export type OutputTuple = [caller: string, msgHash: string];
  export interface OutputObject {
    caller: string;
    msgHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ExampleFacetA extends BaseContract {
  connect(runner?: ContractRunner | null): ExampleFacetA;
  waitForDeployment(): Promise<this>;

  interface: ExampleFacetAInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchExecute: TypedContractMethod<
    [messages: string[]],
    [boolean[]],
    "nonpayable"
  >;

  calculateHash: TypedContractMethod<[input: BytesLike], [string], "view">;

  executeA: TypedContractMethod<[message: string], [boolean], "nonpayable">;

  getData: TypedContractMethod<[key: BytesLike], [string], "view">;

  getFacetInfo: TypedContractMethod<
    [],
    [
      [string, string, string[]] & {
        name: string;
        version: string;
        selectors: string[];
      }
    ],
    "view"
  >;

  getUserCount: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  lastCaller: TypedContractMethod<[], [string], "view">;

  storeData: TypedContractMethod<
    [key: BytesLike, data_: BytesLike],
    [void],
    "nonpayable"
  >;

  totalExecutions: TypedContractMethod<[], [bigint], "view">;

  verifySignature: TypedContractMethod<
    [hash: BytesLike, signature: BytesLike, expectedSigner: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchExecute"
  ): TypedContractMethod<[messages: string[]], [boolean[]], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateHash"
  ): TypedContractMethod<[input: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "executeA"
  ): TypedContractMethod<[message: string], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "getData"
  ): TypedContractMethod<[key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getFacetInfo"
  ): TypedContractMethod<
    [],
    [
      [string, string, string[]] & {
        name: string;
        version: string;
        selectors: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastCaller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "storeData"
  ): TypedContractMethod<
    [key: BytesLike, data_: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalExecutions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifySignature"
  ): TypedContractMethod<
    [hash: BytesLike, signature: BytesLike, expectedSigner: AddressLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "BatchExecutedOptimized"
  ): TypedContractEvent<
    BatchExecutedOptimizedEvent.InputTuple,
    BatchExecutedOptimizedEvent.OutputTuple,
    BatchExecutedOptimizedEvent.OutputObject
  >;
  getEvent(
    key: "DataStored"
  ): TypedContractEvent<
    DataStoredEvent.InputTuple,
    DataStoredEvent.OutputTuple,
    DataStoredEvent.OutputObject
  >;
  getEvent(
    key: "FacetAExecuted"
  ): TypedContractEvent<
    FacetAExecutedEvent.InputTuple,
    FacetAExecutedEvent.OutputTuple,
    FacetAExecutedEvent.OutputObject
  >;
  getEvent(
    key: "FacetAExecutedHash"
  ): TypedContractEvent<
    FacetAExecutedHashEvent.InputTuple,
    FacetAExecutedHashEvent.OutputTuple,
    FacetAExecutedHashEvent.OutputObject
  >;

  filters: {
    "BatchExecutedOptimized(uint256,uint256,bytes32,uint256)": TypedContractEvent<
      BatchExecutedOptimizedEvent.InputTuple,
      BatchExecutedOptimizedEvent.OutputTuple,
      BatchExecutedOptimizedEvent.OutputObject
    >;
    BatchExecutedOptimized: TypedContractEvent<
      BatchExecutedOptimizedEvent.InputTuple,
      BatchExecutedOptimizedEvent.OutputTuple,
      BatchExecutedOptimizedEvent.OutputObject
    >;

    "DataStored(bytes32,bytes32,uint256,address)": TypedContractEvent<
      DataStoredEvent.InputTuple,
      DataStoredEvent.OutputTuple,
      DataStoredEvent.OutputObject
    >;
    DataStored: TypedContractEvent<
      DataStoredEvent.InputTuple,
      DataStoredEvent.OutputTuple,
      DataStoredEvent.OutputObject
    >;

    "FacetAExecuted(address,uint256,string)": TypedContractEvent<
      FacetAExecutedEvent.InputTuple,
      FacetAExecutedEvent.OutputTuple,
      FacetAExecutedEvent.OutputObject
    >;
    FacetAExecuted: TypedContractEvent<
      FacetAExecutedEvent.InputTuple,
      FacetAExecutedEvent.OutputTuple,
      FacetAExecutedEvent.OutputObject
    >;

    "FacetAExecutedHash(address,bytes32)": TypedContractEvent<
      FacetAExecutedHashEvent.InputTuple,
      FacetAExecutedHashEvent.OutputTuple,
      FacetAExecutedHashEvent.OutputObject
    >;
    FacetAExecutedHash: TypedContractEvent<
      FacetAExecutedHashEvent.InputTuple,
      FacetAExecutedHashEvent.OutputTuple,
      FacetAExecutedHashEvent.OutputObject
    >;
  };
}
