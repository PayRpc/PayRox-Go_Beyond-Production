/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ChunkFactoryFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAuthorizedRecipient"
      | "deployDeterministic"
      | "deployDeterministicBatch"
      | "deploymentCount"
      | "exists"
      | "factoryAddress"
      | "getExpectedFactoryBytecodeHash"
      | "getExpectedManifestHash"
      | "getFacetFunctionSelectors"
      | "getFactoryAddress"
      | "getManifestDispatcher"
      | "isDeployedContract"
      | "owner"
      | "predict"
      | "predictAddress"
      | "predictAddressBatch"
      | "read"
      | "removeAuthorizedRecipient"
      | "setBaseFeeWei"
      | "setFeeRecipient"
      | "setFeesEnabled"
      | "setIdempotentMode"
      | "setMaxSingleTransfer"
      | "setTierFee"
      | "setUserTier"
      | "stage"
      | "stageBatch"
      | "stageMany"
      | "transferDefaultAdmin"
      | "userTiers"
      | "validateBytecodeSize"
      | "verifySystemIntegrity"
      | "withdrawFees"
      | "withdrawRefund"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizedRecipientAdded"
      | "AuthorizedRecipientRemoved"
      | "BaseFeeSet"
      | "BatchDeployed"
      | "BatchStaged"
      | "ChunkStaged"
      | "ContractDeployed"
      | "DefaultAdminTransferred"
      | "EmergencyWithdrawal"
      | "FeeCollectionFailed"
      | "FeeRecipientSet"
      | "FeesEnabledSet"
      | "FeesWithdrawn"
      | "IdempotentModeSet"
      | "TierFeeSet"
      | "UserTierSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAuthorizedRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployDeterministic",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployDeterministicBatch",
    values: [BytesLike[], BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deploymentCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "exists", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "factoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedFactoryBytecodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedManifestHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFacetFunctionSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getManifestDispatcher",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDeployedContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "predict", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "predictAddress",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "predictAddressBatch",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "read", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseFeeWei",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIdempotentMode",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSingleTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTierFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserTier",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stage", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "stageBatch",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stageMany",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDefaultAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userTiers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateBytecodeSize",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySystemIntegrity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRefund",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addAuthorizedRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployDeterministic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployDeterministicBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploymentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "factoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedFactoryBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedManifestHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFacetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManifestDispatcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDeployedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "predict", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictAddressBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "read", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseFeeWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIdempotentMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSingleTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTierFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUserTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stageBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stageMany", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferDefaultAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userTiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateBytecodeSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySystemIntegrity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRefund",
    data: BytesLike
  ): Result;
}

export namespace AuthorizedRecipientAddedEvent {
  export type InputTuple = [recipient: AddressLike];
  export type OutputTuple = [recipient: string];
  export interface OutputObject {
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthorizedRecipientRemovedEvent {
  export type InputTuple = [recipient: AddressLike];
  export type OutputTuple = [recipient: string];
  export interface OutputObject {
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BaseFeeSetEvent {
  export type InputTuple = [newBaseFee: BigNumberish];
  export type OutputTuple = [newBaseFee: bigint];
  export interface OutputObject {
    newBaseFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchDeployedEvent {
  export type InputTuple = [
    deployed: AddressLike[],
    salts: BytesLike[],
    deployer: AddressLike,
    totalFee: BigNumberish
  ];
  export type OutputTuple = [
    deployed: string[],
    salts: string[],
    deployer: string,
    totalFee: bigint
  ];
  export interface OutputObject {
    deployed: string[];
    salts: string[];
    deployer: string;
    totalFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchStagedEvent {
  export type InputTuple = [
    chunkCount: BigNumberish,
    gasUsed: BigNumberish,
    packedMetadata: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    chunkCount: bigint,
    gasUsed: bigint,
    packedMetadata: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    chunkCount: bigint;
    gasUsed: bigint;
    packedMetadata: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChunkStagedEvent {
  export type InputTuple = [
    chunk: AddressLike,
    hash: BytesLike,
    salt: BytesLike,
    size: BigNumberish
  ];
  export type OutputTuple = [
    chunk: string,
    hash: string,
    salt: string,
    size: bigint
  ];
  export interface OutputObject {
    chunk: string;
    hash: string;
    salt: string;
    size: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractDeployedEvent {
  export type InputTuple = [
    deployed: AddressLike,
    salt: BytesLike,
    deployer: AddressLike,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    deployed: string,
    salt: string,
    deployer: string,
    fee: bigint
  ];
  export interface OutputObject {
    deployed: string;
    salt: string;
    deployer: string;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultAdminTransferredEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawalEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeCollectionFailedEvent {
  export type InputTuple = [collector: AddressLike, amount: BigNumberish];
  export type OutputTuple = [collector: string, amount: bigint];
  export interface OutputObject {
    collector: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeRecipientSetEvent {
  export type InputTuple = [newRecipient: AddressLike];
  export type OutputTuple = [newRecipient: string];
  export interface OutputObject {
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesEnabledSetEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesWithdrawnEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IdempotentModeSetEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TierFeeSetEvent {
  export type InputTuple = [tier: BigNumberish, fee: BigNumberish];
  export type OutputTuple = [tier: bigint, fee: bigint];
  export interface OutputObject {
    tier: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserTierSetEvent {
  export type InputTuple = [user: AddressLike, tier: BigNumberish];
  export type OutputTuple = [user: string, tier: bigint];
  export interface OutputObject {
    user: string;
    tier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChunkFactoryFacet extends BaseContract {
  connect(runner?: ContractRunner | null): ChunkFactoryFacet;
  waitForDeployment(): Promise<this>;

  interface: ChunkFactoryFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAuthorizedRecipient: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  deployDeterministic: TypedContractMethod<
    [salt: BytesLike, bytecode: BytesLike, constructorArgs: BytesLike],
    [string],
    "payable"
  >;

  deployDeterministicBatch: TypedContractMethod<
    [salts: BytesLike[], bytecodes: BytesLike[], constructorArgs: BytesLike[]],
    [string[]],
    "payable"
  >;

  deploymentCount: TypedContractMethod<[], [bigint], "view">;

  exists: TypedContractMethod<[hash: BytesLike], [boolean], "view">;

  factoryAddress: TypedContractMethod<[], [string], "view">;

  getExpectedFactoryBytecodeHash: TypedContractMethod<[], [string], "view">;

  getExpectedManifestHash: TypedContractMethod<[], [string], "view">;

  getFacetFunctionSelectors: TypedContractMethod<[], [string[]], "view">;

  getFactoryAddress: TypedContractMethod<[], [string], "view">;

  getManifestDispatcher: TypedContractMethod<[], [string], "view">;

  isDeployedContract: TypedContractMethod<
    [target: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  predict: TypedContractMethod<
    [data: BytesLike],
    [[string, string] & { predicted: string; hash: string }],
    "view"
  >;

  predictAddress: TypedContractMethod<
    [salt: BytesLike, codeHash: BytesLike],
    [string],
    "view"
  >;

  predictAddressBatch: TypedContractMethod<
    [salts: BytesLike[], codeHashes: BytesLike[]],
    [string[]],
    "view"
  >;

  read: TypedContractMethod<[chunk: AddressLike], [string], "view">;

  removeAuthorizedRecipient: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setBaseFeeWei: TypedContractMethod<
    [newBase: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeRecipient: TypedContractMethod<
    [newRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeesEnabled: TypedContractMethod<[enabled: boolean], [void], "nonpayable">;

  setIdempotentMode: TypedContractMethod<
    [enabled: boolean],
    [void],
    "nonpayable"
  >;

  setMaxSingleTransfer: TypedContractMethod<
    [newMax: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTierFee: TypedContractMethod<
    [tier: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUserTier: TypedContractMethod<
    [user: AddressLike, tier: BigNumberish],
    [void],
    "nonpayable"
  >;

  stage: TypedContractMethod<
    [data: BytesLike],
    [[string, string] & { chunk: string; hash: string }],
    "payable"
  >;

  stageBatch: TypedContractMethod<
    [blobs: BytesLike[]],
    [[string[], string[]] & { chunks: string[]; hashes: string[] }],
    "payable"
  >;

  stageMany: TypedContractMethod<
    [dataArray: BytesLike[]],
    [string[]],
    "payable"
  >;

  transferDefaultAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  userTiers: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  validateBytecodeSize: TypedContractMethod<
    [bytecode: BytesLike],
    [boolean],
    "view"
  >;

  verifySystemIntegrity: TypedContractMethod<[], [boolean], "view">;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  withdrawRefund: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAuthorizedRecipient"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deployDeterministic"
  ): TypedContractMethod<
    [salt: BytesLike, bytecode: BytesLike, constructorArgs: BytesLike],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deployDeterministicBatch"
  ): TypedContractMethod<
    [salts: BytesLike[], bytecodes: BytesLike[], constructorArgs: BytesLike[]],
    [string[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deploymentCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<[hash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "factoryAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getExpectedFactoryBytecodeHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getExpectedManifestHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFacetFunctionSelectors"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getFactoryAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getManifestDispatcher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isDeployedContract"
  ): TypedContractMethod<[target: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "predict"
  ): TypedContractMethod<
    [data: BytesLike],
    [[string, string] & { predicted: string; hash: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "predictAddress"
  ): TypedContractMethod<
    [salt: BytesLike, codeHash: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "predictAddressBatch"
  ): TypedContractMethod<
    [salts: BytesLike[], codeHashes: BytesLike[]],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "read"
  ): TypedContractMethod<[chunk: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "removeAuthorizedRecipient"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBaseFeeWei"
  ): TypedContractMethod<[newBase: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[newRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeesEnabled"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIdempotentMode"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxSingleTransfer"
  ): TypedContractMethod<[newMax: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTierFee"
  ): TypedContractMethod<
    [tier: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUserTier"
  ): TypedContractMethod<
    [user: AddressLike, tier: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stage"
  ): TypedContractMethod<
    [data: BytesLike],
    [[string, string] & { chunk: string; hash: string }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "stageBatch"
  ): TypedContractMethod<
    [blobs: BytesLike[]],
    [[string[], string[]] & { chunks: string[]; hashes: string[] }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "stageMany"
  ): TypedContractMethod<[dataArray: BytesLike[]], [string[]], "payable">;
  getFunction(
    nameOrSignature: "transferDefaultAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userTiers"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "validateBytecodeSize"
  ): TypedContractMethod<[bytecode: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifySystemIntegrity"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawRefund"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AuthorizedRecipientAdded"
  ): TypedContractEvent<
    AuthorizedRecipientAddedEvent.InputTuple,
    AuthorizedRecipientAddedEvent.OutputTuple,
    AuthorizedRecipientAddedEvent.OutputObject
  >;
  getEvent(
    key: "AuthorizedRecipientRemoved"
  ): TypedContractEvent<
    AuthorizedRecipientRemovedEvent.InputTuple,
    AuthorizedRecipientRemovedEvent.OutputTuple,
    AuthorizedRecipientRemovedEvent.OutputObject
  >;
  getEvent(
    key: "BaseFeeSet"
  ): TypedContractEvent<
    BaseFeeSetEvent.InputTuple,
    BaseFeeSetEvent.OutputTuple,
    BaseFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "BatchDeployed"
  ): TypedContractEvent<
    BatchDeployedEvent.InputTuple,
    BatchDeployedEvent.OutputTuple,
    BatchDeployedEvent.OutputObject
  >;
  getEvent(
    key: "BatchStaged"
  ): TypedContractEvent<
    BatchStagedEvent.InputTuple,
    BatchStagedEvent.OutputTuple,
    BatchStagedEvent.OutputObject
  >;
  getEvent(
    key: "ChunkStaged"
  ): TypedContractEvent<
    ChunkStagedEvent.InputTuple,
    ChunkStagedEvent.OutputTuple,
    ChunkStagedEvent.OutputObject
  >;
  getEvent(
    key: "ContractDeployed"
  ): TypedContractEvent<
    ContractDeployedEvent.InputTuple,
    ContractDeployedEvent.OutputTuple,
    ContractDeployedEvent.OutputObject
  >;
  getEvent(
    key: "DefaultAdminTransferred"
  ): TypedContractEvent<
    DefaultAdminTransferredEvent.InputTuple,
    DefaultAdminTransferredEvent.OutputTuple,
    DefaultAdminTransferredEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdrawal"
  ): TypedContractEvent<
    EmergencyWithdrawalEvent.InputTuple,
    EmergencyWithdrawalEvent.OutputTuple,
    EmergencyWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "FeeCollectionFailed"
  ): TypedContractEvent<
    FeeCollectionFailedEvent.InputTuple,
    FeeCollectionFailedEvent.OutputTuple,
    FeeCollectionFailedEvent.OutputObject
  >;
  getEvent(
    key: "FeeRecipientSet"
  ): TypedContractEvent<
    FeeRecipientSetEvent.InputTuple,
    FeeRecipientSetEvent.OutputTuple,
    FeeRecipientSetEvent.OutputObject
  >;
  getEvent(
    key: "FeesEnabledSet"
  ): TypedContractEvent<
    FeesEnabledSetEvent.InputTuple,
    FeesEnabledSetEvent.OutputTuple,
    FeesEnabledSetEvent.OutputObject
  >;
  getEvent(
    key: "FeesWithdrawn"
  ): TypedContractEvent<
    FeesWithdrawnEvent.InputTuple,
    FeesWithdrawnEvent.OutputTuple,
    FeesWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "IdempotentModeSet"
  ): TypedContractEvent<
    IdempotentModeSetEvent.InputTuple,
    IdempotentModeSetEvent.OutputTuple,
    IdempotentModeSetEvent.OutputObject
  >;
  getEvent(
    key: "TierFeeSet"
  ): TypedContractEvent<
    TierFeeSetEvent.InputTuple,
    TierFeeSetEvent.OutputTuple,
    TierFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "UserTierSet"
  ): TypedContractEvent<
    UserTierSetEvent.InputTuple,
    UserTierSetEvent.OutputTuple,
    UserTierSetEvent.OutputObject
  >;

  filters: {
    "AuthorizedRecipientAdded(address)": TypedContractEvent<
      AuthorizedRecipientAddedEvent.InputTuple,
      AuthorizedRecipientAddedEvent.OutputTuple,
      AuthorizedRecipientAddedEvent.OutputObject
    >;
    AuthorizedRecipientAdded: TypedContractEvent<
      AuthorizedRecipientAddedEvent.InputTuple,
      AuthorizedRecipientAddedEvent.OutputTuple,
      AuthorizedRecipientAddedEvent.OutputObject
    >;

    "AuthorizedRecipientRemoved(address)": TypedContractEvent<
      AuthorizedRecipientRemovedEvent.InputTuple,
      AuthorizedRecipientRemovedEvent.OutputTuple,
      AuthorizedRecipientRemovedEvent.OutputObject
    >;
    AuthorizedRecipientRemoved: TypedContractEvent<
      AuthorizedRecipientRemovedEvent.InputTuple,
      AuthorizedRecipientRemovedEvent.OutputTuple,
      AuthorizedRecipientRemovedEvent.OutputObject
    >;

    "BaseFeeSet(uint256)": TypedContractEvent<
      BaseFeeSetEvent.InputTuple,
      BaseFeeSetEvent.OutputTuple,
      BaseFeeSetEvent.OutputObject
    >;
    BaseFeeSet: TypedContractEvent<
      BaseFeeSetEvent.InputTuple,
      BaseFeeSetEvent.OutputTuple,
      BaseFeeSetEvent.OutputObject
    >;

    "BatchDeployed(address[],bytes32[],address,uint256)": TypedContractEvent<
      BatchDeployedEvent.InputTuple,
      BatchDeployedEvent.OutputTuple,
      BatchDeployedEvent.OutputObject
    >;
    BatchDeployed: TypedContractEvent<
      BatchDeployedEvent.InputTuple,
      BatchDeployedEvent.OutputTuple,
      BatchDeployedEvent.OutputObject
    >;

    "BatchStaged(uint256,uint256,bytes32,uint256)": TypedContractEvent<
      BatchStagedEvent.InputTuple,
      BatchStagedEvent.OutputTuple,
      BatchStagedEvent.OutputObject
    >;
    BatchStaged: TypedContractEvent<
      BatchStagedEvent.InputTuple,
      BatchStagedEvent.OutputTuple,
      BatchStagedEvent.OutputObject
    >;

    "ChunkStaged(address,bytes32,bytes32,uint256)": TypedContractEvent<
      ChunkStagedEvent.InputTuple,
      ChunkStagedEvent.OutputTuple,
      ChunkStagedEvent.OutputObject
    >;
    ChunkStaged: TypedContractEvent<
      ChunkStagedEvent.InputTuple,
      ChunkStagedEvent.OutputTuple,
      ChunkStagedEvent.OutputObject
    >;

    "ContractDeployed(address,bytes32,address,uint256)": TypedContractEvent<
      ContractDeployedEvent.InputTuple,
      ContractDeployedEvent.OutputTuple,
      ContractDeployedEvent.OutputObject
    >;
    ContractDeployed: TypedContractEvent<
      ContractDeployedEvent.InputTuple,
      ContractDeployedEvent.OutputTuple,
      ContractDeployedEvent.OutputObject
    >;

    "DefaultAdminTransferred(address,address)": TypedContractEvent<
      DefaultAdminTransferredEvent.InputTuple,
      DefaultAdminTransferredEvent.OutputTuple,
      DefaultAdminTransferredEvent.OutputObject
    >;
    DefaultAdminTransferred: TypedContractEvent<
      DefaultAdminTransferredEvent.InputTuple,
      DefaultAdminTransferredEvent.OutputTuple,
      DefaultAdminTransferredEvent.OutputObject
    >;

    "EmergencyWithdrawal(address,uint256)": TypedContractEvent<
      EmergencyWithdrawalEvent.InputTuple,
      EmergencyWithdrawalEvent.OutputTuple,
      EmergencyWithdrawalEvent.OutputObject
    >;
    EmergencyWithdrawal: TypedContractEvent<
      EmergencyWithdrawalEvent.InputTuple,
      EmergencyWithdrawalEvent.OutputTuple,
      EmergencyWithdrawalEvent.OutputObject
    >;

    "FeeCollectionFailed(address,uint256)": TypedContractEvent<
      FeeCollectionFailedEvent.InputTuple,
      FeeCollectionFailedEvent.OutputTuple,
      FeeCollectionFailedEvent.OutputObject
    >;
    FeeCollectionFailed: TypedContractEvent<
      FeeCollectionFailedEvent.InputTuple,
      FeeCollectionFailedEvent.OutputTuple,
      FeeCollectionFailedEvent.OutputObject
    >;

    "FeeRecipientSet(address)": TypedContractEvent<
      FeeRecipientSetEvent.InputTuple,
      FeeRecipientSetEvent.OutputTuple,
      FeeRecipientSetEvent.OutputObject
    >;
    FeeRecipientSet: TypedContractEvent<
      FeeRecipientSetEvent.InputTuple,
      FeeRecipientSetEvent.OutputTuple,
      FeeRecipientSetEvent.OutputObject
    >;

    "FeesEnabledSet(bool)": TypedContractEvent<
      FeesEnabledSetEvent.InputTuple,
      FeesEnabledSetEvent.OutputTuple,
      FeesEnabledSetEvent.OutputObject
    >;
    FeesEnabledSet: TypedContractEvent<
      FeesEnabledSetEvent.InputTuple,
      FeesEnabledSetEvent.OutputTuple,
      FeesEnabledSetEvent.OutputObject
    >;

    "FeesWithdrawn(address,uint256)": TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;
    FeesWithdrawn: TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;

    "IdempotentModeSet(bool)": TypedContractEvent<
      IdempotentModeSetEvent.InputTuple,
      IdempotentModeSetEvent.OutputTuple,
      IdempotentModeSetEvent.OutputObject
    >;
    IdempotentModeSet: TypedContractEvent<
      IdempotentModeSetEvent.InputTuple,
      IdempotentModeSetEvent.OutputTuple,
      IdempotentModeSetEvent.OutputObject
    >;

    "TierFeeSet(uint8,uint256)": TypedContractEvent<
      TierFeeSetEvent.InputTuple,
      TierFeeSetEvent.OutputTuple,
      TierFeeSetEvent.OutputObject
    >;
    TierFeeSet: TypedContractEvent<
      TierFeeSetEvent.InputTuple,
      TierFeeSetEvent.OutputTuple,
      TierFeeSetEvent.OutputObject
    >;

    "UserTierSet(address,uint8)": TypedContractEvent<
      UserTierSetEvent.InputTuple,
      UserTierSetEvent.OutputTuple,
      UserTierSetEvent.OutputObject
    >;
    UserTierSet: TypedContractEvent<
      UserTierSetEvent.InputTuple,
      UserTierSetEvent.OutputTuple,
      UserTierSetEvent.OutputObject
    >;
  };
}
