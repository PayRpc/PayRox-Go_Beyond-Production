/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type BatchCallStruct = { selector: BytesLike; data: BytesLike };

export type BatchCallStructOutput = [selector: string, data: string] & {
  selector: string;
  data: string;
};

export interface PayRoxProxyRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_BATCH_SIZE"
      | "batchCallSameFunction"
      | "batchExecute"
      | "dispatcher"
      | "dispatcherCodehash"
      | "freeze"
      | "frozen"
      | "getActiveManifestRoot"
      | "getRoute"
      | "initializeProxyRouter"
      | "isDispatcherFrozen"
      | "isForbidden"
      | "owner"
      | "paused"
      | "renounceOwnership"
      | "setDispatcher"
      | "setDispatcherCodehash"
      | "setForbiddenSelectors"
      | "setPaused"
      | "setStrictCodehash"
      | "strictCodehash"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchExecuted"
      | "DispatcherCodehashSet"
      | "DispatcherUpdated"
      | "Frozen"
      | "OwnershipTransferred"
      | "PausedSet"
      | "PayRoxProxyRouterInitialized"
      | "SelectorsForbidden"
      | "StrictCodehashSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_BATCH_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchCallSameFunction",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchExecute",
    values: [BatchCallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatcher",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dispatcherCodehash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "freeze", values?: undefined): string;
  encodeFunctionData(functionFragment: "frozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getActiveManifestRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRoute", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "initializeProxyRouter",
    values: [AddressLike, AddressLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isDispatcherFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isForbidden",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDispatcher",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDispatcherCodehash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setForbiddenSelectors",
    values: [BytesLike[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setStrictCodehash",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "strictCodehash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_BATCH_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCallSameFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dispatcher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dispatcherCodehash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freeze", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveManifestRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeProxyRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDispatcherFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isForbidden",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDispatcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDispatcherCodehash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForbiddenSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStrictCodehash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strictCodehash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace BatchExecutedEvent {
  export type InputTuple = [
    callCount: BigNumberish,
    gasUsed: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    callCount: bigint,
    gasUsed: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    callCount: bigint;
    gasUsed: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DispatcherCodehashSetEvent {
  export type InputTuple = [oldCodehash: BytesLike, newCodehash: BytesLike];
  export type OutputTuple = [oldCodehash: string, newCodehash: string];
  export interface OutputObject {
    oldCodehash: string;
    newCodehash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DispatcherUpdatedEvent {
  export type InputTuple = [
    oldDispatcher: AddressLike,
    newDispatcher: AddressLike,
    codehash: BytesLike
  ];
  export type OutputTuple = [
    oldDispatcher: string,
    newDispatcher: string,
    codehash: string
  ];
  export interface OutputObject {
    oldDispatcher: string;
    newDispatcher: string;
    codehash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FrozenEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedSetEvent {
  export type InputTuple = [paused: boolean];
  export type OutputTuple = [paused: boolean];
  export interface OutputObject {
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayRoxProxyRouterInitializedEvent {
  export type InputTuple = [
    owner: AddressLike,
    dispatcher: AddressLike,
    dispatcherCodehash: BytesLike,
    strictCodehash: boolean
  ];
  export type OutputTuple = [
    owner: string,
    dispatcher: string,
    dispatcherCodehash: string,
    strictCodehash: boolean
  ];
  export interface OutputObject {
    owner: string;
    dispatcher: string;
    dispatcherCodehash: string;
    strictCodehash: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SelectorsForbiddenEvent {
  export type InputTuple = [selectors: BytesLike[], forbidden: boolean];
  export type OutputTuple = [selectors: string[], forbidden: boolean];
  export interface OutputObject {
    selectors: string[];
    forbidden: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrictCodehashSetEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PayRoxProxyRouter extends BaseContract {
  connect(runner?: ContractRunner | null): PayRoxProxyRouter;
  waitForDeployment(): Promise<this>;

  interface: PayRoxProxyRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_BATCH_SIZE: TypedContractMethod<[], [bigint], "view">;

  batchCallSameFunction: TypedContractMethod<
    [selector: BytesLike, datas: BytesLike[]],
    [string[]],
    "nonpayable"
  >;

  batchExecute: TypedContractMethod<
    [calls: BatchCallStruct[]],
    [string[]],
    "nonpayable"
  >;

  dispatcher: TypedContractMethod<[], [string], "view">;

  dispatcherCodehash: TypedContractMethod<[], [string], "view">;

  freeze: TypedContractMethod<[], [void], "nonpayable">;

  frozen: TypedContractMethod<[], [boolean], "view">;

  getActiveManifestRoot: TypedContractMethod<[], [string], "view">;

  getRoute: TypedContractMethod<
    [selector: BytesLike],
    [[string, string] & { facet: string; codehash: string }],
    "view"
  >;

  initializeProxyRouter: TypedContractMethod<
    [
      owner_: AddressLike,
      dispatcher_: AddressLike,
      expectedCodehash: BytesLike,
      strictCodehash_: boolean
    ],
    [void],
    "nonpayable"
  >;

  isDispatcherFrozen: TypedContractMethod<[], [boolean], "view">;

  isForbidden: TypedContractMethod<[selector: BytesLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDispatcher: TypedContractMethod<
    [dispatcher_: AddressLike, expectedCodehash: BytesLike],
    [void],
    "nonpayable"
  >;

  setDispatcherCodehash: TypedContractMethod<
    [expected: BytesLike],
    [void],
    "nonpayable"
  >;

  setForbiddenSelectors: TypedContractMethod<
    [selectors: BytesLike[], forbidden: boolean],
    [void],
    "nonpayable"
  >;

  setPaused: TypedContractMethod<[paused_: boolean], [void], "nonpayable">;

  setStrictCodehash: TypedContractMethod<
    [enabled: boolean],
    [void],
    "nonpayable"
  >;

  strictCodehash: TypedContractMethod<[], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_BATCH_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchCallSameFunction"
  ): TypedContractMethod<
    [selector: BytesLike, datas: BytesLike[]],
    [string[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchExecute"
  ): TypedContractMethod<[calls: BatchCallStruct[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "dispatcher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dispatcherCodehash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "freeze"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "frozen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getActiveManifestRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoute"
  ): TypedContractMethod<
    [selector: BytesLike],
    [[string, string] & { facet: string; codehash: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "initializeProxyRouter"
  ): TypedContractMethod<
    [
      owner_: AddressLike,
      dispatcher_: AddressLike,
      expectedCodehash: BytesLike,
      strictCodehash_: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isDispatcherFrozen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isForbidden"
  ): TypedContractMethod<[selector: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDispatcher"
  ): TypedContractMethod<
    [dispatcher_: AddressLike, expectedCodehash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDispatcherCodehash"
  ): TypedContractMethod<[expected: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setForbiddenSelectors"
  ): TypedContractMethod<
    [selectors: BytesLike[], forbidden: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPaused"
  ): TypedContractMethod<[paused_: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStrictCodehash"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "strictCodehash"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BatchExecuted"
  ): TypedContractEvent<
    BatchExecutedEvent.InputTuple,
    BatchExecutedEvent.OutputTuple,
    BatchExecutedEvent.OutputObject
  >;
  getEvent(
    key: "DispatcherCodehashSet"
  ): TypedContractEvent<
    DispatcherCodehashSetEvent.InputTuple,
    DispatcherCodehashSetEvent.OutputTuple,
    DispatcherCodehashSetEvent.OutputObject
  >;
  getEvent(
    key: "DispatcherUpdated"
  ): TypedContractEvent<
    DispatcherUpdatedEvent.InputTuple,
    DispatcherUpdatedEvent.OutputTuple,
    DispatcherUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Frozen"
  ): TypedContractEvent<
    FrozenEvent.InputTuple,
    FrozenEvent.OutputTuple,
    FrozenEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PausedSet"
  ): TypedContractEvent<
    PausedSetEvent.InputTuple,
    PausedSetEvent.OutputTuple,
    PausedSetEvent.OutputObject
  >;
  getEvent(
    key: "PayRoxProxyRouterInitialized"
  ): TypedContractEvent<
    PayRoxProxyRouterInitializedEvent.InputTuple,
    PayRoxProxyRouterInitializedEvent.OutputTuple,
    PayRoxProxyRouterInitializedEvent.OutputObject
  >;
  getEvent(
    key: "SelectorsForbidden"
  ): TypedContractEvent<
    SelectorsForbiddenEvent.InputTuple,
    SelectorsForbiddenEvent.OutputTuple,
    SelectorsForbiddenEvent.OutputObject
  >;
  getEvent(
    key: "StrictCodehashSet"
  ): TypedContractEvent<
    StrictCodehashSetEvent.InputTuple,
    StrictCodehashSetEvent.OutputTuple,
    StrictCodehashSetEvent.OutputObject
  >;

  filters: {
    "BatchExecuted(uint256,uint256,uint256)": TypedContractEvent<
      BatchExecutedEvent.InputTuple,
      BatchExecutedEvent.OutputTuple,
      BatchExecutedEvent.OutputObject
    >;
    BatchExecuted: TypedContractEvent<
      BatchExecutedEvent.InputTuple,
      BatchExecutedEvent.OutputTuple,
      BatchExecutedEvent.OutputObject
    >;

    "DispatcherCodehashSet(bytes32,bytes32)": TypedContractEvent<
      DispatcherCodehashSetEvent.InputTuple,
      DispatcherCodehashSetEvent.OutputTuple,
      DispatcherCodehashSetEvent.OutputObject
    >;
    DispatcherCodehashSet: TypedContractEvent<
      DispatcherCodehashSetEvent.InputTuple,
      DispatcherCodehashSetEvent.OutputTuple,
      DispatcherCodehashSetEvent.OutputObject
    >;

    "DispatcherUpdated(address,address,bytes32)": TypedContractEvent<
      DispatcherUpdatedEvent.InputTuple,
      DispatcherUpdatedEvent.OutputTuple,
      DispatcherUpdatedEvent.OutputObject
    >;
    DispatcherUpdated: TypedContractEvent<
      DispatcherUpdatedEvent.InputTuple,
      DispatcherUpdatedEvent.OutputTuple,
      DispatcherUpdatedEvent.OutputObject
    >;

    "Frozen()": TypedContractEvent<
      FrozenEvent.InputTuple,
      FrozenEvent.OutputTuple,
      FrozenEvent.OutputObject
    >;
    Frozen: TypedContractEvent<
      FrozenEvent.InputTuple,
      FrozenEvent.OutputTuple,
      FrozenEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PausedSet(bool)": TypedContractEvent<
      PausedSetEvent.InputTuple,
      PausedSetEvent.OutputTuple,
      PausedSetEvent.OutputObject
    >;
    PausedSet: TypedContractEvent<
      PausedSetEvent.InputTuple,
      PausedSetEvent.OutputTuple,
      PausedSetEvent.OutputObject
    >;

    "PayRoxProxyRouterInitialized(address,address,bytes32,bool)": TypedContractEvent<
      PayRoxProxyRouterInitializedEvent.InputTuple,
      PayRoxProxyRouterInitializedEvent.OutputTuple,
      PayRoxProxyRouterInitializedEvent.OutputObject
    >;
    PayRoxProxyRouterInitialized: TypedContractEvent<
      PayRoxProxyRouterInitializedEvent.InputTuple,
      PayRoxProxyRouterInitializedEvent.OutputTuple,
      PayRoxProxyRouterInitializedEvent.OutputObject
    >;

    "SelectorsForbidden(bytes4[],bool)": TypedContractEvent<
      SelectorsForbiddenEvent.InputTuple,
      SelectorsForbiddenEvent.OutputTuple,
      SelectorsForbiddenEvent.OutputObject
    >;
    SelectorsForbidden: TypedContractEvent<
      SelectorsForbiddenEvent.InputTuple,
      SelectorsForbiddenEvent.OutputTuple,
      SelectorsForbiddenEvent.OutputObject
    >;

    "StrictCodehashSet(bool)": TypedContractEvent<
      StrictCodehashSetEvent.InputTuple,
      StrictCodehashSetEvent.OutputTuple,
      StrictCodehashSetEvent.OutputObject
    >;
    StrictCodehashSet: TypedContractEvent<
      StrictCodehashSetEvent.InputTuple,
      StrictCodehashSetEvent.OutputTuple,
      StrictCodehashSetEvent.OutputObject
    >;
  };
}
