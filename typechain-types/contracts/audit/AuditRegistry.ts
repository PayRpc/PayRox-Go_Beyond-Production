/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ManifestTypes {
  export type AuditInfoStruct = {
    auditor: AddressLike;
    auditHash: BytesLike;
    auditTimestamp: BigNumberish;
    passed: boolean;
    reportUri: string;
  };

  export type AuditInfoStructOutput = [
    auditor: string,
    auditHash: string,
    auditTimestamp: bigint,
    passed: boolean,
    reportUri: string
  ] & {
    auditor: string;
    auditHash: string;
    auditTimestamp: bigint;
    passed: boolean;
    reportUri: string;
  };
}

export interface AuditRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUDITOR_ROLE"
      | "AUDIT_ADMIN_ROLE"
      | "MAX_AUDIT_VALIDITY"
      | "MIN_AUDIT_VALIDITY"
      | "auditExpiration"
      | "auditValidityPeriod"
      | "auditedManifests"
      | "auditorStats"
      | "audits"
      | "certifiedAuditors"
      | "certifyAuditor"
      | "getAuditCount"
      | "getAuditStatus"
      | "getAuditedManifests"
      | "getAuditorInfo"
      | "markExpiredAudits"
      | "requiresAudit"
      | "revokeAuditor"
      | "submitAudit"
      | "updateAuditValidityPeriod"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuditCompleted"
      | "AuditExpired"
      | "AuditSubmitted"
      | "AuditValidityUpdated"
      | "AuditorCertified"
      | "AuditorRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AUDITOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AUDIT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_AUDIT_VALIDITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_AUDIT_VALIDITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auditExpiration",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "auditValidityPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auditedManifests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auditorStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "audits", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "certifiedAuditors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "certifyAuditor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuditCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuditStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuditedManifests",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuditorInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markExpiredAudits",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requiresAudit",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAuditor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitAudit",
    values: [BytesLike, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAuditValidityPeriod",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUDITOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AUDIT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_AUDIT_VALIDITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_AUDIT_VALIDITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auditExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auditValidityPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auditedManifests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auditorStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "audits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "certifiedAuditors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "certifyAuditor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuditCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuditStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuditedManifests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuditorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markExpiredAudits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiresAudit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAuditor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitAudit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAuditValidityPeriod",
    data: BytesLike
  ): Result;
}

export namespace AuditCompletedEvent {
  export type InputTuple = [
    manifestHash: BytesLike,
    auditor: AddressLike,
    passed: boolean
  ];
  export type OutputTuple = [
    manifestHash: string,
    auditor: string,
    passed: boolean
  ];
  export interface OutputObject {
    manifestHash: string;
    auditor: string;
    passed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuditExpiredEvent {
  export type InputTuple = [manifestHash: BytesLike, auditor: AddressLike];
  export type OutputTuple = [manifestHash: string, auditor: string];
  export interface OutputObject {
    manifestHash: string;
    auditor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuditSubmittedEvent {
  export type InputTuple = [
    manifestHash: BytesLike,
    auditor: AddressLike,
    passed: boolean,
    reportUri: string
  ];
  export type OutputTuple = [
    manifestHash: string,
    auditor: string,
    passed: boolean,
    reportUri: string
  ];
  export interface OutputObject {
    manifestHash: string;
    auditor: string;
    passed: boolean;
    reportUri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuditValidityUpdatedEvent {
  export type InputTuple = [oldPeriod: BigNumberish, newPeriod: BigNumberish];
  export type OutputTuple = [oldPeriod: bigint, newPeriod: bigint];
  export interface OutputObject {
    oldPeriod: bigint;
    newPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuditorCertifiedEvent {
  export type InputTuple = [auditor: AddressLike, certifier: AddressLike];
  export type OutputTuple = [auditor: string, certifier: string];
  export interface OutputObject {
    auditor: string;
    certifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuditorRevokedEvent {
  export type InputTuple = [auditor: AddressLike, revoker: AddressLike];
  export type OutputTuple = [auditor: string, revoker: string];
  export interface OutputObject {
    auditor: string;
    revoker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AuditRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): AuditRegistry;
  waitForDeployment(): Promise<this>;

  interface: AuditRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUDITOR_ROLE: TypedContractMethod<[], [string], "view">;

  AUDIT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_AUDIT_VALIDITY: TypedContractMethod<[], [bigint], "view">;

  MIN_AUDIT_VALIDITY: TypedContractMethod<[], [bigint], "view">;

  auditExpiration: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  auditValidityPeriod: TypedContractMethod<[], [bigint], "view">;

  auditedManifests: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  auditorStats: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  audits: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, boolean, string] & {
        auditor: string;
        auditHash: string;
        auditTimestamp: bigint;
        passed: boolean;
        reportUri: string;
      }
    ],
    "view"
  >;

  certifiedAuditors: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  certifyAuditor: TypedContractMethod<
    [auditor: AddressLike],
    [void],
    "nonpayable"
  >;

  getAuditCount: TypedContractMethod<[], [bigint], "view">;

  getAuditStatus: TypedContractMethod<
    [manifestHash: BytesLike],
    [
      [boolean, ManifestTypes.AuditInfoStructOutput] & {
        isValid: boolean;
        auditInfo: ManifestTypes.AuditInfoStructOutput;
      }
    ],
    "view"
  >;

  getAuditedManifests: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [[string[], bigint] & { manifests: string[]; total: bigint }],
    "view"
  >;

  getAuditorInfo: TypedContractMethod<
    [auditor: AddressLike],
    [[boolean, bigint] & { isCertified: boolean; auditCount: bigint }],
    "view"
  >;

  markExpiredAudits: TypedContractMethod<
    [manifestHashes: BytesLike[]],
    [void],
    "nonpayable"
  >;

  requiresAudit: TypedContractMethod<
    [manifestHash: BytesLike],
    [boolean],
    "view"
  >;

  revokeAuditor: TypedContractMethod<
    [auditor: AddressLike],
    [void],
    "nonpayable"
  >;

  submitAudit: TypedContractMethod<
    [manifestHash: BytesLike, passed: boolean, reportUri: string],
    [void],
    "nonpayable"
  >;

  updateAuditValidityPeriod: TypedContractMethod<
    [newPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUDITOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "AUDIT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_AUDIT_VALIDITY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_AUDIT_VALIDITY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "auditExpiration"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "auditValidityPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "auditedManifests"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "auditorStats"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "audits"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, boolean, string] & {
        auditor: string;
        auditHash: string;
        auditTimestamp: bigint;
        passed: boolean;
        reportUri: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "certifiedAuditors"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "certifyAuditor"
  ): TypedContractMethod<[auditor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAuditCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAuditStatus"
  ): TypedContractMethod<
    [manifestHash: BytesLike],
    [
      [boolean, ManifestTypes.AuditInfoStructOutput] & {
        isValid: boolean;
        auditInfo: ManifestTypes.AuditInfoStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAuditedManifests"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [[string[], bigint] & { manifests: string[]; total: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAuditorInfo"
  ): TypedContractMethod<
    [auditor: AddressLike],
    [[boolean, bigint] & { isCertified: boolean; auditCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "markExpiredAudits"
  ): TypedContractMethod<[manifestHashes: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requiresAudit"
  ): TypedContractMethod<[manifestHash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "revokeAuditor"
  ): TypedContractMethod<[auditor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitAudit"
  ): TypedContractMethod<
    [manifestHash: BytesLike, passed: boolean, reportUri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateAuditValidityPeriod"
  ): TypedContractMethod<[newPeriod: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AuditCompleted"
  ): TypedContractEvent<
    AuditCompletedEvent.InputTuple,
    AuditCompletedEvent.OutputTuple,
    AuditCompletedEvent.OutputObject
  >;
  getEvent(
    key: "AuditExpired"
  ): TypedContractEvent<
    AuditExpiredEvent.InputTuple,
    AuditExpiredEvent.OutputTuple,
    AuditExpiredEvent.OutputObject
  >;
  getEvent(
    key: "AuditSubmitted"
  ): TypedContractEvent<
    AuditSubmittedEvent.InputTuple,
    AuditSubmittedEvent.OutputTuple,
    AuditSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "AuditValidityUpdated"
  ): TypedContractEvent<
    AuditValidityUpdatedEvent.InputTuple,
    AuditValidityUpdatedEvent.OutputTuple,
    AuditValidityUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AuditorCertified"
  ): TypedContractEvent<
    AuditorCertifiedEvent.InputTuple,
    AuditorCertifiedEvent.OutputTuple,
    AuditorCertifiedEvent.OutputObject
  >;
  getEvent(
    key: "AuditorRevoked"
  ): TypedContractEvent<
    AuditorRevokedEvent.InputTuple,
    AuditorRevokedEvent.OutputTuple,
    AuditorRevokedEvent.OutputObject
  >;

  filters: {
    "AuditCompleted(bytes32,address,bool)": TypedContractEvent<
      AuditCompletedEvent.InputTuple,
      AuditCompletedEvent.OutputTuple,
      AuditCompletedEvent.OutputObject
    >;
    AuditCompleted: TypedContractEvent<
      AuditCompletedEvent.InputTuple,
      AuditCompletedEvent.OutputTuple,
      AuditCompletedEvent.OutputObject
    >;

    "AuditExpired(bytes32,address)": TypedContractEvent<
      AuditExpiredEvent.InputTuple,
      AuditExpiredEvent.OutputTuple,
      AuditExpiredEvent.OutputObject
    >;
    AuditExpired: TypedContractEvent<
      AuditExpiredEvent.InputTuple,
      AuditExpiredEvent.OutputTuple,
      AuditExpiredEvent.OutputObject
    >;

    "AuditSubmitted(bytes32,address,bool,string)": TypedContractEvent<
      AuditSubmittedEvent.InputTuple,
      AuditSubmittedEvent.OutputTuple,
      AuditSubmittedEvent.OutputObject
    >;
    AuditSubmitted: TypedContractEvent<
      AuditSubmittedEvent.InputTuple,
      AuditSubmittedEvent.OutputTuple,
      AuditSubmittedEvent.OutputObject
    >;

    "AuditValidityUpdated(uint256,uint256)": TypedContractEvent<
      AuditValidityUpdatedEvent.InputTuple,
      AuditValidityUpdatedEvent.OutputTuple,
      AuditValidityUpdatedEvent.OutputObject
    >;
    AuditValidityUpdated: TypedContractEvent<
      AuditValidityUpdatedEvent.InputTuple,
      AuditValidityUpdatedEvent.OutputTuple,
      AuditValidityUpdatedEvent.OutputObject
    >;

    "AuditorCertified(address,address)": TypedContractEvent<
      AuditorCertifiedEvent.InputTuple,
      AuditorCertifiedEvent.OutputTuple,
      AuditorCertifiedEvent.OutputObject
    >;
    AuditorCertified: TypedContractEvent<
      AuditorCertifiedEvent.InputTuple,
      AuditorCertifiedEvent.OutputTuple,
      AuditorCertifiedEvent.OutputObject
    >;

    "AuditorRevoked(address,address)": TypedContractEvent<
      AuditorRevokedEvent.InputTuple,
      AuditorRevokedEvent.OutputTuple,
      AuditorRevokedEvent.OutputObject
    >;
    AuditorRevoked: TypedContractEvent<
      AuditorRevokedEvent.InputTuple,
      AuditorRevokedEvent.OutputTuple,
      AuditorRevokedEvent.OutputObject
    >;
  };
}
