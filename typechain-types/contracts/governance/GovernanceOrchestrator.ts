/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ManifestTypes {
  export type GovernanceProposalStruct = {
    proposalId: BytesLike;
    proposer: AddressLike;
    description: string;
    targetHashes: BytesLike[];
    votingDeadline: BigNumberish;
    forVotes: BigNumberish;
    againstVotes: BigNumberish;
    abstainVotes: BigNumberish;
    executed: boolean;
  };

  export type GovernanceProposalStructOutput = [
    proposalId: string,
    proposer: string,
    description: string,
    targetHashes: string[],
    votingDeadline: bigint,
    forVotes: bigint,
    againstVotes: bigint,
    abstainVotes: bigint,
    executed: boolean
  ] & {
    proposalId: string;
    proposer: string;
    description: string;
    targetHashes: string[];
    votingDeadline: bigint;
    forVotes: bigint;
    againstVotes: bigint;
    abstainVotes: bigint;
    executed: boolean;
  };
}

export interface GovernanceOrchestratorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EMERGENCY_ROLE"
      | "MAX_VOTING_PERIOD"
      | "MIN_VOTING_PERIOD"
      | "PROPOSER_ROLE"
      | "allProposals"
      | "castVote"
      | "checkProposalStatus"
      | "createProposal"
      | "executeProposal"
      | "executedProposals"
      | "getProposal"
      | "getProposalCount"
      | "proposals"
      | "quorumThreshold"
      | "totalVotingSupply"
      | "updateQuorumThreshold"
      | "updateVotingPower"
      | "voteSupport"
      | "votes"
      | "votingPower"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GovernanceVoteCast"
      | "ProposalCreated"
      | "ProposalExecuted"
      | "QuorumThresholdUpdated"
      | "VoteCast"
      | "VotingPowerUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "EMERGENCY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_VOTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_VOTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPOSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "checkProposalStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [BytesLike, string, BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executedProposals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuorumThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVotingPower",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteSupport",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votes",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPower",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "EMERGENCY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_VOTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_VOTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkProposalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executedProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateQuorumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingPower",
    data: BytesLike
  ): Result;
}

export namespace GovernanceVoteCastEvent {
  export type InputTuple = [
    proposalId: BytesLike,
    voter: AddressLike,
    support: boolean,
    weight: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: string,
    voter: string,
    support: boolean,
    weight: bigint
  ];
  export interface OutputObject {
    proposalId: string;
    voter: string;
    support: boolean;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BytesLike,
    proposer: AddressLike,
    description: string,
    votingDeadline: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: string,
    proposer: string,
    description: string,
    votingDeadline: bigint
  ];
  export interface OutputObject {
    proposalId: string;
    proposer: string;
    description: string;
    votingDeadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BytesLike, success: boolean];
  export type OutputTuple = [proposalId: string, success: boolean];
  export interface OutputObject {
    proposalId: string;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuorumThresholdUpdatedEvent {
  export type InputTuple = [
    oldThreshold: BigNumberish,
    newThreshold: BigNumberish
  ];
  export type OutputTuple = [oldThreshold: bigint, newThreshold: bigint];
  export interface OutputObject {
    oldThreshold: bigint;
    newThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    proposalId: BytesLike,
    voter: AddressLike,
    support: boolean,
    weight: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: string,
    voter: string,
    support: boolean,
    weight: bigint
  ];
  export interface OutputObject {
    proposalId: string;
    voter: string;
    support: boolean;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingPowerUpdatedEvent {
  export type InputTuple = [
    account: AddressLike,
    oldPower: BigNumberish,
    newPower: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    oldPower: bigint,
    newPower: bigint
  ];
  export interface OutputObject {
    account: string;
    oldPower: bigint;
    newPower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GovernanceOrchestrator extends BaseContract {
  connect(runner?: ContractRunner | null): GovernanceOrchestrator;
  waitForDeployment(): Promise<this>;

  interface: GovernanceOrchestratorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EMERGENCY_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_VOTING_PERIOD: TypedContractMethod<[], [bigint], "view">;

  MIN_VOTING_PERIOD: TypedContractMethod<[], [bigint], "view">;

  PROPOSER_ROLE: TypedContractMethod<[], [string], "view">;

  allProposals: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  castVote: TypedContractMethod<
    [proposalId: BytesLike, support: boolean],
    [void],
    "nonpayable"
  >;

  checkProposalStatus: TypedContractMethod<
    [proposalId: BytesLike],
    [boolean],
    "view"
  >;

  createProposal: TypedContractMethod<
    [
      proposalId: BytesLike,
      description: string,
      targetHashes: BytesLike[],
      votingPeriod: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  executeProposal: TypedContractMethod<
    [proposalId: BytesLike],
    [void],
    "nonpayable"
  >;

  executedProposals: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getProposal: TypedContractMethod<
    [proposalId: BytesLike],
    [ManifestTypes.GovernanceProposalStructOutput],
    "view"
  >;

  getProposalCount: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, bigint, bigint, bigint, boolean] & {
        proposalId: string;
        proposer: string;
        description: string;
        votingDeadline: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        abstainVotes: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  quorumThreshold: TypedContractMethod<[], [bigint], "view">;

  totalVotingSupply: TypedContractMethod<[], [bigint], "view">;

  updateQuorumThreshold: TypedContractMethod<
    [newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateVotingPower: TypedContractMethod<
    [account: AddressLike, newPower: BigNumberish],
    [void],
    "nonpayable"
  >;

  voteSupport: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  votes: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  votingPower: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EMERGENCY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_VOTING_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_VOTING_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PROPOSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allProposals"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [proposalId: BytesLike, support: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkProposalStatus"
  ): TypedContractMethod<[proposalId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [
      proposalId: BytesLike,
      description: string,
      targetHashes: BytesLike[],
      votingPeriod: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<[proposalId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executedProposals"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [proposalId: BytesLike],
    [ManifestTypes.GovernanceProposalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, bigint, bigint, bigint, boolean] & {
        proposalId: string;
        proposer: string;
        description: string;
        votingDeadline: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        abstainVotes: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "quorumThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVotingSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateQuorumThreshold"
  ): TypedContractMethod<[newThreshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateVotingPower"
  ): TypedContractMethod<
    [account: AddressLike, newPower: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteSupport"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "votes"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "votingPower"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "GovernanceVoteCast"
  ): TypedContractEvent<
    GovernanceVoteCastEvent.InputTuple,
    GovernanceVoteCastEvent.OutputTuple,
    GovernanceVoteCastEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "QuorumThresholdUpdated"
  ): TypedContractEvent<
    QuorumThresholdUpdatedEvent.InputTuple,
    QuorumThresholdUpdatedEvent.OutputTuple,
    QuorumThresholdUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VotingPowerUpdated"
  ): TypedContractEvent<
    VotingPowerUpdatedEvent.InputTuple,
    VotingPowerUpdatedEvent.OutputTuple,
    VotingPowerUpdatedEvent.OutputObject
  >;

  filters: {
    "GovernanceVoteCast(bytes32,address,bool,uint256)": TypedContractEvent<
      GovernanceVoteCastEvent.InputTuple,
      GovernanceVoteCastEvent.OutputTuple,
      GovernanceVoteCastEvent.OutputObject
    >;
    GovernanceVoteCast: TypedContractEvent<
      GovernanceVoteCastEvent.InputTuple,
      GovernanceVoteCastEvent.OutputTuple,
      GovernanceVoteCastEvent.OutputObject
    >;

    "ProposalCreated(bytes32,address,string,uint256)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(bytes32,bool)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "QuorumThresholdUpdated(uint256,uint256)": TypedContractEvent<
      QuorumThresholdUpdatedEvent.InputTuple,
      QuorumThresholdUpdatedEvent.OutputTuple,
      QuorumThresholdUpdatedEvent.OutputObject
    >;
    QuorumThresholdUpdated: TypedContractEvent<
      QuorumThresholdUpdatedEvent.InputTuple,
      QuorumThresholdUpdatedEvent.OutputTuple,
      QuorumThresholdUpdatedEvent.OutputObject
    >;

    "VoteCast(bytes32,address,bool,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VotingPowerUpdated(address,uint256,uint256)": TypedContractEvent<
      VotingPowerUpdatedEvent.InputTuple,
      VotingPowerUpdatedEvent.OutputTuple,
      VotingPowerUpdatedEvent.OutputObject
    >;
    VotingPowerUpdated: TypedContractEvent<
      VotingPowerUpdatedEvent.InputTuple,
      VotingPowerUpdatedEvent.OutputTuple,
      VotingPowerUpdatedEvent.OutputObject
    >;
  };
}
