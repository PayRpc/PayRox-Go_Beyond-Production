/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IManifestDispatcher {
  export type ManifestInfoStruct = {
    hash: BytesLike;
    version: BigNumberish;
    timestamp: BigNumberish;
    selectorCount: BigNumberish;
  };

  export type ManifestInfoStructOutput = [
    hash: string,
    version: bigint,
    timestamp: bigint,
    selectorCount: bigint
  ] & {
    hash: string;
    version: bigint;
    timestamp: bigint;
    selectorCount: bigint;
  };
}

export interface MockManifestDispatcherInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activateCommittedRoot"
      | "activationDelay"
      | "activeEpoch"
      | "activeRoot"
      | "applyRoutes"
      | "commitRoot"
      | "freeze"
      | "frozen"
      | "getManifestInfo"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "pause"
      | "pendingEpoch"
      | "pendingRoot"
      | "pendingSince"
      | "removeRoutes"
      | "renounceRole"
      | "revokeRole"
      | "routes"
      | "setActivationDelay"
      | "setActiveEpoch"
      | "setActiveRoot"
      | "setFrozen"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActivationDelaySet"
      | "Frozen"
      | "RootActivated"
      | "RootCommitted"
      | "RouteAdded"
      | "RouteRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activateCommittedRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activationDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyRoutes",
    values: [
      BytesLike[],
      AddressLike[],
      BytesLike[],
      BytesLike[][],
      boolean[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "commitRoot",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "freeze", values?: undefined): string;
  encodeFunctionData(functionFragment: "frozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getManifestInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingSince",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeRoutes",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "routes", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setActivationDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setActiveEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setActiveRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setFrozen", values: [boolean]): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "activateCommittedRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activationDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "activeRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applyRoutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commitRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freeze", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getManifestInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingSince",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRoutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "routes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setActivationDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setActiveEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setActiveRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFrozen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace ActivationDelaySetEvent {
  export type InputTuple = [oldDelay: BigNumberish, newDelay: BigNumberish];
  export type OutputTuple = [oldDelay: bigint, newDelay: bigint];
  export interface OutputObject {
    oldDelay: bigint;
    newDelay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FrozenEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RootActivatedEvent {
  export type InputTuple = [root: BytesLike, epoch: BigNumberish];
  export type OutputTuple = [root: string, epoch: bigint];
  export interface OutputObject {
    root: string;
    epoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RootCommittedEvent {
  export type InputTuple = [root: BytesLike, epoch: BigNumberish];
  export type OutputTuple = [root: string, epoch: bigint];
  export interface OutputObject {
    root: string;
    epoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RouteAddedEvent {
  export type InputTuple = [
    selector: BytesLike,
    facet: AddressLike,
    codehash: BytesLike
  ];
  export type OutputTuple = [selector: string, facet: string, codehash: string];
  export interface OutputObject {
    selector: string;
    facet: string;
    codehash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RouteRemovedEvent {
  export type InputTuple = [selector: BytesLike];
  export type OutputTuple = [selector: string];
  export interface OutputObject {
    selector: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockManifestDispatcher extends BaseContract {
  connect(runner?: ContractRunner | null): MockManifestDispatcher;
  waitForDeployment(): Promise<this>;

  interface: MockManifestDispatcherInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activateCommittedRoot: TypedContractMethod<[], [void], "view">;

  activationDelay: TypedContractMethod<[], [bigint], "view">;

  activeEpoch: TypedContractMethod<[], [bigint], "view">;

  activeRoot: TypedContractMethod<[], [string], "view">;

  applyRoutes: TypedContractMethod<
    [
      arg0: BytesLike[],
      arg1: AddressLike[],
      arg2: BytesLike[],
      arg3: BytesLike[][],
      arg4: boolean[][]
    ],
    [void],
    "view"
  >;

  commitRoot: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [void],
    "view"
  >;

  freeze: TypedContractMethod<[], [void], "view">;

  frozen: TypedContractMethod<[], [boolean], "view">;

  getManifestInfo: TypedContractMethod<
    [],
    [IManifestDispatcher.ManifestInfoStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [void],
    "view"
  >;

  hasRole: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "view">;

  pendingEpoch: TypedContractMethod<[], [bigint], "view">;

  pendingRoot: TypedContractMethod<[], [string], "view">;

  pendingSince: TypedContractMethod<[], [bigint], "view">;

  removeRoutes: TypedContractMethod<[arg0: BytesLike[]], [void], "view">;

  renounceRole: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [void],
    "view"
  >;

  revokeRole: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [void],
    "view"
  >;

  routes: TypedContractMethod<
    [selector: BytesLike],
    [[string, string] & { facet: string; codehash: string }],
    "view"
  >;

  setActivationDelay: TypedContractMethod<[arg0: BigNumberish], [void], "view">;

  setActiveEpoch: TypedContractMethod<
    [epoch: BigNumberish],
    [void],
    "nonpayable"
  >;

  setActiveRoot: TypedContractMethod<[root: BytesLike], [void], "nonpayable">;

  setFrozen: TypedContractMethod<[isFrozen: boolean], [void], "nonpayable">;

  unpause: TypedContractMethod<[], [void], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activateCommittedRoot"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "activationDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "applyRoutes"
  ): TypedContractMethod<
    [
      arg0: BytesLike[],
      arg1: AddressLike[],
      arg2: BytesLike[],
      arg3: BytesLike[][],
      arg4: boolean[][]
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "commitRoot"
  ): TypedContractMethod<[arg0: BytesLike, arg1: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "freeze"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "frozen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getManifestInfo"
  ): TypedContractMethod<
    [],
    [IManifestDispatcher.ManifestInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<[arg0: BytesLike, arg1: AddressLike], [void], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "pendingEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pendingRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingSince"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeRoutes"
  ): TypedContractMethod<[arg0: BytesLike[]], [void], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<[arg0: BytesLike, arg1: AddressLike], [void], "view">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<[arg0: BytesLike, arg1: AddressLike], [void], "view">;
  getFunction(
    nameOrSignature: "routes"
  ): TypedContractMethod<
    [selector: BytesLike],
    [[string, string] & { facet: string; codehash: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "setActivationDelay"
  ): TypedContractMethod<[arg0: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "setActiveEpoch"
  ): TypedContractMethod<[epoch: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setActiveRoot"
  ): TypedContractMethod<[root: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFrozen"
  ): TypedContractMethod<[isFrozen: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "view">;

  getEvent(
    key: "ActivationDelaySet"
  ): TypedContractEvent<
    ActivationDelaySetEvent.InputTuple,
    ActivationDelaySetEvent.OutputTuple,
    ActivationDelaySetEvent.OutputObject
  >;
  getEvent(
    key: "Frozen"
  ): TypedContractEvent<
    FrozenEvent.InputTuple,
    FrozenEvent.OutputTuple,
    FrozenEvent.OutputObject
  >;
  getEvent(
    key: "RootActivated"
  ): TypedContractEvent<
    RootActivatedEvent.InputTuple,
    RootActivatedEvent.OutputTuple,
    RootActivatedEvent.OutputObject
  >;
  getEvent(
    key: "RootCommitted"
  ): TypedContractEvent<
    RootCommittedEvent.InputTuple,
    RootCommittedEvent.OutputTuple,
    RootCommittedEvent.OutputObject
  >;
  getEvent(
    key: "RouteAdded"
  ): TypedContractEvent<
    RouteAddedEvent.InputTuple,
    RouteAddedEvent.OutputTuple,
    RouteAddedEvent.OutputObject
  >;
  getEvent(
    key: "RouteRemoved"
  ): TypedContractEvent<
    RouteRemovedEvent.InputTuple,
    RouteRemovedEvent.OutputTuple,
    RouteRemovedEvent.OutputObject
  >;

  filters: {
    "ActivationDelaySet(uint64,uint64)": TypedContractEvent<
      ActivationDelaySetEvent.InputTuple,
      ActivationDelaySetEvent.OutputTuple,
      ActivationDelaySetEvent.OutputObject
    >;
    ActivationDelaySet: TypedContractEvent<
      ActivationDelaySetEvent.InputTuple,
      ActivationDelaySetEvent.OutputTuple,
      ActivationDelaySetEvent.OutputObject
    >;

    "Frozen()": TypedContractEvent<
      FrozenEvent.InputTuple,
      FrozenEvent.OutputTuple,
      FrozenEvent.OutputObject
    >;
    Frozen: TypedContractEvent<
      FrozenEvent.InputTuple,
      FrozenEvent.OutputTuple,
      FrozenEvent.OutputObject
    >;

    "RootActivated(bytes32,uint64)": TypedContractEvent<
      RootActivatedEvent.InputTuple,
      RootActivatedEvent.OutputTuple,
      RootActivatedEvent.OutputObject
    >;
    RootActivated: TypedContractEvent<
      RootActivatedEvent.InputTuple,
      RootActivatedEvent.OutputTuple,
      RootActivatedEvent.OutputObject
    >;

    "RootCommitted(bytes32,uint64)": TypedContractEvent<
      RootCommittedEvent.InputTuple,
      RootCommittedEvent.OutputTuple,
      RootCommittedEvent.OutputObject
    >;
    RootCommitted: TypedContractEvent<
      RootCommittedEvent.InputTuple,
      RootCommittedEvent.OutputTuple,
      RootCommittedEvent.OutputObject
    >;

    "RouteAdded(bytes4,address,bytes32)": TypedContractEvent<
      RouteAddedEvent.InputTuple,
      RouteAddedEvent.OutputTuple,
      RouteAddedEvent.OutputObject
    >;
    RouteAdded: TypedContractEvent<
      RouteAddedEvent.InputTuple,
      RouteAddedEvent.OutputTuple,
      RouteAddedEvent.OutputObject
    >;

    "RouteRemoved(bytes4)": TypedContractEvent<
      RouteRemovedEvent.InputTuple,
      RouteRemovedEvent.OutputTuple,
      RouteRemovedEvent.OutputObject
    >;
    RouteRemoved: TypedContractEvent<
      RouteRemovedEvent.InputTuple,
      RouteRemovedEvent.OutputTuple,
      RouteRemovedEvent.OutputObject
    >;
  };
}
