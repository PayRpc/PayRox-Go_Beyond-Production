/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IDiamondLoupeEx {
  export type FacetMetadataStruct = {
    name: string;
    category: string;
    dependencies: string[];
    isUpgradeable: boolean;
  };

  export type FacetMetadataStructOutput = [
    name: string,
    category: string,
    dependencies: string[],
    isUpgradeable: boolean
  ] & {
    name: string;
    category: string;
    dependencies: string[];
    isUpgradeable: boolean;
  };

  export type FacetExStruct = {
    facetAddress: AddressLike;
    functionSelectors: BytesLike[];
    versionTag: BytesLike;
    securityLevel: BigNumberish;
  };

  export type FacetExStructOutput = [
    facetAddress: string,
    functionSelectors: string[],
    versionTag: string,
    securityLevel: bigint
  ] & {
    facetAddress: string;
    functionSelectors: string[];
    versionTag: string;
    securityLevel: bigint;
  };
}

export interface IDiamondLoupeExInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkStorageConflicts"
      | "facetAddressEx"
      | "facetAddressesBatchEx"
      | "facetAddressesEx"
      | "facetFunctionSelectorsEx"
      | "facetHash"
      | "facetImplementation"
      | "facetMetadata"
      | "facetProvenance"
      | "facetsEx"
      | "selectorHash"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SelectorConflict"): EventFragment;

  encodeFunctionData(
    functionFragment: "checkStorageConflicts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddressEx",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddressesBatchEx",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddressesEx",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectorsEx",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "facetHash",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetImplementation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetMetadata",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetProvenance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "facetsEx", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "selectorHash",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkStorageConflicts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddressEx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddressesBatchEx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddressesEx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectorsEx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facetHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetProvenance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facetsEx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selectorHash",
    data: BytesLike
  ): Result;
}

export namespace SelectorConflictEvent {
  export type InputTuple = [
    selector: BytesLike,
    existingFacet: AddressLike,
    newFacet: AddressLike
  ];
  export type OutputTuple = [
    selector: string,
    existingFacet: string,
    newFacet: string
  ];
  export interface OutputObject {
    selector: string;
    existingFacet: string;
    newFacet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDiamondLoupeEx extends BaseContract {
  connect(runner?: ContractRunner | null): IDiamondLoupeEx;
  waitForDeployment(): Promise<this>;

  interface: IDiamondLoupeExInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkStorageConflicts: TypedContractMethod<
    [facet: AddressLike],
    [string[]],
    "view"
  >;

  facetAddressEx: TypedContractMethod<
    [functionSelector: BytesLike, requiredVersion: BytesLike],
    [string],
    "view"
  >;

  facetAddressesBatchEx: TypedContractMethod<
    [functionSelectors: BytesLike[]],
    [string[]],
    "view"
  >;

  facetAddressesEx: TypedContractMethod<
    [includeUnsafe: boolean],
    [string[]],
    "view"
  >;

  facetFunctionSelectorsEx: TypedContractMethod<
    [facet: AddressLike, minSecurityLevel: BigNumberish],
    [string[]],
    "view"
  >;

  facetHash: TypedContractMethod<[facet: AddressLike], [string], "view">;

  facetImplementation: TypedContractMethod<
    [facet: AddressLike],
    [string],
    "view"
  >;

  facetMetadata: TypedContractMethod<
    [facet: AddressLike],
    [IDiamondLoupeEx.FacetMetadataStructOutput],
    "view"
  >;

  facetProvenance: TypedContractMethod<
    [facet: AddressLike],
    [[string, bigint] & { deployer: string; deployTimestamp: bigint }],
    "view"
  >;

  facetsEx: TypedContractMethod<
    [includeMetadata: boolean],
    [IDiamondLoupeEx.FacetExStructOutput[]],
    "view"
  >;

  selectorHash: TypedContractMethod<[facet: AddressLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkStorageConflicts"
  ): TypedContractMethod<[facet: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "facetAddressEx"
  ): TypedContractMethod<
    [functionSelector: BytesLike, requiredVersion: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "facetAddressesBatchEx"
  ): TypedContractMethod<[functionSelectors: BytesLike[]], [string[]], "view">;
  getFunction(
    nameOrSignature: "facetAddressesEx"
  ): TypedContractMethod<[includeUnsafe: boolean], [string[]], "view">;
  getFunction(
    nameOrSignature: "facetFunctionSelectorsEx"
  ): TypedContractMethod<
    [facet: AddressLike, minSecurityLevel: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "facetHash"
  ): TypedContractMethod<[facet: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "facetImplementation"
  ): TypedContractMethod<[facet: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "facetMetadata"
  ): TypedContractMethod<
    [facet: AddressLike],
    [IDiamondLoupeEx.FacetMetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "facetProvenance"
  ): TypedContractMethod<
    [facet: AddressLike],
    [[string, bigint] & { deployer: string; deployTimestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "facetsEx"
  ): TypedContractMethod<
    [includeMetadata: boolean],
    [IDiamondLoupeEx.FacetExStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "selectorHash"
  ): TypedContractMethod<[facet: AddressLike], [string], "view">;

  getEvent(
    key: "SelectorConflict"
  ): TypedContractEvent<
    SelectorConflictEvent.InputTuple,
    SelectorConflictEvent.OutputTuple,
    SelectorConflictEvent.OutputObject
  >;

  filters: {
    "SelectorConflict(bytes4,address,address)": TypedContractEvent<
      SelectorConflictEvent.InputTuple,
      SelectorConflictEvent.OutputTuple,
      SelectorConflictEvent.OutputObject
    >;
    SelectorConflict: TypedContractEvent<
      SelectorConflictEvent.InputTuple,
      SelectorConflictEvent.OutputTuple,
      SelectorConflictEvent.OutputObject
    >;
  };
}
