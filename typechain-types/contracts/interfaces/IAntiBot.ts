/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IAntiBotInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkPriceImpact"
      | "commitWhitelistAdd"
      | "createCommit"
      | "emergencyPriceOverride"
      | "executeCommit"
      | "voteToActivateFailsafeMode"
      | "voteToDeactivateFailsafeMode"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkPriceImpact",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitWhitelistAdd",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createCommit",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPriceOverride",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeCommit",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voteToActivateFailsafeMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voteToDeactivateFailsafeMode",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "checkPriceImpact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitWhitelistAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPriceOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteToActivateFailsafeMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteToDeactivateFailsafeMode",
    data: BytesLike
  ): Result;
}

export interface IAntiBot extends BaseContract {
  connect(runner?: ContractRunner | null): IAntiBot;
  waitForDeployment(): Promise<this>;

  interface: IAntiBotInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkPriceImpact: TypedContractMethod<[], [void], "nonpayable">;

  commitWhitelistAdd: TypedContractMethod<
    [account: AddressLike, salt: BytesLike],
    [void],
    "nonpayable"
  >;

  createCommit: TypedContractMethod<
    [hashedData: BytesLike],
    [void],
    "nonpayable"
  >;

  emergencyPriceOverride: TypedContractMethod<
    [price: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeCommit: TypedContractMethod<
    [data: BytesLike, salt: BytesLike],
    [void],
    "nonpayable"
  >;

  voteToActivateFailsafeMode: TypedContractMethod<[], [void], "nonpayable">;

  voteToDeactivateFailsafeMode: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkPriceImpact"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "commitWhitelistAdd"
  ): TypedContractMethod<
    [account: AddressLike, salt: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createCommit"
  ): TypedContractMethod<[hashedData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyPriceOverride"
  ): TypedContractMethod<[price: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeCommit"
  ): TypedContractMethod<
    [data: BytesLike, salt: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteToActivateFailsafeMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voteToDeactivateFailsafeMode"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
