/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface OrchestratorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activateCommittedRoot"
      | "admin"
      | "authorized"
      | "complete"
      | "dispatcher"
      | "emergencyPaused"
      | "factory"
      | "getIntegrationAddresses"
      | "getPlan"
      | "globalEmergencyPause"
      | "isAuthorized"
      | "isPlanActive"
      | "noteComponent"
      | "orchestrateManifestUpdate"
      | "orchestrateStage"
      | "orchestrateStageBatch"
      | "plans"
      | "setAuthorized"
      | "setGlobalEmergencyPause"
      | "setPlanEmergencyPause"
      | "startOrchestration"
      | "startOrchestrationSecure"
      | "validateOrchestration"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChunksStaged"
      | "ComponentNoted"
      | "EmergencyPause"
      | "OrchestrationCompleted"
      | "OrchestrationStarted"
      | "PlanEmergencyPause"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activateCommittedRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "authorized",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "complete",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatcher",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPaused",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getIntegrationAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPlan", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "globalEmergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPlanActive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "noteComponent",
    values: [BytesLike, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "orchestrateManifestUpdate",
    values: [
      BytesLike,
      BytesLike[],
      AddressLike[],
      BytesLike[],
      BytesLike[][],
      boolean[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "orchestrateStage",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "orchestrateStageBatch",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "plans", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setAuthorized",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalEmergencyPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlanEmergencyPause",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "startOrchestration",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startOrchestrationSecure",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOrchestration",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateCommittedRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "complete", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dispatcher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIntegrationAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "globalEmergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPlanActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "noteComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orchestrateManifestUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orchestrateStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orchestrateStageBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "plans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalEmergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlanEmergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startOrchestration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startOrchestrationSecure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOrchestration",
    data: BytesLike
  ): Result;
}

export namespace ChunksStagedEvent {
  export type InputTuple = [
    id: BytesLike,
    count: BigNumberish,
    gasUsed: BigNumberish,
    feePaid: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    count: bigint,
    gasUsed: bigint,
    feePaid: bigint
  ];
  export interface OutputObject {
    id: string;
    count: bigint;
    gasUsed: bigint;
    feePaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ComponentNotedEvent {
  export type InputTuple = [id: BytesLike, component: AddressLike, tag: string];
  export type OutputTuple = [id: string, component: string, tag: string];
  export interface OutputObject {
    id: string;
    component: string;
    tag: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPauseEvent {
  export type InputTuple = [paused: boolean, admin: AddressLike];
  export type OutputTuple = [paused: boolean, admin: string];
  export interface OutputObject {
    paused: boolean;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrchestrationCompletedEvent {
  export type InputTuple = [id: BytesLike, success: boolean];
  export type OutputTuple = [id: string, success: boolean];
  export interface OutputObject {
    id: string;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrchestrationStartedEvent {
  export type InputTuple = [
    id: BytesLike,
    initiator: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [id: string, initiator: string, timestamp: bigint];
  export interface OutputObject {
    id: string;
    initiator: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlanEmergencyPauseEvent {
  export type InputTuple = [id: BytesLike, paused: boolean];
  export type OutputTuple = [id: string, paused: boolean];
  export interface OutputObject {
    id: string;
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Orchestrator extends BaseContract {
  connect(runner?: ContractRunner | null): Orchestrator;
  waitForDeployment(): Promise<this>;

  interface: OrchestratorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activateCommittedRoot: TypedContractMethod<
    [id: BytesLike],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  authorized: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  complete: TypedContractMethod<
    [id: BytesLike, success: boolean],
    [void],
    "nonpayable"
  >;

  dispatcher: TypedContractMethod<[], [string], "view">;

  emergencyPaused: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  getIntegrationAddresses: TypedContractMethod<
    [],
    [[string, string] & { factoryAddr: string; dispatcherAddr: string }],
    "view"
  >;

  getPlan: TypedContractMethod<
    [id: BytesLike],
    [
      [string, bigint, boolean] & {
        initiator: string;
        gasLimit: bigint;
        completed: boolean;
      }
    ],
    "view"
  >;

  globalEmergencyPause: TypedContractMethod<[], [boolean], "view">;

  isAuthorized: TypedContractMethod<[who: AddressLike], [boolean], "view">;

  isPlanActive: TypedContractMethod<[id: BytesLike], [boolean], "view">;

  noteComponent: TypedContractMethod<
    [id: BytesLike, component: AddressLike, tag: string],
    [void],
    "nonpayable"
  >;

  orchestrateManifestUpdate: TypedContractMethod<
    [
      id: BytesLike,
      selectors: BytesLike[],
      facets: AddressLike[],
      codehashes: BytesLike[],
      proofs: BytesLike[][],
      isRight: boolean[][]
    ],
    [void],
    "nonpayable"
  >;

  orchestrateStage: TypedContractMethod<
    [id: BytesLike, data: BytesLike],
    [[string, string] & { chunk: string; hash: string }],
    "payable"
  >;

  orchestrateStageBatch: TypedContractMethod<
    [id: BytesLike, blobs: BytesLike[]],
    [[string[], string[]] & { chunks: string[]; hashes: string[] }],
    "payable"
  >;

  plans: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, boolean] & {
        initiator: string;
        gasLimit: bigint;
        completed: boolean;
      }
    ],
    "view"
  >;

  setAuthorized: TypedContractMethod<
    [who: AddressLike, ok: boolean],
    [void],
    "nonpayable"
  >;

  setGlobalEmergencyPause: TypedContractMethod<
    [paused: boolean],
    [void],
    "nonpayable"
  >;

  setPlanEmergencyPause: TypedContractMethod<
    [id: BytesLike, paused: boolean],
    [void],
    "nonpayable"
  >;

  startOrchestration: TypedContractMethod<
    [id: BytesLike, gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  startOrchestrationSecure: TypedContractMethod<
    [id: BytesLike, gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  validateOrchestration: TypedContractMethod<
    [id: BytesLike, gasLimit: BigNumberish, initiator: AddressLike],
    [[boolean, string] & { isValid: boolean; reason: string }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activateCommittedRoot"
  ): TypedContractMethod<[id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "authorized"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "complete"
  ): TypedContractMethod<
    [id: BytesLike, success: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dispatcher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyPaused"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getIntegrationAddresses"
  ): TypedContractMethod<
    [],
    [[string, string] & { factoryAddr: string; dispatcherAddr: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlan"
  ): TypedContractMethod<
    [id: BytesLike],
    [
      [string, bigint, boolean] & {
        initiator: string;
        gasLimit: bigint;
        completed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "globalEmergencyPause"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAuthorized"
  ): TypedContractMethod<[who: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPlanActive"
  ): TypedContractMethod<[id: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "noteComponent"
  ): TypedContractMethod<
    [id: BytesLike, component: AddressLike, tag: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "orchestrateManifestUpdate"
  ): TypedContractMethod<
    [
      id: BytesLike,
      selectors: BytesLike[],
      facets: AddressLike[],
      codehashes: BytesLike[],
      proofs: BytesLike[][],
      isRight: boolean[][]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "orchestrateStage"
  ): TypedContractMethod<
    [id: BytesLike, data: BytesLike],
    [[string, string] & { chunk: string; hash: string }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "orchestrateStageBatch"
  ): TypedContractMethod<
    [id: BytesLike, blobs: BytesLike[]],
    [[string[], string[]] & { chunks: string[]; hashes: string[] }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "plans"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, boolean] & {
        initiator: string;
        gasLimit: bigint;
        completed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setAuthorized"
  ): TypedContractMethod<[who: AddressLike, ok: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGlobalEmergencyPause"
  ): TypedContractMethod<[paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlanEmergencyPause"
  ): TypedContractMethod<
    [id: BytesLike, paused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startOrchestration"
  ): TypedContractMethod<
    [id: BytesLike, gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startOrchestrationSecure"
  ): TypedContractMethod<
    [id: BytesLike, gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateOrchestration"
  ): TypedContractMethod<
    [id: BytesLike, gasLimit: BigNumberish, initiator: AddressLike],
    [[boolean, string] & { isValid: boolean; reason: string }],
    "view"
  >;

  getEvent(
    key: "ChunksStaged"
  ): TypedContractEvent<
    ChunksStagedEvent.InputTuple,
    ChunksStagedEvent.OutputTuple,
    ChunksStagedEvent.OutputObject
  >;
  getEvent(
    key: "ComponentNoted"
  ): TypedContractEvent<
    ComponentNotedEvent.InputTuple,
    ComponentNotedEvent.OutputTuple,
    ComponentNotedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPause"
  ): TypedContractEvent<
    EmergencyPauseEvent.InputTuple,
    EmergencyPauseEvent.OutputTuple,
    EmergencyPauseEvent.OutputObject
  >;
  getEvent(
    key: "OrchestrationCompleted"
  ): TypedContractEvent<
    OrchestrationCompletedEvent.InputTuple,
    OrchestrationCompletedEvent.OutputTuple,
    OrchestrationCompletedEvent.OutputObject
  >;
  getEvent(
    key: "OrchestrationStarted"
  ): TypedContractEvent<
    OrchestrationStartedEvent.InputTuple,
    OrchestrationStartedEvent.OutputTuple,
    OrchestrationStartedEvent.OutputObject
  >;
  getEvent(
    key: "PlanEmergencyPause"
  ): TypedContractEvent<
    PlanEmergencyPauseEvent.InputTuple,
    PlanEmergencyPauseEvent.OutputTuple,
    PlanEmergencyPauseEvent.OutputObject
  >;

  filters: {
    "ChunksStaged(bytes32,uint256,uint256,uint256)": TypedContractEvent<
      ChunksStagedEvent.InputTuple,
      ChunksStagedEvent.OutputTuple,
      ChunksStagedEvent.OutputObject
    >;
    ChunksStaged: TypedContractEvent<
      ChunksStagedEvent.InputTuple,
      ChunksStagedEvent.OutputTuple,
      ChunksStagedEvent.OutputObject
    >;

    "ComponentNoted(bytes32,address,string)": TypedContractEvent<
      ComponentNotedEvent.InputTuple,
      ComponentNotedEvent.OutputTuple,
      ComponentNotedEvent.OutputObject
    >;
    ComponentNoted: TypedContractEvent<
      ComponentNotedEvent.InputTuple,
      ComponentNotedEvent.OutputTuple,
      ComponentNotedEvent.OutputObject
    >;

    "EmergencyPause(bool,address)": TypedContractEvent<
      EmergencyPauseEvent.InputTuple,
      EmergencyPauseEvent.OutputTuple,
      EmergencyPauseEvent.OutputObject
    >;
    EmergencyPause: TypedContractEvent<
      EmergencyPauseEvent.InputTuple,
      EmergencyPauseEvent.OutputTuple,
      EmergencyPauseEvent.OutputObject
    >;

    "OrchestrationCompleted(bytes32,bool)": TypedContractEvent<
      OrchestrationCompletedEvent.InputTuple,
      OrchestrationCompletedEvent.OutputTuple,
      OrchestrationCompletedEvent.OutputObject
    >;
    OrchestrationCompleted: TypedContractEvent<
      OrchestrationCompletedEvent.InputTuple,
      OrchestrationCompletedEvent.OutputTuple,
      OrchestrationCompletedEvent.OutputObject
    >;

    "OrchestrationStarted(bytes32,address,uint256)": TypedContractEvent<
      OrchestrationStartedEvent.InputTuple,
      OrchestrationStartedEvent.OutputTuple,
      OrchestrationStartedEvent.OutputObject
    >;
    OrchestrationStarted: TypedContractEvent<
      OrchestrationStartedEvent.InputTuple,
      OrchestrationStartedEvent.OutputTuple,
      OrchestrationStartedEvent.OutputObject
    >;

    "PlanEmergencyPause(bytes32,bool)": TypedContractEvent<
      PlanEmergencyPauseEvent.InputTuple,
      PlanEmergencyPauseEvent.OutputTuple,
      PlanEmergencyPauseEvent.OutputObject
    >;
    PlanEmergencyPause: TypedContractEvent<
      PlanEmergencyPauseEvent.InputTuple,
      PlanEmergencyPauseEvent.OutputTuple,
      PlanEmergencyPauseEvent.OutputObject
    >;
  };
}
