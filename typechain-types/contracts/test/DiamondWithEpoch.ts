/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IDiamondLoupe {
  export type FacetStruct = {
    facetAddress: AddressLike;
    functionSelectors: BytesLike[];
  };

  export type FacetStructOutput = [
    facetAddress: string,
    functionSelectors: string[]
  ] & { facetAddress: string; functionSelectors: string[] };
}

export declare namespace DiamondWithEpoch {
  export type CommitmentEntryStruct = { facetAddress: AddressLike };

  export type CommitmentEntryStructOutput = [facetAddress: string] & {
    facetAddress: string;
  };

  export type CommitmentStruct = { facetAddress: AddressLike };

  export type CommitmentStructOutput = [facetAddress: string] & {
    facetAddress: string;
  };

  export type RoutingHistoryEntryStruct = {
    facetAddress: AddressLike;
    epoch: BigNumberish;
  };

  export type RoutingHistoryEntryStructOutput = [
    facetAddress: string,
    epoch: bigint
  ] & { facetAddress: string; epoch: bigint };
}

export interface DiamondWithEpochInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_EPOCH_JUMP"
      | "commitFacetUpdate"
      | "commitmentHistory"
      | "commitments"
      | "dispatcher"
      | "emergencyEpochReset"
      | "emergencyPause"
      | "epochManager"
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "getCommitmentHistory"
      | "getEpochCommitment"
      | "getRoutingHistory"
      | "onEpochAdvanced"
      | "paused"
      | "validateEpochConsistency"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CommitmentOverwritten"): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_EPOCH_JUMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitFacetUpdate",
    values: [AddressLike, BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitmentHistory",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitments",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatcher",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyEpochReset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCommitmentHistory",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochCommitment",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoutingHistory",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onEpochAdvanced",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validateEpochConsistency",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_EPOCH_JUMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitFacetUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitmentHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dispatcher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyEpochReset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCommitmentHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoutingHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onEpochAdvanced",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateEpochConsistency",
    data: BytesLike
  ): Result;
}

export namespace CommitmentOverwrittenEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    selector: BytesLike,
    oldFacet: AddressLike,
    newFacet: AddressLike
  ];
  export type OutputTuple = [
    epoch: bigint,
    selector: string,
    oldFacet: string,
    newFacet: string
  ];
  export interface OutputObject {
    epoch: bigint;
    selector: string;
    oldFacet: string;
    newFacet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DiamondWithEpoch extends BaseContract {
  connect(runner?: ContractRunner | null): DiamondWithEpoch;
  waitForDeployment(): Promise<this>;

  interface: DiamondWithEpochInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_EPOCH_JUMP: TypedContractMethod<[], [bigint], "view">;

  commitFacetUpdate: TypedContractMethod<
    [facet: AddressLike, selectors: BytesLike[], epoch: BigNumberish],
    [void],
    "nonpayable"
  >;

  commitmentHistory: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish],
    [string],
    "view"
  >;

  commitments: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [string],
    "view"
  >;

  dispatcher: TypedContractMethod<[], [string], "view">;

  emergencyEpochReset: TypedContractMethod<[], [void], "nonpayable">;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  epochManager: TypedContractMethod<[], [string], "view">;

  facetAddress: TypedContractMethod<
    [_functionSelector: BytesLike],
    [string],
    "view"
  >;

  facetAddresses: TypedContractMethod<[], [string[]], "view">;

  facetFunctionSelectors: TypedContractMethod<
    [_facet: AddressLike],
    [string[]],
    "view"
  >;

  facets: TypedContractMethod<[], [IDiamondLoupe.FacetStructOutput[]], "view">;

  getCommitmentHistory: TypedContractMethod<
    [epoch: BigNumberish, selector: BytesLike],
    [DiamondWithEpoch.CommitmentEntryStructOutput[]],
    "view"
  >;

  getEpochCommitment: TypedContractMethod<
    [epoch: BigNumberish, selector: BytesLike],
    [DiamondWithEpoch.CommitmentStructOutput],
    "view"
  >;

  getRoutingHistory: TypedContractMethod<
    [selector: BytesLike],
    [DiamondWithEpoch.RoutingHistoryEntryStructOutput[]],
    "view"
  >;

  onEpochAdvanced: TypedContractMethod<
    [arg0: BigNumberish, newEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  validateEpochConsistency: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_EPOCH_JUMP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "commitFacetUpdate"
  ): TypedContractMethod<
    [facet: AddressLike, selectors: BytesLike[], epoch: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "commitmentHistory"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "commitments"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "dispatcher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyEpochReset"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "epochManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "facetAddress"
  ): TypedContractMethod<[_functionSelector: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "facetAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "facetFunctionSelectors"
  ): TypedContractMethod<[_facet: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "facets"
  ): TypedContractMethod<[], [IDiamondLoupe.FacetStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getCommitmentHistory"
  ): TypedContractMethod<
    [epoch: BigNumberish, selector: BytesLike],
    [DiamondWithEpoch.CommitmentEntryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEpochCommitment"
  ): TypedContractMethod<
    [epoch: BigNumberish, selector: BytesLike],
    [DiamondWithEpoch.CommitmentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoutingHistory"
  ): TypedContractMethod<
    [selector: BytesLike],
    [DiamondWithEpoch.RoutingHistoryEntryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "onEpochAdvanced"
  ): TypedContractMethod<
    [arg0: BigNumberish, newEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "validateEpochConsistency"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "CommitmentOverwritten"
  ): TypedContractEvent<
    CommitmentOverwrittenEvent.InputTuple,
    CommitmentOverwrittenEvent.OutputTuple,
    CommitmentOverwrittenEvent.OutputObject
  >;

  filters: {
    "CommitmentOverwritten(uint64,bytes4,address,address)": TypedContractEvent<
      CommitmentOverwrittenEvent.InputTuple,
      CommitmentOverwrittenEvent.OutputTuple,
      CommitmentOverwrittenEvent.OutputObject
    >;
    CommitmentOverwritten: TypedContractEvent<
      CommitmentOverwrittenEvent.InputTuple,
      CommitmentOverwrittenEvent.OutputTuple,
      CommitmentOverwrittenEvent.OutputObject
    >;
  };
}
