/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface EpochManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_EPOCH_JUMP"
      | "advanceEpoch"
      | "getCurrentEpoch"
      | "listener"
      | "owner"
      | "registerListener"
      | "setEpoch"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "EpochAdvanced"): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_EPOCH_JUMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "advanceEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "listener", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerListener",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEpoch",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_EPOCH_JUMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advanceEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listener", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerListener",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEpoch", data: BytesLike): Result;
}

export namespace EpochAdvancedEvent {
  export type InputTuple = [oldEpoch: BigNumberish, newEpoch: BigNumberish];
  export type OutputTuple = [oldEpoch: bigint, newEpoch: bigint];
  export interface OutputObject {
    oldEpoch: bigint;
    newEpoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EpochManager extends BaseContract {
  connect(runner?: ContractRunner | null): EpochManager;
  waitForDeployment(): Promise<this>;

  interface: EpochManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_EPOCH_JUMP: TypedContractMethod<[], [bigint], "view">;

  advanceEpoch: TypedContractMethod<[], [boolean], "nonpayable">;

  getCurrentEpoch: TypedContractMethod<[], [bigint], "view">;

  listener: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerListener: TypedContractMethod<[l: AddressLike], [void], "nonpayable">;

  setEpoch: TypedContractMethod<[newEpoch: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_EPOCH_JUMP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "advanceEpoch"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "listener"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerListener"
  ): TypedContractMethod<[l: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEpoch"
  ): TypedContractMethod<[newEpoch: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "EpochAdvanced"
  ): TypedContractEvent<
    EpochAdvancedEvent.InputTuple,
    EpochAdvancedEvent.OutputTuple,
    EpochAdvancedEvent.OutputObject
  >;

  filters: {
    "EpochAdvanced(uint64,uint64)": TypedContractEvent<
      EpochAdvancedEvent.InputTuple,
      EpochAdvancedEvent.OutputTuple,
      EpochAdvancedEvent.OutputObject
    >;
    EpochAdvanced: TypedContractEvent<
      EpochAdvancedEvent.InputTuple,
      EpochAdvancedEvent.OutputTuple,
      EpochAdvancedEvent.OutputObject
    >;
  };
}
