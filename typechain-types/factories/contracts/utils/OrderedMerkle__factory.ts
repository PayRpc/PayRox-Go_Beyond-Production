/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  OrderedMerkle,
  OrderedMerkleInterface,
} from "../../../contracts/utils/OrderedMerkle";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proofLength",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "positionLength",
        type: "uint256",
      },
    ],
    name: "ProofLengthMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxLength",
        type: "uint256",
      },
    ],
    name: "ProofTooLong",
    type: "error",
  },
] as const;

const _bytecode =
  "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212209f7da24f4c788a0bb3408d4ee317bbeba72c1300550f5a165e1512b2e069117e64736f6c634300081e0033";

type OrderedMerkleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OrderedMerkleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OrderedMerkle__factory extends ContractFactory {
  constructor(...args: OrderedMerkleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OrderedMerkle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): OrderedMerkle__factory {
    return super.connect(runner) as OrderedMerkle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OrderedMerkleInterface {
    return new Interface(_abi) as OrderedMerkleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): OrderedMerkle {
    return new Contract(address, _abi, runner) as unknown as OrderedMerkle;
  }
}
