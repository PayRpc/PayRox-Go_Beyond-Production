/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  RefactorSafetyLib,
  RefactorSafetyLibInterface,
} from "../../../contracts/libraries/RefactorSafetyLib";

const _abi = [
  {
    inputs: [],
    name: "BaselineGasZero",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "expected",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "actual",
        type: "bytes32",
      },
    ],
    name: "IncompatibleStorageLayout",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fromVersion",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "toVersion",
        type: "uint256",
      },
    ],
    name: "RefSafetyNonIncrementing",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "have",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minRequired",
        type: "uint256",
      },
    ],
    name: "RefSafetyVersionIncompatible",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "RefactorSafetyFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "expected",
        type: "bytes4",
      },
      {
        internalType: "bytes4",
        name: "actual",
        type: "bytes4",
      },
    ],
    name: "SelectorMismatch",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "facetId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "passed",
        type: "bool",
      },
    ],
    name: "RefactorSafetyCheck",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes4[]",
        name: "selectors",
        type: "bytes4[]",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "compatible",
        type: "bool",
      },
    ],
    name: "SelectorCompatibilityVerified",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "namespace",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "structHash",
        type: "bytes32",
      },
    ],
    name: "StorageLayoutValidated",
    type: "event",
  },
] as const;

const _bytecode =
  "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212209293b0f1710b646a0992d5aa9a5715fff9e396f6c4985b231d11d66851ad81f564736f6c634300081e0033";

type RefactorSafetyLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RefactorSafetyLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RefactorSafetyLib__factory extends ContractFactory {
  constructor(...args: RefactorSafetyLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      RefactorSafetyLib & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RefactorSafetyLib__factory {
    return super.connect(runner) as RefactorSafetyLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RefactorSafetyLibInterface {
    return new Interface(_abi) as RefactorSafetyLibInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RefactorSafetyLib {
    return new Contract(address, _abi, runner) as unknown as RefactorSafetyLib;
  }
}
