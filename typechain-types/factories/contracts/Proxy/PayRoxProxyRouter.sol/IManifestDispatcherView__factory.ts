/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IManifestDispatcherView,
  IManifestDispatcherViewInterface,
} from "../../../../contracts/Proxy/PayRoxProxyRouter.sol/IManifestDispatcherView";

const _abi = [
  {
    inputs: [],
    name: "activeRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "frozen",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "routes",
    outputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "codehash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IManifestDispatcherView__factory {
  static readonly abi = _abi;
  static createInterface(): IManifestDispatcherViewInterface {
    return new Interface(_abi) as IManifestDispatcherViewInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IManifestDispatcherView {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IManifestDispatcherView;
  }
}
