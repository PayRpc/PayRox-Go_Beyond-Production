/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  ManifestDispatcher,
  ManifestDispatcherInterface,
} from "../../../../contracts/dispacher/ManifestDispacher.sol/ManifestDispatcher";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "activationDelaySeconds",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "newDelay",
        type: "uint64",
      },
    ],
    name: "ActivationDelayOutOfRange",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "earliest",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "nowTs",
        type: "uint64",
      },
    ],
    name: "ActivationNotReady",
    type: "error",
  },
  {
    inputs: [],
    name: "BadEpoch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "n",
        type: "uint256",
      },
    ],
    name: "BatchTooLarge",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
    ],
    name: "CodeSizeExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "CodehashMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "DuplicateSelector",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "expected",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "actual",
        type: "bytes32",
      },
    ],
    name: "FacetCodeMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "FacetIsSelf",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "FacetUnknown",
    type: "error",
  },
  {
    inputs: [],
    name: "FrozenContract",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidProof",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "level",
        type: "uint8",
      },
    ],
    name: "InvalidSecurityLevel",
    type: "error",
  },
  {
    inputs: [],
    name: "LenMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "NoPendingRoot",
    type: "error",
  },
  {
    inputs: [],
    name: "NoRoute",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proofLength",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "positionLength",
        type: "uint256",
      },
    ],
    name: "ProofLengthMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxLength",
        type: "uint256",
      },
    ],
    name: "ProofTooLong",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "RefactorSafetyFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "RootZero",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "expected",
        type: "bytes4",
      },
      {
        internalType: "bytes4",
        name: "actual",
        type: "bytes4",
      },
    ],
    name: "SelectorMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "ZeroCodeFacet",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "oldDelay",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "newDelay",
        type: "uint64",
      },
    ],
    name: "ActivationDelaySet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "facet",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "level",
        type: "uint8",
      },
    ],
    name: "FacetSecurityLevelSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "facet",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "versionTag",
        type: "bytes32",
      },
    ],
    name: "FacetVersionTagSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "Frozen",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint64",
        name: "oldVersion",
        type: "uint64",
      },
      {
        indexed: true,
        internalType: "uint64",
        name: "newVersion",
        type: "uint64",
      },
    ],
    name: "ManifestVersionUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint64",
        name: "epoch",
        type: "uint64",
      },
    ],
    name: "RootActivated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint64",
        name: "epoch",
        type: "uint64",
      },
    ],
    name: "RootCommitted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        indexed: true,
        internalType: "address",
        name: "facet",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "codehash",
        type: "bytes32",
      },
    ],
    name: "RouteAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "RouteRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        indexed: true,
        internalType: "address",
        name: "oldFacet",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newFacet",
        type: "address",
      },
    ],
    name: "RouteUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes4[]",
        name: "selectors",
        type: "bytes4[]",
      },
    ],
    name: "RoutesRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        indexed: true,
        internalType: "address",
        name: "existingFacet",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newFacet",
        type: "address",
      },
    ],
    name: "SelectorConflict",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "APPLY_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "COMMIT_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "EMERGENCY_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "activateCommittedRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "activationDelay",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "activeEpoch",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "activeRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "facets_",
        type: "address[]",
      },
      {
        internalType: "bytes4[][]",
        name: "selectors_",
        type: "bytes4[][]",
      },
    ],
    name: "adminRegisterUnsafe",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        internalType: "address",
        name: "facetAddr",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "codehash",
        type: "bytes32",
      },
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "bool[]",
        name: "isRight_",
        type: "bool[]",
      },
    ],
    name: "applyRouteOne",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4[]",
        name: "selectors",
        type: "bytes4[]",
      },
      {
        internalType: "address[]",
        name: "facetAddrs",
        type: "address[]",
      },
      {
        internalType: "bytes32[]",
        name: "codehashes",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32[][]",
        name: "proofs",
        type: "bytes32[][]",
      },
      {
        internalType: "bool[][]",
        name: "isRight",
        type: "bool[][]",
      },
    ],
    name: "applyRoutes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "checkStorageConflicts",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "conflicts_",
        type: "bytes32[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "newRoot",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "newEpoch",
        type: "uint64",
      },
    ],
    name: "commitRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "facetAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "functionSelector",
        type: "bytes4",
      },
      {
        internalType: "bytes32",
        name: "requiredVersion",
        type: "bytes32",
      },
    ],
    name: "facetAddressEx",
    outputs: [
      {
        internalType: "address",
        name: "facetAddress_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facetAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4[]",
        name: "functionSelectors",
        type: "bytes4[]",
      },
    ],
    name: "facetAddressesBatchEx",
    outputs: [
      {
        internalType: "address[]",
        name: "facetAddresses_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "includeUnsafe",
        type: "bool",
      },
    ],
    name: "facetAddressesEx",
    outputs: [
      {
        internalType: "address[]",
        name: "facetAddresses_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "facetFunctionSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "minSecurityLevel",
        type: "uint8",
      },
    ],
    name: "facetFunctionSelectorsEx",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "selectors_",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "facetHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "facetImplementation",
    outputs: [
      {
        internalType: "address",
        name: "implementation_",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "facetMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "category",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "dependencies",
            type: "string[]",
          },
          {
            internalType: "bool",
            name: "isUpgradeable",
            type: "bool",
          },
        ],
        internalType: "struct IDiamondLoupeEx.FacetMetadata",
        name: "metadata_",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "facetProvenance",
    outputs: [
      {
        internalType: "address",
        name: "deployer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deployTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "facetSecurityLevel",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "facetSelectors",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "facetVersionTag",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facets",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondLoupe.Facet[]",
        name: "out",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "facetsEx",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
          {
            internalType: "bytes32",
            name: "versionTag",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "securityLevel",
            type: "uint8",
          },
        ],
        internalType: "struct IDiamondLoupeEx.FacetEx[]",
        name: "facets_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "freeze",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "frozen",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLimits",
    outputs: [
      {
        internalType: "uint256",
        name: "maxBatch",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxFacetCode",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "maxActivationDelay",
        type: "uint64",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getManifestInfo",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "version",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "selectorCount",
            type: "uint256",
          },
        ],
        internalType: "struct IManifestDispatcher.ManifestInfo",
        name: "info",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getManifestVersion",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "getRoute",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRouteCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "manifest",
    outputs: [
      {
        internalType: "bytes32",
        name: "activeRoot",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "pendingRoot",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "activeEpoch",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "committedAt",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "activationDelay",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "manifestVersion",
        type: "uint64",
      },
      {
        internalType: "bool",
        name: "frozen",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingEpoch",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingSince",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "expectedCodeHash",
        type: "bytes32",
      },
      {
        internalType: "bytes4[]",
        name: "claimedSelectors",
        type: "bytes4[]",
      },
      {
        internalType: "bool",
        name: "allowAdditions",
        type: "bool",
      },
    ],
    name: "preflightCheckFacet",
    outputs: [
      {
        internalType: "bool",
        name: "ok",
        type: "bool",
      },
      {
        internalType: "bytes32",
        name: "selectorHashEx",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    name: "registeredSelectors",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4[]",
        name: "selectors",
        type: "bytes4[]",
      },
    ],
    name: "removeRoutes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "routeCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "routes",
    outputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "codehash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "selectorHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "newDelay",
        type: "uint64",
      },
    ],
    name: "setActivationDelay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "level",
        type: "uint8",
      },
    ],
    name: "setFacetSecurityLevel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "tag",
        type: "bytes32",
      },
    ],
    name: "setFacetVersionTag",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "manifestHash",
        type: "bytes32",
      },
    ],
    name: "verifyManifest",
    outputs: [
      {
        internalType: "bool",
        name: "ok",
        type: "bool",
      },
      {
        internalType: "bytes32",
        name: "current",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080346101a557601f61386338819003918201601f19168301916001600160401b038311848410176101a95780849260409485528339810103126101a55780516001600160a01b03811691908290036101a55760200151906001600160401b0382168083036101a55760015f558115610196576301e13380811161018457505f9081527f1a93b80846506ef135d1d062834caa1099b42cc3eab0b329c7dc3b52117b936160209081526040808320805460ff1990811660019081179092557f46c7620476b8938d0187cc95a74b3d87de434e130b5656b3edf5729df60ed7cd845282852080548216831790557f2449cacc7a542f73770080c5f33b6f28bacadd5b76abfbe19fbe454d697207b6845282852080548216831790557fde1561b99fc02f9ce13cde51bf018b4f675f13ebf2d79ff56bc37178464f4cea9093529281902080549092169092179055600380546001600160801b031660809390931b600160801b600160c01b031692909217600160c01b17909155516136a590816101be8239f35b6303b2a11d60e61b5f5260045260245ffd5b63d92e233d60e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610015575b36612c6f57005b5f3560e01c8062ebb5f014610319578063021283891461031457806302c675ea1461030f578063054f7d9c1461030a578063062576b21461030557806308e59920146103005780630c5fe450146102fb578063102986bb146102f6578063129fe8c1146102f157806316496ad0146102ec5780631a6e649e146102425780631aca7810146102e75780631e580ed1146102e257806320df4359146102dd5780632590f832146102d85780632a085b14146102d3578063322520571461024c57806339177203146102ce5780633a8c0786146102c9578063441e7d58146102c457806344615bd5146102bf57806345be02b5146102ba5780634c556851146102b55780634d57f607146102b057806351c7094f146102ab57806352ef6b2c146102a657806353d5aa81146102a1578063575d74871461029c57806362a5af3b146102975780636f89e40914610292578063750588cf1461028d5780637a0ed627146102885780637d979a4f1461028357806381007e901461027e578063889c93761461027957806396b896eb14610274578063991c81651461026f5780639f6b4a3b1461026a578063abb2efdf14610265578063adc6c3b214610260578063adfca15e1461025b578063b74a7d3d14610256578063b782ba5014610251578063bf539cb41461024c578063c6ea173b14610247578063cdffacc614610242578063cf25dff31461023d578063f552501a146102385763f5baf0d70361000e57611f3a565b611f03565b611dbe565b6109dc565b611c35565b610c5b565b6119fa565b6119d2565b611997565b6117b8565b61179b565b611775565b61174b565b611666565b61160b565b61150a565b6114e1565b6113fc565b611368565b61133b565b6112ca565b611209565b6111e9565b611160565b611114565b611024565b610fa7565b610de6565b610d19565b610cdf565b610cb6565b610c78565b610c1a565b610bdf565b610ba5565b610b7f565b610af4565b61096d565b610932565b6107ab565b6106f1565b610689565b610586565b610564565b61052a565b6104f1565b61034e565b602435906001600160401b038216820361033457565b5f80fd5b600435906001600160401b038216820361033457565b346103345760403660031901126103345760043561036a61031e565b7fa7cca97e47194b7e39f5c716bb579f82fd22f5387703122260b316b1079e8ad15f525f5160206136305f395f51905f52602052906103e86103e36103dc7f46c7620476b8938d0187cc95a74b3d87de434e130b5656b3edf5729df60ed7cd5b335f9081526020919091526040902090565b5460ff1690565b612003565b61040f61040a61040660ff5f5160206136105f395f51905f52541690565b1590565b61203e565b60045460ff166104d15780156104c2576001600160401b0361045061044461043f6003546001600160401b031690565b612091565b6001600160401b031690565b92169182036104b35761046281600255565b600380546fffffffffffffffff000000000000000019164260401b67ffffffffffffffff60401b161790557f6965b9c8509097ad68ba0eb17fcb9436f4a72a057fe5ac556737580bce80d8405f80a3005b630aa733db60e01b5f5260045ffd5b636fe692dd60e11b5f5260045ffd5b63a530d8bb60e01b5f5260045ffd5b6001600160a01b0381160361033457565b34610334576020366003190112610334576020610518600435610513816104e0565b612d4f565b604051908152f35b5f91031261033457565b34610334575f3660031901126103345760206040517f151f387c3ce2424b7e46cbb7332b70a561e2f859e3a3c7816c8ccc16ea0546398152f35b34610334575f36600319011261033457602060ff600454166040519015158152f35b34610334575f366003190112610334575f60606040516105a5816120e8565b828152826020820152826040820152015261061f60015460035460c01c60095490604051926105d3846120e8565b835260208301526001600160401b034216604083015260608201526040519182918291909160608060808301948051845260208101516020850152604081015160408501520151910152565b0390f35b60409060031901126103345760043561063b816104e0565b9060243560ff811681036103345790565b90602080835192838152019201905f5b8181106106695750505090565b82516001600160e01b03191684526020938401939092019160010161065c565b346103345761061f6106a361069d36610623565b9061240c565b60405191829160208352602083019061064c565b634e487b7160e01b5f52603260045260245ffd5b91909180548310156106ec575f52601c60205f208360031c019260021b1690565b6106b7565b346103345760403660031901126103345760043561070e816104e0565b6001600160a01b03165f9081526007602052604090208054602435908110156103345761073a916106cb565b90549060031b1c60e01b6040518091602082019063ffffffff60e01b1682520390f35b9181601f84011215610334578235916001600160401b038311610334576020808501948460051b01011161033457565b60643590811515820361033457565b60043590811515820361033457565b34610334576080366003190112610334576004356107c8816104e0565b602435906044356001600160401b038111610334576107eb90369060040161075d565b6107f361078d565b9184159485156108f4575b5061082860346040516bffffffffffffffffffffffff198760601b16602082015260148152612123565b6001600160a01b0384165f90815260076020526040902090815461084b816121b8565b925f5b8281106108ce57505050610861836121b8565b925f5b81811061089557876108818861087b898989612e41565b50612d4f565b604080519215158352602083019190915290f35b806108c86108ae6108a9600194868861246e565b61247e565b6108b8838961245a565b6001600160e01b03199091169052565b01610864565b806108ee6108ae6108e1600194866106cb565b90549060031b1c60e01b90565b0161084e565b843f1494505f6107fe565b90602080835192838152019201905f5b81811061091c5750505090565b825184526020938401939092019160010161090f565b346103345760203660031901126103345761094e6004356104e0565b61061f61095961217b565b6040519182916020835260208301906108ff565b34610334576040366003190112610334576004356001600160401b0381116103345761099d90369060040161075d565b602435916001600160401b038311610334576109c06109c893369060040161075d565b9290916124d6565b005b6001600160e01b031981160361033457565b34610334576020366003190112610334576004356109f9816109ca565b63ffffffff60e01b165f526005602052602060018060a01b0360405f205416604051908152f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b60208152610a77610a6183516080602085015260a0840190610a20565b6020840151838203601f19016040850152610a20565b91604081015192601f19838203016060840152835180825260208201916020808360051b8301019601925f915b838310610ac75750505050509060806060610ac493015191019015159052565b90565b9091929396602080610ae5600193601f198682030187528b51610a20565b99019301930191939290610aa4565b3461033457602036600319011261033457610b106004356104e0565b61061f604051610b1f816120e8565b6060815260016020820160608152604083016060815260608401915f8352610b4561267a565b8552610b4f61267a565b905260405190610b60602083612123565b5f808352610b71906020840161268e565b525260405191829182610a44565b3461033457602036600319011261033457610b9b6004356104e0565b60206040515f8152f35b34610334575f3660031901126103345760206040517fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b268152f35b3461033457602036600319011261033457600435610bfc816104e0565b60018060a01b03165f52600b602052602060405f2054604051908152f35b3461033457602036600319011261033457600435610c37816109ca565b63ffffffff60e01b165f526006602052602060ff60405f2054166040519015158152f35b34610334575f366003190112610334576020600954604051908152f35b3461033457602036600319011261033457600435610c95816104e0565b60018060a01b03165f52600a602052602060ff60405f205416604051908152f35b34610334575f3660031901126103345760206001600160401b0360035460801c16604051908152f35b34610334575f3660031901126103345760206040517fa7cca97e47194b7e39f5c716bb579f82fd22f5387703122260b316b1079e8ad18152f35b34610334576040366003190112610334576020610d44600435610d3b816109ca565b602435906126aa565b6040516001600160a01b039091168152f35b602081016020825282518091526040820191602060408360051b8301019401925f915b838310610d8857505050505090565b9091929394602080600192603f19858203018652885190848060a01b038251168152606060ff81610dc686860151608088870152608086019061064c565b946040810151604086015201511691015297019301930191939290610d79565b3461033457602036600319011261033457610dff61079c565b50600854610e0c81612164565b90610e1a6040519283612123565b808252601f19610e2982612164565b015f5b818110610efc5750505f5b818110610e4c576040518061061f8582610d56565b80610e70610e5b600193612702565b905460039190911b1c6001600160a01b031690565b6001600160a01b0381165f908152600760209081526040808320600b835281842054600a9093529220610ee0929190610ecc90610eac906103dc565b92610ec7610eb8612144565b6001600160a01b039097168752565b6121ea565b6020850152604084015260ff166060830152565b610eea828661245a565b52610ef5818561245a565b5001610e37565b602090604051610f0b816120e8565b5f81526060838201525f60408201525f606082015282828701015201610e2c565b602060031982011261033457600435906001600160401b03821161033457610f569160040161075d565b9091565b90602080835192838152019201905f5b818110610f775750505090565b82516001600160a01b0316845260209384019390920191600101610f6a565b906020610ac4928181520190610f5a565b3461033457610fb536610f2c565b90610fbf826121b8565b915f5b818110610fdf576040516020808252819061061f90820187610f5a565b80610fed600192848661246e565b35610ff7816109ca565b63ffffffff60e01b165f526005602052818060a01b0360405f20541661101d828761245a565b5201610fc2565b3461033457604036600319011261033457600435611041816104e0565b335f9081525f5160206136505f395f51905f5260205260409020602435919061106f9060ff905b5416612003565b60045460ff166104d1576001600160a01b038181165f908152600c602052604090206110a3905b546001600160a01b031690565b16156110f9576001600160a01b03165f818152600b6020908152604091829020849055905192835290917fe5dec4085392fa03d552cb2893a23c346d5196597aaabac78417a46351eec53a91819081015b0390a2005b62e3422b60e21b5f526001600160a01b031660045260245b5ffd5b3461033457602036600319011261033457600435611131816109ca565b63ffffffff60e01b165f5260056020526040805f206001808060a01b0382541691015482519182526020820152f35b34610334575f3660031901126103345760405180602060085491828152019060085f527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3905f5b8181106111ca5761061f856111be81870382612123565b60405191829182610f96565b82546001600160a01b03168452602090930192600192830192016111a7565b34610334575f36600319011261033457602060035460c01c604051908152f35b346103345760a0366003190112610334576004356001600160401b0381116103345761123990369060040161075d565b6024356001600160401b0381116103345761125890369060040161075d565b6044939193356001600160401b0381116103345761127a90369060040161075d565b6064929192356001600160401b0381116103345761129c90369060040161075d565b939092608435976001600160401b038911610334576112c26109c899369060040161075d565b98909761271a565b34610334575f36600319011261033457335f9081525f5160206136505f395f51905f52602052604090206113009060ff90611068565b60045460ff81166104d15760ff19166001176004557fa8cab3d1893ed53071b052fafa843143492f25d1d6b0170d460789f7ab1954be5f80a1005b34610334575f3660031901126103345760606040516064815261600060208201526301e133806040820152f35b34610334575f366003190112610334576020600254604051908152f35b602081016020825282518091526040820191602060408360051b8301019401925f915b8383106113b757505050505090565b90919293946020806113ed600193603f198682030187526040838b51878060a01b0381511684520151918185820152019061064c565b970193019301919392906113a8565b34610334575f3660031901126103345760085461141881612164565b906114266040519283612123565b808252601f1961143582612164565b015f5b8181106114bd5750505f5b818110611458576040518061061f8582611385565b80611467610e5b600193612702565b6001600160a01b0381165f90815260076020526040902061149c90610ec761148d612155565b6001600160a01b039094168452565b60208201526114ab828661245a565b526114b6818561245a565b5001611443565b6020906040516114cc81612108565b5f815260608382015282828701015201611438565b34610334575f3660031901126103345760206001600160401b0360035460401c16604051908152f35b346103345761151836610623565b5f80525f5160206136305f395f51905f52602052906115496103e36103dc5f5160206136505f395f51905f526103ca565b60045460ff166104d1576001600160a01b038181165f908152600c6020526040902061157490611096565b16156110f957600360ff8316116115f5576110f4816115d7846115c87f56b27b66dccd51815ce1719ea3ef55e9984da573e0a468fef43e575c47a753219560018060a01b03165f52600a60205260405f2090565b9060ff1660ff19825416179055565b60405160ff90941684526001600160a01b0316929081906020820190565b6325aa519960e11b5f5260ff821660045260245ffd5b3461033457602036600319011261033457600435611628816104e0565b6001600160a01b039081165f908152600c6020908152604080832054600d8352928190205481519390941683526001600160401b0390931690820152f35b346103345760203660031901126103345761167f610338565b335f9081525f5160206136505f395f51905f52602052604090206116a59060ff90611068565b60ff600454166104d1576301e133806001600160401b03821611611730576003805467ffffffffffffffff60801b608084811b9190911667ffffffffffffffff60801b19831617909255604080516001600160401b039290931c82168352921660208201527f29fabdd5e710c2b0282fcc042164a54b68bd783f561a1f82033b1270e5541dbb9190a1005b6303b2a11d60e61b5f526001600160401b031660045260245ffd5b34610334576020366003190112610334576001546040805160043583148152602081019290925290f35b34610334575f3660031901126103345760206001600160401b0360035416604051908152f35b34610334575f366003190112610334576020600154604051908152f35b34610334575f366003190112610334576117d96103e36103dc6103ca611fab565b6117f761040a61040660ff5f5160206136105f395f51905f52541690565b60045460ff166104d15760025480156119885761183d600354611837611827826001600160401b039060401c1690565b9160801c6001600160401b031690565b906120b4565b6001600160401b034216906001600160401b03811682106119675761186183600155565b61189561187961043f6003546001600160401b031690565b6001600160401b03166001600160401b03196003541617600355565b61189e5f600255565b6118b767ffffffffffffffff60401b1960035416600355565b60035460c01c6118ee6118c982612091565b600380546001600160c01b031660c09290921b6001600160c01b031916919091179055565b6001600160401b038061193e6001546003549083611912836001600160401b031690565b16907ffb332b8e86a2547d32a254749d32450f293166f997ff9e73626590f1564498545f80a360c01c90565b1691167fbdf7a4e360e060b2bfa9e310546ce8ce1b892bd04394c9a234e817dd15191a8a5f80a3005b63a16fa60560e01b5f526001600160401b039081166004521660245260445ffd5b631500c4af60e11b5f5260045ffd5b34610334576020366003190112610334576004356119b4816104e0565b60018060a01b03165f52600760205261061f6106a360405f206121ea565b346103345760203660031901126103345760206004356119f1816104e0565b3f604051908152f35b3461033457611a0836610f2c565b7fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b265f525f5160206136305f395f51905f52602052611a6b6103e36103dc7fde1561b99fc02f9ce13cde51bf018b4f675f13ebf2d79ff56bc37178464f4cea6103ca565b611a8961040a61040660ff5f5160206136105f395f51905f52541690565b60648111611c23575f905f5b818110611aff57507f10da44a9075ceb933a055d181f60aabdccf48b2099107893f1c701c790d5cfa59192611acf60405192839283612a94565b0390a1611ad857005b60035460c01c611aea6118c982612091565b6001600160401b038061193e60035460c01c90565b611b0d6108a982848761246e565b611b2b6110968263ffffffff60e01b165f52600560205260405f2090565b6001600160a01b038116611b44575b5050600101611a95565b8192945090611b9d91611b76611b6b8363ffffffff60e01b165f52600560205260405f2090565b60015f918281550155565b611b946103dc8363ffffffff60e01b165f52600660205260405f2090565b611bd5576133dd565b6001600160e01b0319167f76d504ba17812cd58154028a97a1e6704678fd628c01ae5514483383a787e9595f80a2600191825f611b3a565b611bfd611bf38363ffffffff60e01b165f52600660205260405f2090565b805460ff19169055565b60095480611c0c575b506133dd565b611c18611c1d91612a88565b600955565b5f611c06565b63533dcfcf60e11b5f5260045260245ffd5b346103345760a036600319011261033457600435611c52816109ca565b60243590611c5f826104e0565b604435916064356001600160401b03811161033457611c8290369060040161075d565b916084356001600160401b03811161033457611ca5611d5791369060040161075d565b611cb66103e36103dc6103ca611fab565b611cd461040a61040660ff5f5160206136105f395f51905f52541690565b611d3c611cdf612196565b95611ce8612196565b97611cf1612196565b9a611d2b611cfd612adc565b98611d13611d09612adc565b9d6108b88d61244d565b611d1c8c61244d565b6001600160a01b039091169052565b611d348c61244d565b52369161275c565b611d458561244d565b52611d4f8461244d565b5036916127a8565b611d608561244d565b52611d6a8461244d565b50303b15610334575f93611d9391604051968795869563575d748760e01b875260048701612b86565b038183305af18015611db957611da557005b80611db35f6109c893612123565b80610520565b612c56565b3461033457602036600319011261033457611dd761079c565b6008549015611e2757611de9816121b8565b905f5b818110611e0557505061061f9060405191829182610f96565b80611e21611e17610e5b600194612702565b611d1c838761245a565b01611dec565b5f5f5b828110611eb45750611e3b906121b8565b905f5f5b828110611e525750505061061f906111be565b80611e61610e5b600193612702565b6001600160a01b0381165f908152600a60205260409020611e8b90611e85906103dc565b60ff1690565b611e97575b5001611e3f565b611eae90611d1c611ea786612c61565b958861245a565b5f611e90565b611ee2611e856103dc611ec9610e5b85612702565b6001600160a01b03165f908152600a6020526040902090565b611eef575b600101611e2a565b90611efb600191612c61565b919050611ee7565b34610334575f366003190112610334576020611f296001600160401b0360035416612091565b6001600160401b0360405191168152f35b34610334575f3660031901126103345760e060015460025460035460ff600454169160405193845260208401526001600160401b03811660408401526001600160401b038160401c1660608401526001600160401b038160801c16608084015260c01c60a0830152151560c0820152f35b7f151f387c3ce2424b7e46cbb7332b70a561e2f859e3a3c7816c8ccc16ea0546395f525f5160206136305f395f51905f526020527f2449cacc7a542f73770080c5f33b6f28bacadd5b76abfbe19fbe454d697207b690565b1561200a57565b60405162461bcd60e51b815260206004820152600c60248201526b4d697373696e6720726f6c6560a01b6044820152606490fd5b1561204557565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b634e487b7160e01b5f52601160045260245ffd5b6001600160401b036001911601906001600160401b0382116120af57565b61207d565b906001600160401b03809116911601906001600160401b0382116120af57565b634e487b7160e01b5f52604160045260245ffd5b608081019081106001600160401b0382111761210357604052565b6120d4565b604081019081106001600160401b0382111761210357604052565b90601f801991011681019081106001600160401b0382111761210357604052565b60405190612153608083612123565b565b60405190612153604083612123565b6001600160401b0381116121035760051b60200190565b6040519061218a602083612123565b5f808352366020840137565b604080519091906121a78382612123565b6001815291601f1901366020840137565b906121c282612164565b6121cf6040519182612123565b82815280926121e0601f1991612164565b0190602036910137565b6040518154808252909291839061220860208301915f5260205f2090565b925f905b80600783011061234f57612153945491818110612330575b818110612311575b8181106122f2575b8181106122d3575b8181106122b4575b818110612295575b818110612277575b10612262575b500383612123565b6001600160e01b03191681526020015f61225a565b602083811b6001600160e01b03191685529093600191019301612254565b604083901b6001600160e01b031916845292600190602001930161224c565b606083901b6001600160e01b0319168452926001906020019301612244565b608083901b6001600160e01b031916845292600190602001930161223c565b60a083901b6001600160e01b0319168452926001906020019301612234565b60c083901b6001600160e01b031916845292600190602001930161222c565b6001600160e01b031960e084901b168452926001906020019301612224565b9160089193506101006001916123fe8754612375838260e01b63ffffffff60e01b169052565b60c081901b6001600160e01b031916602084015260a081901b6001600160e01b0319166040840152608081901b6001600160e01b0319166060840152606081901b6001600160e01b0319166080840152604081901b6001600160e01b03191660a0840152602081901b6001600160e01b03191660c08401526001600160e01b03191660e0830152565b01940192018592939161220c565b6001600160a01b03165f818152600a6020526040902054909160ff918216911611612444575f526007602052610ac460405f206121ea565b50610ac461217b565b8051156106ec5760200190565b80518210156106ec5760209160051b010190565b91908110156106ec5760051b0190565b35610ac4816109ca565b35610ac4816104e0565b91908110156106ec5760051b81013590601e19813603018212156103345701908135916001600160401b038311610334576020018260051b36038113610334579190565b9192906124ea6103e36103dc6103ca611fab565b61250861040a61040660ff5f5160206136105f395f51905f52541690565b8015612674578181036126655760648111611c23575f5b81811061258157505050505061253760035460c01c90565b6125436118c982612091565b6001600160401b038061255860035460c01c90565b1691167fbdf7a4e360e060b2bfa9e310546ce8ce1b892bd04394c9a234e817dd15191a8a5f80a3565b61259461258f82848761246e565b612488565b6001600160a01b038116801561265657301461264757803b801561262b57616000811161260b5750803f6125c9838689612492565b60648194929411611c23575f5b8181106125ea57505050505060010161251f565b8061260585856126006108a9600196888c61246e565b612f51565b016125d6565b63182977e560e01b5f526001600160a01b0390911660045260245260445ffd5b632dcff22f60e11b5f526001600160a01b03821660045260245ffd5b633aa7666160e21b5f5260045ffd5b63d92e233d60e01b5f5260045ffd5b638b140a8160e01b5f5260045ffd5b50505050565b60405190612689602083612123565b5f8252565b5f5b82811061269c57505050565b606082820152602001612690565b6001600160e01b0319165f908152600560205260409020546001600160a01b03169081156126fc5780159081156126e6575b50610ac457505f90565b9050815f52600b60205260405f2054145f6126dc565b50505f90565b6008548110156106ec5760085f5260205f2001905f90565b98979695949392919060025f541461273f576127399960025f556127fc565b60015f55565b633ee5aeb560e01b5f5260045ffd5b90600182018092116120af57565b92919061276881612164565b936127766040519586612123565b602085838152019160051b810192831161033457905b82821061279857505050565b813581526020918201910161278c565b92916127b382612164565b936127c16040519586612123565b602085848152019260051b810191821161033457915b8183106127e357505050565b82358015158103610334578152602092830192016127d7565b939592919790989694966128176103e36103dc6103ca611fab565b61283561040a61040660ff5f5160206136105f395f51905f52541690565b60045460ff166104d157600254928315611988578a15612a7b57808b14801590612a71575b8015612a67575b8015612a5d575b6126655760648b11612a49575f5b8b81106129b957505f5b8b811061289f5750505050505050505050505061253760035460c01c90565b6128ad61258f82848e61246e565b906001600160a01b038216801561265657301461264757813b801561299d57616000811161297e5750612942610406888f888f8f8f8f898f96818f959461291c8f96612934976129158561293c9c61290f6108a9836129229b61292a9e61246e565b9461246e565b35916131ea565b9a612492565b949096612492565b949092369161275c565b9236916127a8565b90613231565b61296f576129698a6001938f848f61290f6108a98f61296295859161246e565b3591612f51565b01612880565b6309bde33960e01b5f5260045ffd5b63182977e560e01b5f526001600160a01b03831660045260245260445ffd5b632dcff22f60e11b5f526001600160a01b03831660045260245ffd5b6129c28161274e565b8c888183106129d657505050600101612876565b6129f56108a9846129ee6108a98887612a029761246e565b948d61246e565b6001600160e01b03191690565b6001600160e01b031990911614612a1b576001016129c2565b50612a2d6108a9611111928e8a61246e565b63edd7c12360e01b5f526001600160e01b031916600452602490565b63533dcfcf60e11b5f5260048b905260245ffd5b50818b1415612868565b50868b1415612861565b50888b141561285a565b5050505050505050505050565b80156120af575f190190565b60208082528101839052604001915f5b818110612ab15750505090565b9091926020806001928635612ac5816109ca565b6001600160e01b0319168152019401929101612aa4565b604080519190612aec8184612123565b6001835261215390601f19016020840161268e565b9080602083519182815201916020808360051b8301019401925f915b838310612b2c57505050505090565b9091929394601f19828203018352855190602080835192838152019201905f905b808210612b6c5750505060208060019297019301930191939290612b1d565b909192602080600192865115158152019401920190612b4d565b95949290612bbf92612ba3612bb19260a08a5260a08a019061064c565b9088820360208a0152610f5a565b9086820360408801526108ff565b938085036060820152825180865260208601906020808260051b8901019501915f905b828210612c005750505050610ac49394506080818403910152612b01565b90919295601f19898203018252865190602080835192838152019201905f905b808210612c3e57505050602080600192980192019201909291612be2565b90919260208060019286518152019401920190612c20565b6040513d5f823e3d90fd5b5f1981146120af5760010190565b612c8d61040a6104065f5160206136105f395f51905f525460ff1690565b5f80356001600160e01b031916815260056020526040902080546001600160a01b0316906001600160a01b03821615612cf5576001823f91015403612ce6575f8091368280378136915af43d90815f803e15611111575ff35b63a5cfda9b60e01b5f5260045ffd5b636586e12960e01b5f5260045ffd5b5f198101919082116120af57565b60209181520160208251919201905f5b818110612d2f5750505090565b82516001600160e01b031916845260209384019390920191600101612d22565b6001600160a01b0381165f908152600760205260409020612d6f906121ea565b9081516001905b808210612dad575050612da7612d99913f92604051928391602083019586612d12565b03601f198101835282612123565b51902090565b909193612dcb612dbd848661245a565b516001600160e01b03191690565b94835b80151580612e17575b15612dfc57612df46108ae612dbd612dee84612d04565b8961245a565b5f1901612dce565b600192966108b8612e10929693968861245a565b0190612d76565b50612e30612e2a612dbd612dee84612d04565b60e01c90565b63ffffffff8860e01c911611612dd7565b905f935b8251851015612ee7575f935f5b8351811015612edd57612e68612dbd888761245a565b612e786129f5612dbd848861245a565b6001600160e01b031990911614612e9157600101612e52565b50949091935060015b15612eaa57600101939290612e45565b612eba612dbd611111928561245a565b632e2ce35360e21b5f9081526001600160e01b0319909116600452602452604490565b5094909193612e9a565b935091159182612f43575b5050612efd57600190565b6040516345b78ccd60e01b815260206004820181905260248201527f53656c6563746f72206164646974696f6e73206e6f74207065726d69747465646044820152606490fd5b519051141590505f80612ef2565b909180833f036131c657612f796110968363ffffffff60e01b165f52600560205260405f2090565b612fdb612f84612155565b6001600160a01b0386168152836020820152612fb18563ffffffff60e01b165f52600560205260405f2090565b815181546001600160a01b0319166001600160a01b03919091161781559060019060200151910155565b612ffc6104066103dc8563ffffffff60e01b165f52600660205260405f2090565b15613158575061302d6130208363ffffffff60e01b165f52600660205260405f2090565b805460ff19166001179055565b61303b611c18600954612c61565b6130458284613531565b6040519081526001600160a01b038316916001600160e01b031916907f4c4455a30528c319643ae6fc35f3a0fcabde6c015f2a1a5270382c4a190b0fa390602090a35b6001600160a01b038181165f908152600c602052604090206130a990611096565b16156130fb575b6001600160a01b0381165f908152600a6020526040902060ff906130d3906103dc565b16156130dc5750565b6001600160a01b03165f908152600a6020526040902061215390613020565b6001600160a01b0381165f908152600c6020526040902080546001600160a01b031916331790556001600160a01b0381165f908152600d60205260409020805467ffffffffffffffff19166001600160401b0342161790556130b0565b6001600160a01b038481169390821692509083830361317b575b50505050613088565b81613185916133dd565b61318f8185613531565b6001600160e01b0319167f6b1a92a4c09810a2a37b98e56f4200944bb663ffcf62c886229b65a5ea5d14a75f80a45f808080613172565b63581bae3360e11b5f526001600160a01b038316600452602452813f60445260645ffd5b916040519160208301935f855263ffffffff60e01b1660218401526bffffffffffffffffffffffff199060601b166025830152603982015260398152612da7605982612123565b9290919280518351908181036133335750508051916101008311613319575f935f5b8481106132ec57505061010083106132d2575b61327390939291936135c6565b925f925b82841061328657505050501490565b90919293600190818084881c16145f146132b9576132af906132a8878661245a565b51906135e5565b9401929190613277565b6132cd906132c7878661245a565b516135e5565b6132af565b92613273906132e36001851b612d04565b16939050613266565b6132ff6132f9828461245a565b51151590565b61330c575b600101613253565b6001811b90951794613304565b63d31c949560e01b5f52600483905261010060245260445ffd5b633a67ea2360e11b5f5260045260245260445ffd5b634e487b7160e01b5f52603160045260245ffd5b80548015613385575f19019061337282826106cb565b63ffffffff82549160031b1b1916905555565b613348565b6008548015613385575f198101906008548210156106ec5760085f8190527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee290910180546001600160a01b031916905555565b6001600160a01b0381165f9081526007602052604090205f5b8154808210156135045761340d6108e183856106cb565b6001600160e01b031986811691161461342957506001016133f6565b61346c929394506134486108e161344261344f93612d04565b866106cb565b91846106cb565b90919063ffffffff83549160031b9260e01c831b921b1916179055565b6134758161335c565b541561347e5750565b6008545f5b81811061348f57505050565b61349b610e5b82612702565b6001600160a01b038481169116146134b557600101613483565b906134fc92506134d2610e5b6134cd6134d893612d04565b612702565b91612702565b81546001600160a01b0393841660039290921b91821b9390911b1916919091179055565b61215361338a565b5050909150613475565b90815491600160401b831015612103578261344f916001612153950181556106cb565b9060018060a01b0382165f52600760205260405f205f8154905b81811061358e575015613563575b612153925061350e565b600854600160401b81101561210357612153936134d88260016135899401600855612702565b613559565b61359881846106cb565b90546001600160e01b031960039290921b1c60e01b8116908516146135bf5760010161354b565b5050505050565b60405160208101915f8352602182015260218152612da7604182612123565b90604051906020820192600160f81b84526021830152604182015260418152612da760618261212356fe9b02e42a9b92e93607133334d133e31dc3f904c7156cf846526371c09ab4c5b2cab4d17318aeaabb38cce9d7872ecfed2752c05570a4e2c3cf99e5dc5552efef1a93b80846506ef135d1d062834caa1099b42cc3eab0b329c7dc3b52117b9361a2646970667358221220dd361c4f664b9a5c8541ae6796fb152c9813fc1c7337095d7590fdbc0d5f419b64736f6c634300081e0033";

type ManifestDispatcherConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ManifestDispatcherConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ManifestDispatcher__factory extends ContractFactory {
  constructor(...args: ManifestDispatcherConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    admin: AddressLike,
    activationDelaySeconds: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      admin,
      activationDelaySeconds,
      overrides || {}
    );
  }
  override deploy(
    admin: AddressLike,
    activationDelaySeconds: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      admin,
      activationDelaySeconds,
      overrides || {}
    ) as Promise<
      ManifestDispatcher & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ManifestDispatcher__factory {
    return super.connect(runner) as ManifestDispatcher__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ManifestDispatcherInterface {
    return new Interface(_abi) as ManifestDispatcherInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ManifestDispatcher {
    return new Contract(address, _abi, runner) as unknown as ManifestDispatcher;
  }
}
