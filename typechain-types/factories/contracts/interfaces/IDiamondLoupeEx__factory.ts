/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IDiamondLoupeEx,
  IDiamondLoupeExInterface,
} from "../../../contracts/interfaces/IDiamondLoupeEx";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        indexed: false,
        internalType: "address",
        name: "existingFacet",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newFacet",
        type: "address",
      },
    ],
    name: "SelectorConflict",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "checkStorageConflicts",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "conflicts_",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        internalType: "bytes32",
        name: "version",
        type: "bytes32",
      },
    ],
    name: "facetAddressEx",
    outputs: [
      {
        internalType: "address",
        name: "facet_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4[]",
        name: "selectors",
        type: "bytes4[]",
      },
    ],
    name: "facetAddressesBatchEx",
    outputs: [
      {
        internalType: "address[]",
        name: "addresses_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "includeUnsafe",
        type: "bool",
      },
    ],
    name: "facetAddressesEx",
    outputs: [
      {
        internalType: "address[]",
        name: "addresses_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "minLevel",
        type: "uint8",
      },
    ],
    name: "facetFunctionSelectorsEx",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "selectors_",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "facetHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "facetImplementation",
    outputs: [
      {
        internalType: "address",
        name: "implementation_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "facetMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "category",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "dependencies",
            type: "string[]",
          },
          {
            internalType: "bool",
            name: "isUpgradeable",
            type: "bool",
          },
        ],
        internalType: "struct IDiamondLoupeEx.FacetMetadata",
        name: "metadata_",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "facetProvenance",
    outputs: [
      {
        internalType: "address",
        name: "deployer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "includeMetadata",
        type: "bool",
      },
    ],
    name: "facetsEx",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
          {
            internalType: "bytes32",
            name: "versionTag",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "securityLevel",
            type: "uint8",
          },
        ],
        internalType: "struct IDiamondLoupeEx.FacetEx[]",
        name: "facets_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "selectorHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IDiamondLoupeEx__factory {
  static readonly abi = _abi;
  static createInterface(): IDiamondLoupeExInterface {
    return new Interface(_abi) as IDiamondLoupeExInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IDiamondLoupeEx {
    return new Contract(address, _abi, runner) as unknown as IDiamondLoupeEx;
  }
}
