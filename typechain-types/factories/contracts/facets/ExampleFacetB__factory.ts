/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ExampleFacetB,
  ExampleFacetBInterface,
} from "../../../contracts/facets/ExampleFacetB";

const _abi = [
  {
    inputs: [],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "DataTooLarge",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyBatch",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyData",
    type: "error",
  },
  {
    inputs: [],
    name: "ExpiredSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidOperationType",
    type: "error",
  },
  {
    inputs: [],
    name: "LengthMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOperator",
    type: "error",
  },
  {
    inputs: [],
    name: "Paused",
    type: "error",
  },
  {
    inputs: [],
    name: "TooManyOperations",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "operationCount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "successCount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "executor",
        type: "address",
      },
    ],
    name: "BatchOperationCompleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "operationType",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "dataHash",
        type: "bytes32",
      },
    ],
    name: "FacetBExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldGovernance",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newGovernance",
        type: "address",
      },
    ],
    name: "GovernanceRotated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldOperator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOperator",
        type: "address",
      },
    ],
    name: "OperatorRotated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "paused",
        type: "bool",
      },
      {
        indexed: true,
        internalType: "address",
        name: "by",
        type: "address",
      },
    ],
    name: "PausedSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldValue",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newValue",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "changer",
        type: "address",
      },
    ],
    name: "StateChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "operations",
        type: "uint256[]",
      },
      {
        internalType: "bytes[]",
        name: "dataArray",
        type: "bytes[]",
      },
    ],
    name: "batchExecuteB",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "results",
        type: "bytes32[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "inputs",
        type: "uint256[]",
      },
    ],
    name: "complexCalculation",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "operationType",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "executeB",
    outputs: [
      {
        internalType: "bytes32",
        name: "operationId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAdvancedAnalytics",
    outputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalOps",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "lastExecutor",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isPaused",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isInitialized",
        type: "bool",
      },
      {
        internalType: "address",
        name: "operatorAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "governanceAddr",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFacetInfoB",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "bytes4[]",
        name: "selectors",
        type: "bytes4[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getGovernance",
    outputs: [
      {
        internalType: "address",
        name: "governance",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInitNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "operationId",
        type: "bytes32",
      },
    ],
    name: "getOperation",
    outputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "operationType",
            type: "uint32",
          },
          {
            internalType: "uint64",
            name: "timestamp",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "executor",
            type: "address",
          },
          {
            internalType: "bool",
            name: "executed",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct ExampleFacetB.OperationData",
        name: "operation",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStateSummary",
    outputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "operations",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "executor",
        type: "address",
      },
      {
        internalType: "bool",
        name: "paused",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getUserOperations",
    outputs: [
      {
        internalType: "uint256[]",
        name: "operationTypes",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getUserStatistics",
    outputs: [
      {
        internalType: "uint256",
        name: "totalUserOps",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "mostRecentOp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "uniqueOpTypes",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator_",
        type: "address",
      },
      {
        internalType: "address",
        name: "governance_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "initializeFacetB",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newGovernance",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "rotateGovernance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOperator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "rotateOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "operationType",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "simulateOperation",
    outputs: [
      {
        internalType: "uint256",
        name: "newValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gasEstimate",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "operationType",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "validateOperation",
    outputs: [
      {
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "reason",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346015576120ae908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c80630af73309146118185780630e7d1d93146116d2578063279412c51461151a578063289b3c0d146114e657806331e8c1951461144a57806337184e95146110d55780633c7264b214610e7a5780635aa723df146107455780637c300fd1146106d2578063a83583e914610595578063a8ced948146104de578063c15a59e21461038e578063c66b4f2314610365578063e2ab79b114610300578063e9e831d7146100f45763ea83977f146100c9575f80fd5b346100f05760406100e26100dc3661194d565b91611d96565b825191151582526020820152f35b5f80fd5b346100f05760803660031901126100f05761010d611980565b6024356001600160a01b0381168082036100f0576044356064356001600160401b0381116100f057610143903690600401611920565b6001600160a01b03861693909184156102f15781156102f1578342116102e25760ff5f5160206120595f395f51905f525460a01c166102d45761024e936101a161023c6102479460405160208101906101af816101a1304686611a74565b03601f198101835282611b1c565b519020935f5160206120395f395f51905f52546040519160208301937ff7517e1dbb7a2bcbdd3b044779543ab804885b4fb56b565c74a42624613d36c885528c60408501526060840152608083015260a082015260a0815261021260c082611b1c565b519020604051928391602083019586909160429261190160f01b8352600283015260228201520190565b519020923691611b58565b9084611ddd565b156102c5576102886020926102837f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e695611b8e565b611bc3565b5f5160206120595f395f51905f52805460ff60a01b1916600160a01b1790555f5160206120395f395f51905f5280546001019055604051908152a1005b6305a562b960e21b5f5260045ffd5b62dc149f60e41b5f5260045ffd5b63df4cc36d60e01b5f5260045ffd5b63d92e233d60e01b5f5260045ffd5b346100f05760203660031901126100f05761032161031c611980565b611cc9565b6040518091602082016020835281518091526020604084019201905f5b81811061034c575050500390f35b825184528594506020938401939092019160010161033e565b346100f0575f3660031901126100f05760205f5160206120395f395f51905f5254604051908152f35b346100f05761039c36611996565b9160ff5f5160206120595f395f51905f529492945460a01c16156104cf576001600160a01b0382169384156102f1578142116102e25761024761047a926101a161045460405160208101906103f6816101a1304686611a74565b519020925f5160206120395f395f51905f52546040519060208201927f6a1c46775ec9faacdfae08d2e6b8cf1770e1393a85917d22d19ed8008dbdbdd884528c6040840152606083015260808201526080815261021260a082611b1c565b5190205f5160206120195f395f51905f52546001600160a01b0316959092369190611b58565b156102c55761048890611bc3565b60015f5160206120395f395f51905f5254015f5160206120395f395f51905f52557fa6dc18c8c5e355b30a0aef492f0482fc32e6f696187f1698952daf89d9e6004c5f80a3005b6321c4e35760e21b5f5260045ffd5b346100f0575f3660031901126100f0575f516020611fd95f395f51905f52545f516020611f995f395f51905f52545f516020611fb95f395f51905f52545f516020611ff95f395f51905f52545f5160206120595f395f51905f52545f5160206120195f395f51905f52546040805196875260208701959095526001600160a01b039384169486019490945260ff9182161515606086015260a081811c909216151560808601528216908401521660c082015260e090f35b346100f05760203660031901126100f0576105ae611980565b5f6105b95f92611c40565b9182549163ffffffff8360201c1692836105e5575b506060935060405192835260208301526040820152f35b63ffffffff91501692836101000193846101001191826106be578560ff8301116106be57600101919061010060ff82085f528260205260405f2054925f915f906101ff6102008201809a119101988911915b8881106106485750505050506105ce565b856106be57816106be57826106be5760ff610663828c611a67565b165f528360205260405f20546001811015806106b3575b610688575b50600101610637565b60ff600191161b60ff8187161661067f57600191989560ff6106ac92161795611cbb565b979061067f565b50600581111561067a565b634e487b7160e01b5f52601160045260245ffd5b346100f0575f3660031901126100f05760805f516020611fd95f395f51905f52545f516020611f995f395f51905f525460018060a01b035f516020611fb95f395f51905f52541660ff5f516020611ff95f395f51905f525416916040519384526020840152604083015215156060820152f35b346100f05760403660031901126100f0576004356001600160401b0381116100f0576107759036906004016119fc565b6024356001600160401b0381116100f0576107949036906004016119fc565b9260ff5f5160206120595f395f51905f525460a01c16156104cf5760ff5f516020611ff95f395f51905f525416610e6b578215610e5c57838303610e4d5760148311610e3e576107e383611c90565b936107f16040519586611b1c565b8385526107fd84611c90565b601f19013660208701375f925f5b8581106108b75750505050336001600160601b0360a01b5f516020611fb95f395f51905f525416175f516020611fb95f395f51905f525560405191825260208201527faf1a15763e6233a44eeef011dd57d5e002aa7c4edcf7294c496060628c9af2b260403392a26040518091602082016020835281518091526020604084019201905f5b81811061089e575050500390f35b8251845285945060209384019390920191600101610890565b6108c2818786611c30565b3583821015610e2a578160051b830135601e19843603018112156100f0576001600160401b0381850135116100f057808401353603602082860101136100f05781151580610e1f575b80610e13575b80610e04575b610926575b505060010161080b565b60015f516020611f995f395f51905f5297939297540190815f516020611f995f395f51905f52556109603682870135602084890101611b58565b80516020918201206040513360601b6bffffffffffffffffffffffff1916928101928352603481018b9052605481018290524660748201526094810194909452926109ae8160b481016101a1565b519020936040516109be81611b01565b63ffffffff8a168152602081016001600160401b0342168152604082013381526060830190600182526109fb368b60208980830135920101611b58565b9260808501938452895f527f5313a8921c51e28339007b8dd64d01c81939df477fa8a3440b1db2c6d658b29d60205263ffffffff8060405f209651161663ffffffff19865416178555519063ffffffff6bffffffffffffffff000000008654926001600160601b0319905160601b169360201b16911617178355600183019051151560ff80198354169116179055518051906001600160401b038211610df057610aa86002840154611bf8565b601f8111610dac575b50602090601f8311600114610d4157600292915f9183610d36575b50508160011b915f199060031b1c1916179101555b610aea33611c40565b63ffffffff60ff600182845416805f528185016020528d60405f205501161663ffffffff1982541617815563ffffffff815460201c16906101008210610d02575b50505f516020611fd95f395f51905f52549460018a03610bf75760208784018035810103126100f057600195610b6a6020610bca958a01013582611a47565b5f516020611fd95f395f51905f52555b5f516020611fd95f395f51905f525460405191825260208201527fbc7917920280b3fd9dbc7e92398cf96d915bfd40fff01b96f51556fbc16e3d5460403392a2610bc4858d611ca7565b52611cbb565b96337fbb1320003ed97c6e516381bd6eb18b8188b46f0420eabc00161c5dcdfde804265f80a4908861091c565b60028a03610c495760208784018035810103126100f057600195610bca9388016020013581811115610c3a57505f5b5f516020611fd95f395f51905f5255610b7a565b610c449082611a67565b610c26565b60038a03610c8d5760208784018035810103126100f0576001956064610c786020610bca968b01013583611a54565b045f516020611fd95f395f51905f5255610b7a565b600195610bca9360048c03610cb257505f5f516020611fd95f395f51905f5255610b7a565b60058c14610cc1575b50610b7a565b610ceb90610ce690610cdf908b018035810160209081019101611a2c565b9291611a47565b611a54565b871c5f516020611fd95f395f51905f52558d610cbb565b610d0e610d2f92611c78565b67ffffffff0000000082549160201b169067ffffffff000000001916179055565b8b80610b2b565b015190508f80610acc565b90600284015f52805f20915f5b601f1985168110610d945750918391600193600295601f19811610610d7c575b505050811b01910155610ae1565b01515f1960f88460031b161c191690558f8080610d6e565b91926020600181928685015181550194019201610d4e565b600284015f5260205f20601f840160051c810160208510610de9575b601f830160051c82018110610dde575050610ab1565b5f8155600101610dc8565b5080610dc8565b634e487b7160e01b5f52604160045260245ffd5b50610400818501351115610917565b50808401351515610911565b50600582111561090b565b634e487b7160e01b5f52603260045260245ffd5b63222d757960e01b5f5260045ffd5b631fec674760e31b5f5260045ffd5b63c2e5347d60e01b5f5260045ffd5b6313d0ff5960e31b5f5260045ffd5b346100f0575f3660031901126100f0576040805190610e998183611b1c565b600d82526c22bc30b6b83632a330b1b2ba2160991b6020830152805190610ec08183611b1c565b60058252640312e322e360dc1b6020830152610220918151610ee28482611b1c565b601081526020810193601f1901368537805115610e2a5763e9e831d760e01b8452805160011015610e2a576360ad2cf160e11b81840152805160021015610e2a57630e7d1d9360e01b6060820152805160031015610e2a576337184e9560e01b6080820152805160041015610e2a57635aa723df60e01b60a0820152805160051015610e2a5763279412c560e01b60c0820152805160061015610e2a5763e2ab79b160e01b60e0820152805160071015610e2a576331e8c19560e01b610100820152805160081015610e2a57637c300fd160e01b610120820152805160091015610e2a57631e39325960e11b6101408201528051600a1015610e2a57631519db2960e31b6101608201528051600b1015610e2a5763a83583e960e01b6101808201528051600c1015610e2a5763ea83977f60e01b6101a08201528051600d1015610e2a57630af7330960e01b6101c08201528051600e1015610e2a5763c66b4f2360e01b6101e08201528051600f1015610e2a5763289b3c0d60e01b610200820152825160608082529095869594936020939261109292611085918901906119d8565b90878203858901526119d8565b928584039086015251918281520191905f5b8181106110b2575050500390f35b82516001600160e01b0319168452859450602093840193909201916001016110a4565b346100f0576110e33661194d565b60ff5f5160206120595f395f51905f529392935460a01c16156104cf5760ff5f516020611ff95f395f51905f525416610e6b5781158015611440575b6114315780156114225761040081116114135760015f516020611f995f395f51905f525401805f516020611f995f395f51905f52556002611161368487611b58565b80516020918201206040513360601b6bffffffffffffffffffffffff191692810192835260348101879052605481018290524660748201526094810194909452926111af8160b481016101a1565b51902092604051906111c082611b01565b63ffffffff8616825260208201966001600160401b03421688526111f560408401913383526060850193600185523691611b58565b9760808401988952865f527f5313a8921c51e28339007b8dd64d01c81939df477fa8a3440b1db2c6d658b29d60205263ffffffff8060405f209551161663ffffffff19855416178455519063ffffffff6bffffffffffffffff000000008554926001600160601b0319905160601b169360201b16911617178255600182019051151560ff801983541691161790550193519384516001600160401b038111610df0576112a18254611bf8565b601f81116113ce575b50806020968790601f831160011461136c575f92611361575b50508160011b915f199060031b1c19161790555b6112e033611c40565b63ffffffff60ff600182845416805f5281850189528760405f205501161663ffffffff1982541617815563ffffffff8154861c1690610100821061134e575b505060405192337fbb1320003ed97c6e516381bd6eb18b8188b46f0420eabc00161c5dcdfde804265f80a48152f35b610d0e61135a92611c78565b848061131f565b0151905087806112c3565b5f8581528281209350601f198516905b8181106113b7575090846001959493921061139f575b505050811b0190556112d7565b01515f1960f88460031b161c19169055878080611392565b92938a60018192878601518155019501930161137c565b825f5260205f20601f830160051c81019160208410611409575b601f0160051c01905b8181106113fe57506112aa565b5f81556001016113f1565b90915081906113e8565b632a77a3f760e11b5f5260045ffd5b6399d8fec960e01b5f5260045ffd5b630ead561960e11b5f5260045ffd5b506005821161111f565b346100f05760203660031901126100f0576004356001600160401b0381116100f05761147a9036906004016119fc565b908115611422578035906001925b80841061149a57602083604051908152f35b90916001908482166114c7576114bc906114b5868587611c30565b3590611a47565b935b01929190611488565b6114df6064916114d8878688611c30565b3590611a54565b04936114be565b346100f0575f3660031901126100f0575f5160206120195f395f51905f52546040516001600160a01b039091168152602090f35b346100f05760203660031901126100f0576060608060405161153b81611b01565b5f81525f60208201525f60408201525f8382015201526004355f527f5313a8921c51e28339007b8dd64d01c81939df477fa8a3440b1db2c6d658b29d60205260405f2060405161158a81611b01565b81549163ffffffff8316825260208201926001600160401b038160201c168452604083019060601c8152600260ff600184015416926060850193151584520193604051945f908054906115dc82611bf8565b80895291600181169081156116a45750600114611660575b63ffffffff8761165c8a89896001600160401b038a611615858c0386611b1c565b6080870194855260405197889760208952511660208801525116604086015260018060a01b03905116606085015251151560808401525160a08084015260c08301906119d8565b0390f35b5f908152602081209092505b81831061168a57505085016020016001600160401b0361165c6115f4565b6001816020929493945483858c010152019101919061166c565b60ff19166020808b019190915292151560051b890190920192506001600160401b03915061165c90506115f4565b346100f0576116e036611996565b915f5160206120595f395f51905f52939193549260ff8460a01c16156104cf576001600160a01b0383169485156102f1578242116102e2576117c06117c6936101a161179a604051602081019061173c816101a1304686611a74565b519020925f5160206120395f395f51905f52546040519060208201927ff44a30e7d5745e7042f0e56be7b38c4760f55b29b0f5229d372262f95157237784528d6040840152606083015260808201526080815261021260a082611b1c565b5190205f5160206120195f395f51905f52546001600160a01b0316939092369190611b58565b91611ddd565b156102c5576117d490611b8e565b5f5160206120395f395f51905f52805460010190556001600160a01b03167f0cb95562c0c1c9ac9c0095cb0f9064ba3b004ddf6642f85044d2c2ce062eef4e5f80a3005b346100f0576118263661194d565b815f516020611fd95f395f51905f525493600181145f1461186b5750602091810103126100f05760409161185b913590611a47565b6161a85b82519182526020820152f35b9050600281036118ab575081602091810103126100f05735908082111561189a57505060405f5b61659061185f565b6040916118a691611a67565b611892565b9182600382959394145f146118e0575060209192810103126100f0576118d76064916040933590611a54565b04616d6061185f565b915050600481036118f95750505060405f6159d861185f565b60050361143157610ce6610cdf83611915936040950190611a2c565b60011c617d0061185f565b9181601f840112156100f0578235916001600160401b0383116100f057602083818601950101116100f057565b9060406003198301126100f05760043591602435906001600160401b0382116100f05761197c91600401611920565b9091565b600435906001600160a01b03821682036100f057565b60606003198201126100f0576004356001600160a01b03811681036100f0579160243591604435906001600160401b0382116100f05761197c91600401611920565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b9181601f840112156100f0578235916001600160401b0383116100f0576020808501948460051b0101116100f057565b908160609103126100f0578035916040602083013592013590565b919082018092116106be57565b818102929181159184041417156106be57565b919082039182116106be57565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81527f993d0ba592d4b01f590b9c8e5420547d5c0d90739d08703b0fb949ff7c1a246d60208201527fe374587661e69268352d25204d81b23ce801573f4b09f3545e69536dc085a37a604082015260608101919091526001600160a01b03909116608082015260a00190565b60a081019081106001600160401b03821117610df057604052565b90601f801991011681019081106001600160401b03821117610df057604052565b6001600160401b038111610df057601f01601f191660200190565b929192611b6482611b3d565b91611b726040519384611b1c565b8294818452818301116100f0578281602093845f960137010152565b60018060a01b03166001600160601b0360a01b5f5160206120595f395f51905f525416175f5160206120595f395f51905f5255565b60018060a01b03166001600160601b0360a01b5f5160206120195f395f51905f525416175f5160206120195f395f51905f5255565b90600182811c92168015611c26575b6020831014611c1257565b634e487b7160e01b5f52602260045260245ffd5b91607f1691611c07565b9190811015610e2a5760051b0190565b6001600160a01b03165f9081527f5313a8921c51e28339007b8dd64d01c81939df477fa8a3440b1db2c6d658b29e6020526040902090565b63ffffffff60019116019063ffffffff82116106be57565b6001600160401b038111610df05760051b60200190565b8051821015610e2a5760209160051b010190565b5f1981146106be5760010190565b611cd290611c40565b9081549163ffffffff8360201c1690611cea82611c90565b93611cf86040519586611b1c565b828552601f19611d0784611c90565b01366020870137848315611d8f575063ffffffff90929192169160015f91019083610100019384610100116101ff61020083018097119201958611925b858110611d545750505050505050565b816106be57826106be57836106be578060ff611d726001938a611a67565b165f528560205260405f2054611d88828c611ca7565b5201611d44565b9450505050565b801591508115611dd2575b50611dca578015611dc25761040010611dbb576001905f90565b5f90600390565b505f90600290565b505f90600190565b60059150115f611da1565b9190823b611e2c5790611def91611ed1565b506004811015611e1857159182611e0557505090565b6001600160a01b03918216911614919050565b634e487b7160e01b5f52602160045260245ffd5b915f926101a1611e6285946040519283916020830195630b135d3f60e11b875260248401526040604484015260648301906119d8565b51915afa3d15611eca573d611e7681611b3d565b90611e846040519283611b1c565b81523d5f602083013e5b81611ebc575b81611e9d575090565b90506020818051810103126100f05760200151630b135d3f60e11b1490565b905060208151101590611e94565b6060611e8e565b8151919060418303611f0157611efa9250602082015190606060408401519301515f1a90611f0b565b9192909190565b50505f9160029190565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411611f8d579160209360809260ff5f9560405194855216868401526040830152606082015282805260015afa15611f82575f516001600160a01b03811615611f7857905f905f90565b505f906001905f90565b6040513d5f823e3d90fd5b5050505f916003919056fe5313a8921c51e28339007b8dd64d01c81939df477fa8a3440b1db2c6d658b29b5313a8921c51e28339007b8dd64d01c81939df477fa8a3440b1db2c6d658b29c5313a8921c51e28339007b8dd64d01c81939df477fa8a3440b1db2c6d658b29a9b02e42a9b92e93607133334d133e31dc3f904c7156cf846526371c09ab4c5b25313a8921c51e28339007b8dd64d01c81939df477fa8a3440b1db2c6d658b2a15313a8921c51e28339007b8dd64d01c81939df477fa8a3440b1db2c6d658b2a05313a8921c51e28339007b8dd64d01c81939df477fa8a3440b1db2c6d658b29fa2646970667358221220f1fe4ee17ce8a26d29761f945a2bac0b1daf050bff66db64f729afdc52f5bfbd64736f6c634300081e0033";

type ExampleFacetBConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExampleFacetBConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExampleFacetB__factory extends ContractFactory {
  constructor(...args: ExampleFacetBConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ExampleFacetB & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ExampleFacetB__factory {
    return super.connect(runner) as ExampleFacetB__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExampleFacetBInterface {
    return new Interface(_abi) as ExampleFacetBInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ExampleFacetB {
    return new Contract(address, _abi, runner) as unknown as ExampleFacetB;
  }
}
