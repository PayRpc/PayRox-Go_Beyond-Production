/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ExampleFacetA,
  ExampleFacetAInterface,
} from "../../../contracts/facets/ExampleFacetA";

const _abi = [
  {
    inputs: [],
    name: "DataTooLarge",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyData",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyMessage",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidKey",
    type: "error",
  },
  {
    inputs: [],
    name: "TooManyMessages",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "messageCount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gasUsed",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "packedMetadata",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "BatchExecutedOptimized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "dataHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "setter",
        type: "address",
      },
    ],
    name: "DataStored",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "FacetAExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "msgHash",
        type: "bytes32",
      },
    ],
    name: "FacetAExecutedHash",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "messages",
        type: "string[]",
      },
    ],
    name: "batchExecute",
    outputs: [
      {
        internalType: "bool[]",
        name: "results",
        type: "bool[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
    ],
    name: "calculateHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "executeA",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "getData",
    outputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFacetInfo",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "bytes4[]",
        name: "selectors",
        type: "bytes4[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getUserCount",
    outputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastCaller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "data_",
        type: "bytes",
      },
    ],
    name: "storeData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalExecutions",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "expectedSigner",
        type: "address",
      },
    ],
    name: "verifySignature",
    outputs: [
      {
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601557610f36908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c806303e8837c14610b395780632113522a14610af257806324d824cb14610aaf57806331cd419914610a5257806354f6127f14610928578063642f7d5e146108ff5780637ab7b94b146107215780639730174d146104f7578063b5211ec4146103f65763bdb475b814610087575f80fd5b3461028c57602036600319011261028c576004356001600160401b03811161028c573660238201121561028c578060040135906001600160401b03821161028c576024810190602436918460051b01011161028c5781156103e757600a82116103d8576100f382610d31565b916101016040519384610bfa565b80835261010d81610d31565b602084019290601f190136843761012382610d31565b916101316040519384610bfa565b80835261013d81610d31565b602084019390601f19013685375a925f5b8381106102c557505061016033610d5c565b6040516315d8956f60e01b815260206004820152905160248201819052909384916044830191905f5b8181106102a3575050509080602092038173__$6853d4dd8c8d70faf0c6e9a986736f2751$__5af4928315610298575f93610260575b505a820391821161024c5760809085937fcdb4ed3e5ec53c14085bc1ef8a5b656bb1d3ced5855695a85d8e42820f9fef259360405192835260208301526040820152426060820152a1604051918291602083019060208452518091526040830191905f5b818110610231575050500390f35b82511515845285945060209384019390920191600101610223565b634e487b7160e01b5f52601160045260245ffd5b9092506020813d602011610290575b8161027c60209383610bfa565b8101031261028c5751915f6101bf565b5f80fd5b3d915061026f565b6040513d5f823e3d90fd5b82516001600160401b0316845287945060209384019390920191600101610189565b806102d66001928685999699610de3565b1590506103c7576001600160401b036102f0828786610de3565b9050166102fd8289610d48565b5261030733610bc2565b828154019055815f516020610ee15f395f51905f5254015f516020610ee15f395f51905f52555f61036d7f52230493755cb5cebbdbb65057f8ed8fca9e062e50f03f039b2e7a84d378afaf61035d848988610de3565b6040513394909283929083610dbc565b0390a361038561037e828786610de3565b3691610c1b565b60208151910120337f6ff2fae33162daee175ec7ec71a83661d5a0a19249ce40d3de3c4001c86c586b5f80a3816103bc828b610d48565b525b0194919461014e565b5f6103d2828b610d48565b526103be565b631ec0b2f760e01b5f5260045ffd5b63017636cb60e71b5f5260045ffd5b3461028c57602036600319011261028c576004356001600160401b03811161028c57610426903690600401610b71565b80156103e75761040081116104e8576020916104b39161044533610bc2565b6001815401905560015f516020610ee15f395f51905f5254015f516020610ee15f395f51905f525561047633610d5c565b5f6040517f52230493755cb5cebbdbb65057f8ed8fca9e062e50f03f039b2e7a84d378afaf3391806104a9868883610dbc565b0390a33691610c1b565b81815191012060405190337f6ff2fae33162daee175ec7ec71a83661d5a0a19249ce40d3de3c4001c86c586b5f80a360018152f35b632a77a3f760e11b5f5260045ffd5b3461028c57604036600319011261028c576004356024356001600160401b03811161028c5761052a903690600401610b71565b909180156107125781156107035761100082116104e8576040513360601b6bffffffffffffffffffffffff191660208201908152603482019290925261057d81605481015b03601f198101835282610bfa565b519020805f527fb81528f1544d013fd9906e7d298b2564a1a1cfd25df53ef606babf888d101a5e60205260405f20926001600160401b0383116106ef576105c48454610cf9565b601f81116106aa575b505f93601f841160011461064557836106049394955f9161063a575b508560011b905f198760031b1c19161790555b833691610c1b565b60208151910120906040519283527f9c127bb6a78710646dc639c8dce00540002bcffb57abdb1382c055c44ee7071460203394a4005b9050820135866105e9565b601f19841694815f5260205f20905f5b87811061069257508561060495969710610679575b5050600185811b0190556105fc565b8301355f19600388901b60f8161c19169055858061066a565b90916020600181928588013581550193019101610655565b845f5260205f20601f850160051c810191602086106106e5575b601f0160051c01905b8181106106da57506105cd565b5f81556001016106cd565b90915081906106c4565b634e487b7160e01b5f52604160045260245ffd5b6399d8fec960e01b5f5260045ffd5b630eda9c3d60e31b5f5260045ffd5b3461028c575f36600319011261028c5760408051906107408183610bfa565b600d82526c4578616d706c6546616365744160981b60208301528051906107678183610bfa565b60058252640312e312e360dc1b60208301526101609181516107898482610bfa565b600a81526020810193601f19013685378051156108eb57632d4847b160e21b84528051600110156108eb57639730174d60e01b818401528051600210156108eb576354f6127f60e01b60608201528051600310156108eb5762fa20df60e21b60808201528051600410156108eb576317b68eb760e31b60a08201528051600510156108eb576324d824cb60e01b60c08201528051600610156108eb576331cd419960e01b60e08201528051600710156108eb57633217beaf60e11b6101008201528051600810156108eb57631089a91560e11b6101208201528051600910156108eb57637ab7b94b60e01b61014082015282516060808252909586959493602093926108a89261089b91890190610b9e565b9087820385890152610b9e565b928584039086015251918281520191905f5b8181106108c8575050500390f35b82516001600160e01b0319168452859450602093840193909201916001016108ba565b634e487b7160e01b5f52603260045260245ffd5b3461028c575f36600319011261028c5760205f516020610ee15f395f51905f5254604051908152f35b3461028c57602036600319011261028c576040513360601b6bffffffffffffffffffffffff19166020820190815260043560348301529061096c816054810161056f565b5190205f527fb81528f1544d013fd9906e7d298b2564a1a1cfd25df53ef606babf888d101a5e60205260405f20604051905f908054906109ab82610cf9565b8085529160018116908115610a2b57506001146109eb575b6109e7846109d381860382610bfa565b604051918291602083526020830190610b9e565b0390f35b5f90815260208120939250905b808210610a11575090915081016020016109d3826109c3565b9192600181602092548385880101520191019092916109f8565b60ff191660208087019190915292151560051b850190920192506109d391508390506109c3565b3461028c57606036600319011261028c576024356001600160401b03811161028c57610a82903690600401610b71565b906044356001600160a01b038116810361028c57602092610aa592600435610c60565b6040519015158152f35b3461028c57602036600319011261028c576004356001600160401b03811161028c57610ae461037e6020923690600401610b71565b818151910120604051908152f35b3461028c575f36600319011261028c577fb81528f1544d013fd9906e7d298b2564a1a1cfd25df53ef606babf888d101a61546040516001600160a01b039091168152602090f35b3461028c57602036600319011261028c576004356001600160a01b038116810361028c57610b68602091610bc2565b54604051908152f35b9181601f8401121561028c578235916001600160401b03831161028c576020838186019501011161028c57565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b6001600160a01b03165f9081527fb81528f1544d013fd9906e7d298b2564a1a1cfd25df53ef606babf888d101a5f6020526040902090565b90601f801991011681019081106001600160401b038211176106ef57604052565b9291926001600160401b0382116106ef5760405191610c44601f8201601f191660200184610bfa565b82948184528183011161028c578281602093845f960137010152565b6001600160a01b03909316929091908315610cf157610cb592610caf917f19457468657265756d205369676e6564204d6573736167653a0a3332000000005f52601c52603c5f20923691610c1b565b90610e24565b506004819392931015610cdd57159182610cce57505090565b6001600160a01b031614919050565b634e487b7160e01b5f52602160045260245ffd5b505050505f90565b90600182811c92168015610d27575b6020831014610d1357565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610d08565b6001600160401b0381116106ef5760051b60200190565b80518210156108eb5760209160051b010190565b60018060a01b03166bffffffffffffffffffffffff60a01b7fb81528f1544d013fd9906e7d298b2564a1a1cfd25df53ef606babf888d101a615416177fb81528f1544d013fd9906e7d298b2564a1a1cfd25df53ef606babf888d101a6155565b90918060409360208452816020850152848401375f828201840152601f01601f1916010190565b91908110156108eb5760051b81013590601e198136030182121561028c5701908135916001600160401b03831161028c57602001823603811361028c579190565b8151919060418303610e5457610e4d9250602082015190606060408401519301515f1a90610e5e565b9192909190565b50505f9160029190565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411610ed5579160209360809260ff5f9560405194855216868401526040830152606082015282805260015afa15610298575f516001600160a01b03811615610ecb57905f905f90565b505f906001905f90565b5050505f916003919056feb81528f1544d013fd9906e7d298b2564a1a1cfd25df53ef606babf888d101a60a2646970667358221220c7c167d67724e7c1efd1a9bbc4556fc149b3f92bd5c34d98095e3dbab0e004f464736f6c634300081e0033";

type ExampleFacetAConstructorParams =
  | [linkLibraryAddresses: ExampleFacetALibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExampleFacetAConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class ExampleFacetA__factory extends ContractFactory {
  constructor(...args: ExampleFacetAConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        ExampleFacetA__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: ExampleFacetALibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$6853d4dd8c8d70faf0c6e9a986736f2751\\$__", "g"),
      linkLibraryAddresses[
        "contracts/utils/GasOptimizationUtils.sol:GasOptimizationUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ExampleFacetA & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ExampleFacetA__factory {
    return super.connect(runner) as ExampleFacetA__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExampleFacetAInterface {
    return new Interface(_abi) as ExampleFacetAInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ExampleFacetA {
    return new Contract(address, _abi, runner) as unknown as ExampleFacetA;
  }
}

export interface ExampleFacetALibraryAddresses {
  ["contracts/utils/GasOptimizationUtils.sol:GasOptimizationUtils"]: string;
}
