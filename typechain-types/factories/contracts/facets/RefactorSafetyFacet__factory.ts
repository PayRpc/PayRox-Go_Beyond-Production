/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  RefactorSafetyFacet,
  RefactorSafetyFacetInterface,
} from "../../../contracts/facets/RefactorSafetyFacet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "codeHash",
        type: "bytes32",
      },
    ],
    name: "RefactorSafetyInitialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "checkId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "string",
        name: "checkType",
        type: "string",
      },
    ],
    name: "RefactorValidationPassed",
    type: "event",
  },
  {
    inputs: [],
    name: "emergencyRefactorValidation",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRefactorSafetyVersion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523460135760d5908160188239f35b5f80fdfe60808060405260043610156011575f80fd5b5f3560e01c908163c34c492f146088575063e623a87c14602f575f80fd5b346084575f3660031901126084576040513060601b6020820152601481526040810190811067ffffffffffffffff8211176070578060209160405260018152f35b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b346084575f36600319011260845780600160209252f3fea26469706673582212207b1640fe71f2bb75f870a7520d29f155176b662ec2a2db5f636a1d05d1376aac64736f6c634300081e0033";

type RefactorSafetyFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RefactorSafetyFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RefactorSafetyFacet__factory extends ContractFactory {
  constructor(...args: RefactorSafetyFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      RefactorSafetyFacet & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): RefactorSafetyFacet__factory {
    return super.connect(runner) as RefactorSafetyFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RefactorSafetyFacetInterface {
    return new Interface(_abi) as RefactorSafetyFacetInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RefactorSafetyFacet {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as RefactorSafetyFacet;
  }
}
