/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DiamondWithEpoch,
  DiamondWithEpochInterface,
} from "../../../contracts/test/DiamondWithEpoch";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_dispatcher",
        type: "address",
      },
      {
        internalType: "address",
        name: "_epochManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint64",
        name: "epoch",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        indexed: false,
        internalType: "address",
        name: "oldFacet",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newFacet",
        type: "address",
      },
    ],
    name: "CommitmentOverwritten",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_EPOCH_JUMP",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
      {
        internalType: "bytes4[]",
        name: "selectors",
        type: "bytes4[]",
      },
      {
        internalType: "uint64",
        name: "epoch",
        type: "uint64",
      },
    ],
    name: "commitFacetUpdate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "commitmentHistory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    name: "commitments",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dispatcher",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "emergencyEpochReset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "emergencyPause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "epochManager",
    outputs: [
      {
        internalType: "contract EpochManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_functionSelector",
        type: "bytes4",
      },
    ],
    name: "facetAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facetAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_facet",
        type: "address",
      },
    ],
    name: "facetFunctionSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facets",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondLoupe.Facet[]",
        name: "facets_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "epoch",
        type: "uint64",
      },
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "getCommitmentHistory",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
        ],
        internalType: "struct DiamondWithEpoch.CommitmentEntry[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "epoch",
        type: "uint64",
      },
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "getEpochCommitment",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
        ],
        internalType: "struct DiamondWithEpoch.Commitment",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "getRoutingHistory",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "epoch",
            type: "uint64",
          },
        ],
        internalType: "struct DiamondWithEpoch.RoutingHistoryEntry[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "newEpoch",
        type: "uint64",
      },
    ],
    name: "onEpochAdvanced",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "validateEpochConsistency",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610164575f906040816115fa80380380916100218285610168565b8339810103126101645761004060206100398361019f565b920161019f565b5f80546001600160a01b039384166001600160a01b03199182161790915560018054929093169116811790915590813b15610164575f8092602460405180958193633ac63e6160e01b83523060048401525af1610151575b600154604051635cbeecf160e11b81529250602090839060049082906001600160a01b03165afa9182156101445781926100f7575b600c80546001600160401b0319166001600160401b03851617905560405161144690816101b48239f35b9091506020813d60201161013c575b8161011360209383610168565b810103126101385751906001600160401b038216820361013557505f806100cd565b80fd5b5080fd5b3d9150610106565b50604051903d90823e3d90fd5b505f61015c91610168565b60045f610098565b5f80fd5b601f909101601f19168101906001600160401b0382119082101761018b57604052565b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b03821682036101645756fe6080806040526004361015610012575f80fd5b5f3560e01c908163096f5be214610ee2575080631f5ffa2814610e6857806331049bbe14610ce0578063415840ac14610c6857806351858e2714610c4957806352ef6b2c14610b815780635c975abb14610b5f5780636654984b14610b295780637a0ed627146109a05780637e4c9bcc146105df5780639658b5ea1461051f578063adfca15e146104cf578063ca3570c8146103d0578063cb7e9057146103a9578063cdffacc614610368578063d10dbb8b1461016a578063e118db6a1461010e5763e2d2bfe3146100e2575f80fd5b3461010a575f36600319011261010a576001546040516001600160a01b039091168152602090f35b5f80fd5b3461010a57604036600319011261010a57610127610efb565b6001600160401b03610137610f11565b91165f52600260205260405f209063ffffffff60e01b165f52602052602060018060a01b0360405f205416604051908152f35b3461010a575f36600319011261010a575f546001600160a01b0316330361032457600154604051635cbeecf160e11b815290602090829060049082906001600160a01b03165afa908115610319576001600160401b03916101d2915f916102ea575b506113c8565b16805f52600460205260405f205f5b815481101561029857806101f760019284611029565b90549060031b1c60e01b845f52600260205260405f209063ffffffff60e01b1690815f5260205260405f206bffffffffffffffffffffffff60a01b8154169055845f52600360205260405f20815f5260205260405f2080545f82558061027e575b5050845f52600560205260405f20905f5260205260405f2060ff198154169055016101e1565b610291915f5260205f20908101906113fa565b8580610258565b82805f52600460205260405f2080545f8255806102ca575b5f838152600660205260409020805460ff19166001179055005b6102e3915f52600760205f20910160031c8101906113fa565b81806102b0565b61030c915060203d602011610312575b6103048183610fdd565b8101906113a9565b836101cc565b503d6102fa565b6040513d5f823e3d90fd5b606460405162461bcd60e51b815260206004820152602060248201527f4f6e6c7920646973706174636865722063616e2072657365742065706f6368736044820152fd5b3461010a57602036600319011261010a576001600160e01b031961038a610f28565b165f526007602052602060018060a01b0360405f205416604051908152f35b3461010a575f36600319011261010a575f546040516001600160a01b039091168152602090f35b3461010a57602036600319011261010a576001600160e01b03196103f2610f28565b165f52600b60205260405f2080549061040a82610ffe565b916104186040519384610fdd565b8083526020830180925f5260205f205f915b838310610493578486604051918291602083019060208452518091526040830191905f5b81811061045c575050500390f35b825180516001600160a01b031685526020908101516001600160401b0316818601528695506040909401939092019160010161044e565b6001602081926040516104a581610fc2565b6001600160401b038654858060a01b038116835260a01c168382015281520192019201919061042a565b3461010a57602036600319011261010a576001600160a01b036104f0610f91565b165f52600860205261051b61050760405f206111a5565b604051918291602083526020830190610f54565b0390f35b3461010a575f36600319011261010a57600154604051635cbeecf160e11b815290602090829060049082906001600160a01b03165afa908115610319575f916105c0575b506001600160401b0380600c541691160361058357602060405160018152f35b60405162461bcd60e51b8152602060048201526015602482015274115c1bd8da0819195cde5b98c819195d1958dd1959605a1b6044820152606490fd5b6105d9915060203d602011610312576103048183610fdd565b81610563565b3461010a57606036600319011261010a576105f8610f91565b602435906001600160401b03821161010a573660238301121561010a57816004013561062381610ffe565b926106316040519485610fdd565b8184526024602085019260051b8201019036821161010a57602401915b81831061097f575050506044356001600160401b03811680910361010a5760ff600a541661094a57600154604051635cbeecf160e11b815290602090829060049082906001600160a01b03165afa908115610319575f9161092b575b506001600160401b0381168211156108e6576106cd6001600160401b03916113c8565b1681116108a1576001600160a01b039091169082905f5b825181101561089f576106f78184611015565b519063ffffffff60e01b8216835f52600260205260405f20815f526020528360018060a01b0360405f20541680151580610895575b610857575b505f52600260205260405f20815f5260205260405f20866bffffffffffffffffffffffff60a01b825416179055835f52600360205260405f20815f5260205260405f208054600160401b8110156108435761079191600182018155610f3f565b81549060031b9088821b9160018060a01b03901b1916179055835f52600560205260405f20815f5260205260ff60405f205416156107d5575b5060019150016106e4565b835f52600560205260405f20905f5260205260405f20600160ff19825416179055825f52600460205260405f2091825492600160401b84101561084357836108239160018096018155611029565b63ffffffff829392549160031b9260e01c831b921b1916179055856107ca565b634e487b7160e01b5f52604160045260245ffd5b60607fa828cfb7b6379a42b0ed6e43fb48d0edfb584237a8cbc1ceea7a69bce7ace5e391604051908582526020820152896040820152a28387610731565b508781141561072c565b005b60405162461bcd60e51b815260206004820152601760248201527f45706f636820746f6f2066617220696e206675747572650000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601d60248201527f43616e206f6e6c7920636f6d6d697420746f206e6578742065706f63680000006044820152606490fd5b610944915060203d602011610312576103048183610fdd565b846106aa565b60405162461bcd60e51b815260206004820152600d60248201526c14de5cdd195b481c185d5cd959609a1b6044820152606490fd5b82356001600160e01b03198116810361010a5781526020928301920161064e565b3461010a575f36600319011261010a576009546109bc81610ffe565b906109ca6040519283610fdd565b808252601f196109d982610ffe565b015f5b818110610b055750506009545f5b828110610a7057836040518091602082016020835281518091526040830190602060408260051b8601019301915f905b828210610a2957505050500390f35b91936001919395506020610a608192603f198a82030186526040838a51878060a01b03815116845201519181858201520190610f54565b9601920192018594939192610a1a565b81811015610af1577f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af8101546001600160a01b03165f81815260086020526040908190209051600193929091610ad091610ac984610fc2565b83526111a5565b6020820152610adf8287611015565b52610aea8186611015565b50016109ea565b634e487b7160e01b5f52603260045260245ffd5b602090604051610b1481610fc2565b5f8152606083820152828287010152016109dc565b3461010a57604036600319011261010a57610b42610efb565b506024356001600160401b038116810361010a5761089f9061104a565b3461010a575f36600319011261010a57602060ff600a54166040519015158152f35b3461010a575f36600319011261010a576040518060206009549283815201809260095f527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af905f5b818110610c2a5750505081610bdf910382610fdd565b604051918291602083019060208452518091526040830191905f5b818110610c08575050500390f35b82516001600160a01b0316845285945060209384019390920191600101610bfa565b82546001600160a01b0316845260209093019260019283019201610bc9565b3461010a575f36600319011261010a57600a805460ff19166001179055005b3461010a57604036600319011261010a57610c81610efb565b6001600160401b03610c91610f11565b915f604051610c9f81610fa7565b52165f52600260205260405f209063ffffffff60e01b165f52602052602060018060a01b0360405f20541680604051610cd781610fa7565b52604051908152f35b3461010a57604036600319011261010a57610cf9610efb565b6001600160401b03610d09610f11565b91165f52600360205260405f209063ffffffff60e01b165f5260205260405f20604051808260208294549384815201905f5260205f20925f5b818110610e46575050610d5792500382610fdd565b805190610d6382610ffe565b91610d716040519384610fdd565b808352610d80601f1991610ffe565b015f5b818110610e285750505f5b8151811015610dd9576001906001600160a01b03610dac8285611015565b511660405190610dbb82610fa7565b8152610dc78286611015565b52610dd28185611015565b5001610d8e565b826040518091602082016020835281518091526020604084019201905f5b818110610e05575050500390f35b8251516001600160a01b0316845285945060209384019390920191600101610df7565b602090604051610e3781610fa7565b5f815282828701015201610d83565b84546001600160a01b0316835260019485019486945060209093019201610d42565b3461010a57606036600319011261010a57610e81610efb565b610e89610f11565b6001600160401b0360443592165f52600360205260405f209063ffffffff60e01b165f5260205260405f20805482101561010a57602091610ec991610f3f565b905460405160039290921b1c6001600160a01b03168152f35b3461010a575f36600319011261010a5780606460209252f35b600435906001600160401b038216820361010a57565b602435906001600160e01b03198216820361010a57565b600435906001600160e01b03198216820361010a57565b8054821015610af1575f5260205f2001905f90565b90602080835192838152019201905f5b818110610f715750505090565b82516001600160e01b031916845260209384019390920191600101610f64565b600435906001600160a01b038216820361010a57565b602081019081106001600160401b0382111761084357604052565b604081019081106001600160401b0382111761084357604052565b90601f801991011681019081106001600160401b0382111761084357604052565b6001600160401b0381116108435760051b60200190565b8051821015610af15760209160051b010190565b9190918054831015610af1575f52601c60205f208360031c019260021b1690565b6001546001600160a01b031633036111a2576001600160401b031690815f52600660205260ff60405f20541661119e57815f52600460205260405f205f5b81548110156111885761109b8183611029565b90545f86815260026020908152604080832060039590951b9390931c60e01b6001600160e01b0319168252928352818120546007845282822080546001600160a01b039092166001600160a01b031990921682179055600b9093528190209051929161110684610fc2565b835260208301908682528054600160401b8110156108435761112d91600182018155610f3f565b919091611175579251815493516001600160e01b03199094166001600160a01b03919091161760a09390931b67ffffffffffffffff60a01b1692909217909155600101611088565b634e487b7160e01b5f525f60045260245ffd5b5050906001600160401b0319600c541617600c55565b9050565b50565b90604051918281549182825260208201905f5260205f20925f905b806007830110611304576112169454918181106112e5575b8181106112c6575b8181106112a7575b818110611288575b818110611269575b81811061124a575b81811061122d575b10611218575b500383610fdd565b565b6001600160e01b03191681526020015f61120e565b602083811b6001600160e01b031916855290930192600101611208565b604083901b6001600160e01b0319168452602090930192600101611200565b606083901b6001600160e01b03191684526020909301926001016111f8565b608083901b6001600160e01b03191684526020909301926001016111f0565b60a083901b6001600160e01b03191684526020909301926001016111e8565b60c083901b6001600160e01b03191684526020909301926001016111e0565b60e083901b6001600160e01b03191684526020909301926001016111d8565b916008919350610100600191865463ffffffff60e01b8160e01b16825263ffffffff60e01b8160c01b16602083015263ffffffff60e01b8160a01b16604083015263ffffffff60e01b8160801b16606083015263ffffffff60e01b8160601b16608083015263ffffffff60e01b8160401b1660a083015263ffffffff60e01b8160201b1660c083015263ffffffff60e01b1660e08201520194019201859293916111c0565b9081602091031261010a57516001600160401b038116810361010a5790565b6001600160401b036001911601906001600160401b0382116113e657565b634e487b7160e01b5f52601160045260245ffd5b818110611405575050565b5f81556001016113fa56fea26469706673582212200b515d4caada95b21283d30a1f8ff4f721c710916724274a04310d75c64b3f5264736f6c634300081e0033";

type DiamondWithEpochConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondWithEpochConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondWithEpoch__factory extends ContractFactory {
  constructor(...args: DiamondWithEpochConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _dispatcher: AddressLike,
    _epochManager: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _dispatcher,
      _epochManager,
      overrides || {}
    );
  }
  override deploy(
    _dispatcher: AddressLike,
    _epochManager: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_dispatcher, _epochManager, overrides || {}) as Promise<
      DiamondWithEpoch & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DiamondWithEpoch__factory {
    return super.connect(runner) as DiamondWithEpoch__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondWithEpochInterface {
    return new Interface(_abi) as DiamondWithEpochInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DiamondWithEpoch {
    return new Contract(address, _abi, runner) as unknown as DiamondWithEpoch;
  }
}
