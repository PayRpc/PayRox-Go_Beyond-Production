/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Diamond,
  DiamondInterface,
} from "../../../contracts/test/Diamond";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_facet",
        type: "address",
      },
      {
        internalType: "bytes4[]",
        name: "_selectors",
        type: "bytes4[]",
      },
    ],
    name: "addFacet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_functionSelector",
        type: "bytes4",
      },
    ],
    name: "facetAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facetAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_facet",
        type: "address",
      },
    ],
    name: "facetFunctionSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facets",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondLoupe.Facet[]",
        name: "facets_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608034606f57601f610a3d38819003918201601f19168301916001600160401b03831184841017607357808492602094604052833981010312606f57516001600160a01b03811690819003606f575f80546001600160a01b0319169190911790556040516109b590816100888239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f3560e01c90816301ffc9a71461064f5750806352ef6b2c146105875780635547dad6146102e15780637a0ed6271461015a5780638da5cb5b14610133578063adfca15e146100b05763cdffacc614610069575f80fd5b346100ac5760203660031901126100ac5760043563ffffffff60e01b81168091036100ac575f526001602052602060018060a01b0360405f205416604051908152f35b5f80fd5b346100ac5760203660031901126100ac576001600160a01b036100d1610686565b165f5260026020526100e560405f20610767565b6040518091602082016020835281518091526020604084019201905f5b818110610110575050500390f35b82516001600160e01b031916845285945060209384019390920191600101610102565b346100ac575f3660031901126100ac575f546040516001600160a01b039091168152602090f35b346100ac575f3660031901126100ac576003546101768161074f565b9061018460405192836106ec565b808252601f196101938261074f565b015f5b8181106102bd5750505f5b81811061025f57826040518091602082016020835281518091526040830190602060408260051b8601019301915f905b8282106101e057505050500390f35b919390929450603f1986820301825284516020606081604085019360018060a01b0381511686520151936040838201528451809452019201905f905b80821061023c5750505060208060019296019201920185949391926101d1565b82516001600160e01b03191684526020938401939092019160019091019061021c565b8061026b60019261070e565b838060a01b0391549060031b1c16805f52600260205261029c60405f2060405192610295846106d0565b8352610767565b60208201526102ab828661096b565b526102b6818561096b565b50016101a1565b6020906040516102cc816106d0565b5f815260608382015282828701015201610196565b346100ac5760403660031901126100ac576102fa610686565b6024359067ffffffffffffffff82116100ac57366023830112156100ac5781600401359067ffffffffffffffff82116100ac573660248360051b850101116100ac576003546001600160a01b03909116905f805b828110610554575b5015610516575b50805f52600260205260405f20600160401b83116105025780548382558084106104a8575b5060248401905f5260205f208360031c905f5b82811061045657506007198516850380610400575b505050505f5b828110156103fe576001906001600160e01b03196103d6600583901b870160240161073a565b165f528160205260405f20836bffffffffffffffffffffffff60a01b825416179055016103b0565b005b925f935f5b81811061041a575050500155838080806103aa565b909194602061044c60019261042e8961073a565b60e01c908560021b63ffffffff809160031b9316831b921b19161790565b9601929101610405565b5f5f5b6008811061046e575082820155600101610395565b9490602061049f6001926104818561073a565b60e01c908960021b63ffffffff809160031b9316831b921b19161790565b92019501610459565b815f5260205f20600780860160031c8201920160031c0190601c8560021b16806104e7575b505b8181106104dc5750610382565b5f81556001016104cf565b5f198201908154905f199060200360031b1c169055866104cd565b634e487b7160e01b5f52604160045260245ffd5b600160401b81101561050257806001610532920160035561070e565b81546001600160a01b0360039290921b91821b19169083901b1790558361035d565b8361055e8261070e565b905460039190911b1c6001600160a01b03161461057d5760010161034e565b5050600185610356565b346100ac575f3660031901126100ac576040518060206003549283815201809260035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b905f5b81811061063057505050816105e59103826106ec565b604051918291602083019060208452518091526040830191905f5b81811061060e575050500390f35b82516001600160a01b0316845285945060209384019390920191600101610600565b82546001600160a01b03168452602090930192600192830192016105cf565b346100ac5760203660031901126100ac57600435906001600160e01b0319821682036100ac5761068060209261069c565b15158152f35b600435906001600160a01b03821682036100ac57565b6001600160e01b0319166301ffc9a760e01b81146106ca576348e2b09360e01b146106c5575f90565b600190565b50600190565b6040810190811067ffffffffffffffff82111761050257604052565b90601f8019910116810190811067ffffffffffffffff82111761050257604052565b6003548110156107265760035f5260205f2001905f90565b634e487b7160e01b5f52603260045260245ffd5b356001600160e01b0319811681036100ac5790565b67ffffffffffffffff81116105025760051b60200190565b90604051918281549182825260208201905f5260205f20925f905b8060078301106108c6576107d89454918181106108a7575b818110610888575b818110610869575b81811061084a575b81811061082b575b81811061080c575b8181106107ef575b106107da575b5003836106ec565b565b6001600160e01b03191681526020015f6107d0565b602083811b6001600160e01b0319168552909301926001016107ca565b604083901b6001600160e01b03191684526020909301926001016107c2565b606083901b6001600160e01b03191684526020909301926001016107ba565b608083901b6001600160e01b03191684526020909301926001016107b2565b60a083901b6001600160e01b03191684526020909301926001016107aa565b60c083901b6001600160e01b03191684526020909301926001016107a2565b60e083901b6001600160e01b031916845260209093019260010161079a565b916008919350610100600191865463ffffffff60e01b8160e01b16825263ffffffff60e01b8160c01b16602083015263ffffffff60e01b8160a01b16604083015263ffffffff60e01b8160801b16606083015263ffffffff60e01b8160601b16608083015263ffffffff60e01b8160401b1660a083015263ffffffff60e01b8160201b1660c083015263ffffffff60e01b1660e0820152019401920185929391610782565b80518210156107265760209160051b01019056fea26469706673582212202059042647f5a38e0f462fa446530ef43c4167e2150c034b1005fa3bef94a81864736f6c634300081e0033";

type DiamondConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Diamond__factory extends ContractFactory {
  constructor(...args: DiamondConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_owner, overrides || {});
  }
  override deploy(
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_owner, overrides || {}) as Promise<
      Diamond & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Diamond__factory {
    return super.connect(runner) as Diamond__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondInterface {
    return new Interface(_abi) as DiamondInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Diamond {
    return new Contract(address, _abi, runner) as unknown as Diamond;
  }
}
