/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { FacetB, FacetBInterface } from "../../../contracts/test/FacetB";

const _abi = [
  {
    inputs: [],
    name: "fooB",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346013576074908160188239f35b5f80fdfe60808060405260043610156011575f80fd5b5f3560e01c630bfc516b146023575f80fd5b34603a575f366003190112603a5780600260209252f35b5f80fdfea2646970667358221220fa2b57e3ab13cfffae753404e7bf8e02f7da8334a2236056325325768fa9f30864736f6c634300081e0033";

type FacetBConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FacetBConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FacetB__factory extends ContractFactory {
  constructor(...args: FacetBConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      FacetB & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FacetB__factory {
    return super.connect(runner) as FacetB__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FacetBInterface {
    return new Interface(_abi) as FacetBInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): FacetB {
    return new Contract(address, _abi, runner) as unknown as FacetB;
  }
}
