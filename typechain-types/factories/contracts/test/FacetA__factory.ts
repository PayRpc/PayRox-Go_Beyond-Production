/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { FacetA, FacetAInterface } from "../../../contracts/test/FacetA";

const _abi = [
  {
    inputs: [],
    name: "fooA",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346013576074908160188239f35b5f80fdfe60808060405260043610156011575f80fd5b5f3560e01c6374322ad9146023575f80fd5b34603a575f366003190112603a5780600160209252f35b5f80fdfea2646970667358221220e46f2ca62ba7f5f1751885dbd5b29083d73ebef9ac159fa49e7075d5f56a4df664736f6c634300081e0033";

type FacetAConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FacetAConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FacetA__factory extends ContractFactory {
  constructor(...args: FacetAConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      FacetA & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FacetA__factory {
    return super.connect(runner) as FacetA__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FacetAInterface {
    return new Interface(_abi) as FacetAInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): FacetA {
    return new Contract(address, _abi, runner) as unknown as FacetA;
  }
}
