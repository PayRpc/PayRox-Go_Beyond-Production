name: Cross-Network Registry

on:
  push:
    branches: [ main, 'develop', 'release/**' ]
    paths:
      - 'contracts/**'
      - 'scripts/generate-cross-network-registry.ts'
      - 'scripts/verify-manifest.js'
      - 'hardhat.config.ts'
      - 'package*.json'
  pull_request:
    branches: [ main, 'develop' ]
    paths:
      - 'contracts/**'
      - 'scripts/generate-cross-network-registry.ts'
      - 'scripts/verify-manifest.js'
      - 'hardhat.config.ts'
      - 'package*.json'
  workflow_dispatch:
    inputs:
      allow_fallback:
        description: 'Allow fallback artifact usage (for debugging)'
        required: false
        default: false
        type: boolean
      target_networks:
        description: 'Target networks (comma-separated, e.g., mainnet,polygon,arbitrum)'
        required: false
        default: 'all'
        type: string
      force_rebuild:
        description: 'Force rebuild even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  NODE_OPTIONS: '--max_old_space_size=4096'
  FORCE_COLOR: 1

jobs:
  detect-changes:
    name: detect-changes
    runs-on: ubuntu-latest
    outputs:
      contracts-changed: ${{ steps.changes.outputs.contracts }}
      scripts-changed: ${{ steps.changes.outputs.scripts }}
      config-changed: ${{ steps.changes.outputs.config }}
      should-run: ${{ steps.decision.outputs.should-run }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for relevant changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            contracts:
              - 'contracts/**/*.sol'
            scripts:
              - 'scripts/generate-cross-network-registry.ts'
              - 'scripts/verify-manifest.js'
            config:
              - 'hardhat.config.ts'
              - 'package*.json'

      - name: Decide if workflow should run
        id: decision
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.force_rebuild }}" == "true" ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "🔄 Force rebuild requested"
          elif [[ "${{ steps.changes.outputs.contracts }}" == "true" || "${{ steps.changes.outputs.scripts }}" == "true" || "${{ steps.changes.outputs.config }}" == "true" ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "📝 Relevant changes detected"
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
            echo "⏭️ No relevant changes detected, skipping"
          fi

  generate:
    name: generate-manifest
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should-run == 'true'
    timeout-minutes: 15
    outputs:
      manifest-hash: ${{ steps.hash.outputs.manifest-hash }}
      registry-hash: ${{ steps.hash.outputs.registry-hash }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Need full history for proper version detection
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          echo "📦 Dependencies installed"

      - name: Cache Hardhat artifacts
        uses: actions/cache@v4
        with:
          path: |
            cache
            artifacts
          key: hardhat-${{ runner.os }}-${{ hashFiles('contracts/**/*.sol', 'hardhat.config.ts') }}
          restore-keys: |
            hardhat-${{ runner.os }}-

      - name: Compile contracts
        run: |
          echo "🔨 Compiling contracts..."
          npx hardhat compile --show-stack-traces --force
          echo "✅ Compilation successful"

      - name: Validate compilation artifacts
        run: |
          if [ ! -d "artifacts" ] || [ -z "$(find artifacts -name '*.json' 2>/dev/null)" ]; then
            echo "❌ No compilation artifacts found"
            exit 1
          fi
          echo "✅ Compilation artifacts validated"

      - name: Generate cross-network registry
        env:
          PRX_VERSION: ${{ github.event.pull_request.head.ref || github.ref_name || 'ci' }}
          ALLOW_FALLBACK: ${{ inputs.allow_fallback || 'false' }}
          TARGET_NETWORKS: ${{ inputs.target_networks || 'all' }}
          CI: 'true'
        run: |
          echo "🌐 Generating cross-network registry..."
          echo "Version: $PRX_VERSION"
          echo "Allow fallback: $ALLOW_FALLBACK"
          echo "Target networks: $TARGET_NETWORKS"
          
          npx hardhat run scripts/generate-cross-network-registry.ts --network hardhat
          
          if [ $? -eq 0 ]; then
            echo "✅ Registry generation successful"
          else
            echo "❌ Registry generation failed"
            exit 1
          fi

      - name: Verify generated manifests
        run: |
          echo "🔍 Verifying generated manifests..."
          
          # Check if files exist
          for file in cross-network-address-registry.json manifests/cross-network-registry.json; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            fi
            echo "✅ Found: $file"
          done
          
          # Run verification script
          node scripts/verify-manifest.js
          
          if [ $? -eq 0 ]; then
            echo "✅ Manifest verification successful"
          else
            echo "❌ Manifest verification failed"
            exit 1
          fi

      - name: Generate file hashes
        id: hash
        run: |
          MANIFEST_HASH=$(sha256sum manifests/cross-network-registry.json | cut -d' ' -f1)
          REGISTRY_HASH=$(sha256sum cross-network-address-registry.json | cut -d' ' -f1)
          
          echo "manifest-hash=$MANIFEST_HASH" >> $GITHUB_OUTPUT
          echo "registry-hash=$REGISTRY_HASH" >> $GITHUB_OUTPUT
          
          echo "📋 Generated file hashes:"
          echo "Manifest: $MANIFEST_HASH"
          echo "Registry: $REGISTRY_HASH"

      - name: Validate JSON structure
        run: |
          echo "🔍 Validating JSON structure..."
          
          # Validate JSON syntax
          for file in cross-network-address-registry.json manifests/cross-network-registry.json; do
            if jq empty "$file" 2>/dev/null; then
              echo "✅ Valid JSON: $file"
            else
              echo "❌ Invalid JSON: $file"
              exit 1
            fi
          done

      - name: Display manifest summary
        run: |
          echo "📊 **Cross-Network Registry Summary**" > manifest-summary.md
          echo "" >> manifest-summary.md
          
          # Registry stats
          if [ -f "cross-network-address-registry.json" ]; then
            NETWORKS=$(jq -r 'keys | length' cross-network-address-registry.json 2>/dev/null || echo "0")
            echo "- **Networks**: $NETWORKS" >> manifest-summary.md
          fi
          
          # Manifest stats  
          if [ -f "manifests/cross-network-registry.json" ]; then
            CONTRACTS=$(jq -r '[.. | objects | select(has("address")) | .address] | length' manifests/cross-network-registry.json 2>/dev/null || echo "0")
            echo "- **Contracts**: $CONTRACTS" >> manifest-summary.md
          fi
          
          echo "- **Version**: $PRX_VERSION" >> manifest-summary.md
          echo "- **Generated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> manifest-summary.md
          echo "" >> manifest-summary.md
          echo "**File Hashes:**" >> manifest-summary.md
          echo "- Manifest: \`${{ steps.hash.outputs.manifest-hash }}\`" >> manifest-summary.md
          echo "- Registry: \`${{ steps.hash.outputs.registry-hash }}\`" >> manifest-summary.md
          
          cat manifest-summary.md

      - name: Upload generated manifests
        uses: actions/upload-artifact@v4
        with:
          name: cross-network-manifests-${{ github.run_number }}
          path: |
            cross-network-address-registry.json
            manifests/cross-network-registry.json
            manifest-summary.md
          retention-days: 30

      - name: Upload manifests to release (main branch only)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: cross-network-manifests-release
          path: |
            cross-network-address-registry.json
            manifests/cross-network-registry.json
          retention-days: 90

  validate:
    name: validate-manifests
    runs-on: ubuntu-latest
    needs: generate
    if: needs.detect-changes.outputs.should-run == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download generated manifests
        uses: actions/download-artifact@v4
        with:
          name: cross-network-manifests-${{ github.run_number }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run extended validation
        run: |
          echo "🧪 Running extended manifest validation..."
          
          # Additional validation scripts can be added here
          # For example: schema validation, network connectivity tests, etc.
          
          echo "✅ Extended validation completed"

  comment-pr:
    name: comment-pr
    runs-on: ubuntu-latest
    needs: [generate, validate]
    if: github.event_name == 'pull_request' && needs.detect-changes.outputs.should-run == 'true'
    steps:
      - name: Download manifest summary
        uses: actions/download-artifact@v4
        with:
          name: cross-network-manifests-${{ github.run_number }}

      - name: Comment PR with summary
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: cross-network-registry
          path: manifest-summary.md
