name: PayRox Refactor Gate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  refactor-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Run local refactor validator (AI)
      run: npm run refactor:validate -- AI/sample-refactor-output.json || true
      continue-on-error: true
      id: ai-validate

    - name: Early loupe/selectors smoke test
      run: npx hardhat test tests/diamond-compliance/loupe-and-selectors.test.ts --grep "facets\(\)" || true
      continue-on-error: true
      id: early-selectors

    - name: Setup Hardhat
      run: npx hardhat --version

    - name: Compile contracts
      id: compile
      run: npx hardhat compile

    - name: Run refactor linter
      run: npm run ai:lint
      continue-on-error: true
      id: lint

    - name: Run Diamond compliance tests
      run: npx hardhat test --grep "(loupe|selectors|diamond)"
      continue-on-error: true
      id: diamond-tests

    - name: Run epoch rules tests
      run: npx hardhat test --grep "epoch"
      continue-on-error: true
      id: epoch-tests

    - name: Run role assignment tests
      run: npx hardhat test --grep "(roles|delegatecall|access)"
      continue-on-error: true
      id: role-tests

    - name: Run size and gas tests
      run: npx hardhat test --grep "(size|gas|limit)"
      continue-on-error: true
      id: size-tests

    - name: Check for banned patterns
      run: |
        echo "🔍 Checking for banned patterns..."
        # Loupe functions should not appear in facets
        if grep -r "function\s\+facets\s*\(|function\s\+facetFunctionSelectors\s*\(|function\s\+facetAddresses\s*\(" contracts/facets/ 2>/dev/null; then
          echo "❌ ERROR: Loupe functions found in contracts/facets"
          exit 1
        fi
        # Approx size check (~2 hex chars per bytecode byte)
        if find artifacts/ -name "*.json" -exec sh -c '
          size=$(jq -r ".deployedBytecode.object" "$1" 2>/dev/null | wc -c);
          if [ "$size" -gt 49152 ]; then
            echo "❌ ERROR: Potential size limit violation in $1 ($size chars)";
            exit 1;
          fi
        ' _ {} \; 2>/dev/null; then
          echo "✅ No obvious size violations found"
        fi
        # Optional SELF-CHECK footer enforcement in recent docs
        if find . -name "*.md" -newer .git/HEAD -exec grep -l "SELF-CHECK" {} \; | while read file; do
          if ! grep -q "\[✓\] Size OK.*\[✓\] No Loupe in Facets.*\[✓\] Selectors Parity" "$file"; then
            echo "❌ ERROR: Incomplete SELF-CHECK footer in $file"
            exit 1
          fi
        done; then
          echo "✅ SELF-CHECK footers validated"
        fi

    - name: Validate manifest structure
      run: |
        if [ -f "payrox-manifest.json" ]; then
          echo "🔍 Validating manifest structure..."
          if ! jq empty payrox-manifest.json; then
            echo "❌ ERROR: Invalid JSON in payrox-manifest.json"; exit 1; fi
          if ! jq -e '.version and .facets' payrox-manifest.json >/dev/null; then
            echo "❌ ERROR: Manifest missing required fields (version, facets)"; exit 1; fi
          if ! jq -e '.facets | to_entries[] | .value.selectors | type == "array"' payrox-manifest.json >/dev/null; then
            echo "❌ ERROR: Facets must have selectors arrays"; exit 1; fi
          echo "✅ Manifest structure validated"
        else
          echo "⚠️  No manifest found - skipping validation"
        fi

    - name: Check selector map integrity
      run: |
        if [ -f "selector_map.json" ]; then
          echo "🔍 Validating selector map..."
          if ! jq empty selector_map.json; then
            echo "❌ ERROR: Invalid JSON in selector_map.json"; exit 1; fi
          if jq -r 'to_entries[] | .key' selector_map.json | sort | uniq -d | grep -q .; then
            echo "❌ ERROR: Duplicate selectors found in selector map"; exit 1; fi
          echo "✅ Selector map validated"
        fi

    - name: Validate deployment scripts
      run: |
        echo "🔍 Checking deployment scripts..."
        deploy_scripts=$(find scripts/ -name "*deploy*.ts" -o -name "*deploy*.js" 2>/dev/null || true)
        if [ -n "$deploy_scripts" ]; then
          for script in $deploy_scripts; do
            echo "Checking $script..."
            if grep -q "grantRole.*facet" "$script" 2>/dev/null; then
              echo "⚠️  WARNING: Possible role assignment to facet in $script"
            fi
            if ! grep -q "CREATE2\|predictDeterministicAddress\|deploy.*salt" "$script" 2>/dev/null; then
              echo "⚠️  WARNING: No CREATE2 deployment detected in $script"
            fi
          done
          echo "✅ Deployment scripts checked"
        else
          echo "ℹ️  No deployment scripts found"
        fi

    - name: Generate validation report
      run: |
        echo "📊 PayRox Refactor Validation Report" > validation-report.md
        {
          echo "====================================="
          echo
          echo "**Commit:** ${{ github.sha }}"
          echo "**Branch:** ${{ github.ref_name }}"
          echo "**Date:** $(date -u)"
          echo
          echo "## Test Results"
          echo
          echo "| Component | Status |"
          echo "|-----------|--------|"
          echo "| Compilation | ${{ steps.compile.outcome == 'success' && '✅ Pass' || '❌ Fail' }} |"
          echo "| Refactor Lint | ${{ steps.lint.outcome == 'success' && '✅ Pass' || '❌ Fail' }} |"
          echo "| Diamond Tests | ${{ steps.diamond-tests.outcome == 'success' && '✅ Pass' || '❌ Fail' }} |"
          echo "| Epoch Tests | ${{ steps.epoch-tests.outcome == 'success' && '✅ Pass' || '❌ Fail' }} |"
          echo "| Role Tests | ${{ steps.role-tests.outcome == 'success' && '✅ Pass' || '❌ Fail' }} |"
          echo "| Size Tests | ${{ steps.size-tests.outcome == 'success' && '✅ Pass' || '❌ Fail' }} |"
          echo
          if [ -d "contracts/facets" ]; then
            echo "**Facets Found:** $(find contracts/facets -name '*.sol' | wc -l)"
          fi
          if [ -f "payrox-manifest.json" ]; then
            echo "**Total Selectors:** $(jq '[.facets[] | .selectors[]] | length' payrox-manifest.json 2>/dev/null || echo 0)"
          fi
          echo
          echo "## Compliance Checklist"
          echo
          echo "- [ ] EIP-170 size limits enforced"
          echo "- [ ] No loupe functions in facets"
          echo "- [ ] Selector parity maintained"
          echo "- [ ] Roles assigned to dispatcher"
          echo "- [ ] Epoch rules implemented"
          echo "- [ ] CREATE2 deployment ready"
        } >> validation-report.md

    - name: Upload validation report
      uses: actions/upload-artifact@v4
      with:
        name: validation-report
        path: validation-report.md

    - name: Check overall status
      run: |
        echo "🔍 Final validation check..."
        compile_status="${{ steps.compile.outcome }}"
        lint_status="${{ steps.lint.outcome }}"
        diamond_status="${{ steps.diamond-tests.outcome }}"
        epoch_status="${{ steps.epoch-tests.outcome }}"
        role_status="${{ steps.role-tests.outcome }}"
        size_status="${{ steps.size-tests.outcome }}"
        critical_failures=0
        if [ "$compile_status" != "success" ]; then
          echo "❌ CRITICAL: Compilation failed"; critical_failures=$((critical_failures + 1)); fi
        if [ "$lint_status" != "success" ]; then
          echo "❌ CRITICAL: Refactor lint failed"; critical_failures=$((critical_failures + 1)); fi
        if [ "$diamond_status" != "success" ]; then
          echo "❌ CRITICAL: Diamond compliance tests failed"; critical_failures=$((critical_failures + 1)); fi
        if [ "$epoch_status" != "success" ]; then echo "⚠️  WARNING: Epoch tests failed"; fi
        if [ "$role_status" != "success" ]; then echo "⚠️  WARNING: Role tests failed"; fi
        if [ "$size_status" != "success" ]; then echo "⚠️  WARNING: Size tests failed"; fi
        if [ $critical_failures -gt 0 ]; then
          echo; echo "💥 REFACTOR GATE: BLOCKED"; exit 1;
        else
          echo; echo "✅ REFACTOR GATE: PASSED";
        fi

  security-scan:
    runs-on: ubuntu-latest
    needs: refactor-validation
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    - name: Run Slither analysis
      uses: crytic/slither-action@v0.3.0
      continue-on-error: true
      with:
        target: 'contracts/facets/'
        fail-on: none
        slither-args: --print human-summary

    - name: Setup Python for Mythril
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install solc-select & Mythril
      run: |
        python -m pip install --upgrade pip
        pip install solc-select mythril
        echo "$HOME/.solc-select/bin" >> $GITHUB_PATH
        solc-select install 0.8.30
        solc-select use 0.8.30
        solc --version
        myth --version

    - name: Determine changed Solidity files (PR-only)
      if: ${{ github.event_name == 'pull_request' }}
      id: changed_myth
      shell: bash
      run: |
        BASE="${{ github.base_ref }}"
        HEAD="${{ github.head_ref }}"
        git fetch origin "$BASE" --depth=1 || true
        DIFF=$(git diff --name-only "origin/${BASE}"... | grep -E '^contracts/.*\.sol$' || true)
        echo "changed<<EOF" >> $GITHUB_OUTPUT
        echo "${DIFF}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Run Mythril (changed files or all facets)
      env:
        MYTH_TARGETS: ${{ steps.changed_myth.outputs.changed }}
        PRX_MYTHRIL_FAIL_ON_HIGH: ${{ env.PRX_MYTHRIL_FAIL_ON_HIGH || 'false' }}
      run: |
        bash security/run-mythril.sh

    - name: Upload Mythril artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mythril-reports
        path: security/mythril-reports/

    - name: Post Mythril summary to PR (comment)
      if: ${{ github.event_name == 'pull_request' }}
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: mythril
        path: security/mythril-reports/mythril-summary.md
    - name: Check for common vulnerabilities
      run: |
        echo "🔐 Scanning for common vulnerabilities..."
        if grep -r "external.*payable\|call.*value" contracts/facets/ 2>/dev/null; then
          echo "⚠️  WARNING: Potential reentrancy patterns found"; fi
        if grep -r "\.call\|\.delegatecall\|\.staticcall" contracts/facets/ 2>/dev/null | grep -v "require\|assert"; then
          echo "⚠️  WARNING: Unchecked external calls found"; fi
        if ! grep -r "onlyOwner\|hasRole\|modifier" contracts/facets/ 2>/dev/null; then
          echo "⚠️  WARNING: No access control modifiers found"; fi
        echo "✅ Security scan completed"
