name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  NODE_VERSION: '18'

jobs:
  lint_and_typecheck:
    name: Lint & Typecheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci

      - name: Generate VersionFacet (if present)
        run: |
          if [ -f scripts/gen-version-facet.ts ]; then
            node scripts/gen-version-facet.ts
          fi

      - name: Upload generated VersionFacet (if produced)
        uses: actions/upload-artifact@v4
        with:
          name: generated-versionfacet
          path: contracts/facets/VersionFacet.sol
          if-no-files-found: ignore

      - name: ESLint (non-blocking if script missing)
        run: |
          if npm run -s lint; then
            echo "lint passed"
          else
            echo "no lint script or lint failed"; exit 0
          fi

      - name: TypeScript typecheck (hardhat config)
        run: |
          if [ -f tsconfig.hardhat.json ]; then
            npx tsc -p tsconfig.hardhat.json --noEmit
          else
            echo "tsconfig.hardhat.json not found; skipping typecheck"
          fi

  hardhat:
    name: Hardhat Compile & Tests
    runs-on: ubuntu-latest
    needs: lint_and_typecheck
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci

      - name: Generate VersionFacet (if present)
        run: echo "Attempting to obtain generated VersionFacet..."

      - name: Download generated VersionFacet (best-effort)
        uses: actions/download-artifact@v4
        with:
          name: generated-versionfacet
          path: generated
        continue-on-error: true

      - name: Ensure VersionFacet present (artifact or generator)
        run: |
          if [ -f generated/contracts/facets/VersionFacet.sol ]; then
            mkdir -p contracts/facets
            mv generated/contracts/facets/VersionFacet.sol contracts/facets/VersionFacet.sol
            echo "✅ Restored generated VersionFacet from artifact"
          elif [ -f scripts/gen-version-facet.ts ]; then
            node scripts/gen-version-facet.ts
            echo "✅ Generated VersionFacet via script"
          else
            echo "No VersionFacet generator or artifact available; continuing"
          fi

      - name: Compile Solidity
        run: npx hardhat compile

      - name: Run Hardhat tests
        run: npx hardhat test --no-compile

      - name: Upload HH artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: hardhat-artifacts
          path: |
            artifacts/
            cache/
            typechain*/
          if-no-files-found: ignore

  python_smoke:
    name: Python Smoke (optional)
    runs-on: ubuntu-latest
    needs: hardhat
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-py-3.11-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-py-3.11-

      - name: Install Python deps (if requirements.txt)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          else
            echo "requirements.txt not found; skipping deps"
          fi

      - name: Start services (docker compose if file exists)
        run: |
          if [ -f docker-compose.yml ] || [ -f docker-compose.yaml ]; then
            docker compose up -d --build
          else
            echo "No docker-compose file; skipping services"
          fi

      - name: Wait for API (/metrics) if services started
        run: |
          if docker ps -q >/dev/null 2>&1 && [ -n "$(docker ps -q)" ]; then
            echo "Waiting for API to respond on /metrics..."
            for i in $(seq 1 45); do
              if curl -sSf http://localhost:8000/metrics >/dev/null 2>&1; then
                echo "API ready"; exit 0
              fi
              sleep 2
            done
            echo "API did not become ready in time"; exit 1
          else
            echo "No services running; skipping wait"
          fi

      - name: Run Python smoke tests (pytest -k test_api_smoke)
        run: |
          if command -v pytest >/dev/null 2>&1; then
            pytest -q -k test_api_smoke || (echo "pytest failed" && exit 1)
          else
            echo "pytest not installed; skipping"
          fi

      - name: Tear down services
        if: always()
        run: |
          if docker ps -q >/dev/null 2>&1; then
            docker compose down -v || true
          fi

  security_audit:
    name: Security Audit (non-blocking)
    runs-on: ubuntu-latest
    needs: hardhat
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci

      - name: npm audit (prod only, ignore dev)
        run: |
          set -e
          echo "Running production audit (ignoring dev deps)"
          npm audit --production --omit=dev || true
