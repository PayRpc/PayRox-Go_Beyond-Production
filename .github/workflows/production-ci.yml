name: PayRox Production CI/CD Pipeline
on:
  push:
    branches: [main, develop, fix/ci-codecov-guard]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"
  VERSIONS_FILE: config/versions.json

jobs:
  # Pre-commit validation
  validate:
    name: Pre-commit Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npm run contracts:compile

      - name: Generate TypeChain types (filter dbg artifacts)
        run: npm run typechain:generate

      - name: Check for empty files
        run: |
          EMPTY_FILES=$(find . -name "*.sol" -o -name "*.ts" -o -name "*.js" | xargs -r ls -la | awk '$5 == 0 {print $9}' | grep -v node_modules || true)
          if [ ! -z "$EMPTY_FILES" ]; then
            echo "ERROR: Empty files detected:"
            echo "$EMPTY_FILES"
            exit 1
          fi
          echo "SUCCESS: No empty files found"

      - name: Lint check (fail fast)
        run: npm run lint:check || echo "⚠️ Lint issues detected - will be fixed automatically"

      - name: TypeScript compilation check
        run: npx tsc --noEmit

  # Code quality and security
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate TypeChain types (needed for tests)
        run: npm run typechain:generate

      - name: Run ESLint with auto-fix
        run: |
          npm run lint:fix || true
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "fix: auto-fix linting issues [skip ci]"
            git push
          fi

      - name: Security audit
        run: npm audit --audit-level moderate

      - name: Check dependencies
        run: npm outdated || true

  # Solidity compilation and testing
  contracts:
    name: Solidity Contracts
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install dependencies
        run: npm ci

      - name: Generate TypeChain types for contracts
        run: npm run typechain:generate

      - name: Compile contracts with Hardhat
        run: npx hardhat compile

      - name: Compile contracts with Foundry
        run: forge build

      - name: Run Foundry tests
        run: forge test -vvv

      - name: Generate gas report
        run: forge test --gas-report > gas-report.txt

      - name: Upload gas report
        uses: actions/upload-artifact@v4
        with:
          name: gas-report
          path: gas-report.txt

  # TypeScript and JavaScript testing
  tests:
    name: TypeScript Tests
    runs-on: ubuntu-latest
    needs: [validate, quality]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Compile TypeScript
        run: npx tsc

      - name: Run Jest tests
        run: npm test -- --coverage --ci

  # Integration testing
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [contracts, tests]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install dependencies
        run: npm ci

      - name: Start local blockchain
        run: |
          npx hardhat node &
          sleep 10

      - name: Run integration tests
        run: npm run test:integration

      - name: Run E2E production readiness tests
        run: npm run test:e2e

  # Deployment readiness check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [contracts, tests, integration]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check contract sizes
        run: |
          npx hardhat compile
          node -e "
            const artifacts = require('./artifacts/contracts');
            const path = require('path');
            const fs = require('fs');

            function checkContractSizes(dir) {
              const items = fs.readdirSync(dir);
              for (const item of items) {
                const fullPath = path.join(dir, item);
                if (fs.statSync(fullPath).isDirectory()) {
                  checkContractSizes(fullPath);
                } else if (item.endsWith('.json') && !item.endsWith('.dbg.json')) {
                  const artifact = JSON.parse(fs.readFileSync(fullPath, 'utf8'));
                  if (artifact.bytecode && artifact.bytecode !== '0x') {
                    const size = (artifact.bytecode.length - 2) / 2;
                    console.log(\`\${artifact.contractName}: \${size} bytes\`);
                    if (size > 24576) {
                      console.error(`ERROR: ${artifact.contractName} exceeds 24KB limit: ${size} bytes`);
                      process.exit(1);
                    }
                  }
                }
              }
            }

            checkContractSizes('./artifacts/contracts');
            console.log('SUCCESS: All contracts within size limits');
          "

      - name: Determinism & manifest generation
        run: |
          # Ensure determinism steps: compile, generate typechain, and generate manifest
          npm run check:determinism

      - name: Produce deployment manifest (contract sizes)
        run: |
          echo "# Deployment Manifest - $(date)" > deployment-manifest.md
          echo "## Contract Sizes" >> deployment-manifest.md
          echo "\`\`\`" >> deployment-manifest.md
          npx hardhat compile
          node -e "
            const artifacts = require('./artifacts/contracts');
            const path = require('path');
            const fs = require('fs');

            function listContractSizes(dir) {
              const items = fs.readdirSync(dir);
              for (const item of items) {
                const fullPath = path.join(dir, item);
                if (fs.statSync(fullPath).isDirectory()) {
                  listContractSizes(fullPath);
                } else if (item.endsWith('.json') && !item.endsWith('.dbg.json')) {
                  const artifact = JSON.parse(fs.readFileSync(fullPath, 'utf8'));
                  if (artifact.bytecode && artifact.bytecode !== '0x') {
                    const size = (artifact.bytecode.length - 2) / 2;
                    console.log(`${artifact.contractName.padEnd(30)} ${size.toString().padStart(6)} bytes`);
                  }
                }
              }
            }

            listContractSizes('./artifacts/contracts');
          " >> deployment-manifest.md
          echo "\`\`\`" >> deployment-manifest.md

      - name: Upload deployment manifest
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest
          path: deployment-manifest.md

  # Notification on success
  notify-success:
    name: Success Notification
    runs-on: ubuntu-latest
    needs: [validate, quality, contracts, tests, integration, deployment-check]
    if: always() && needs.validate.result == 'success' && needs.quality.result == 'success' && needs.contracts.result == 'success' && needs.tests.result == 'success' && needs.integration.result == 'success'
    steps:
      - name: Success notification
        run: |
          echo "SUCCESS: PayRox CI/CD Pipeline completed successfully!"
          echo "SUCCESS: All validations passed"
          echo "SUCCESS: Code quality maintained"
          echo "SUCCESS: Contracts compiled and tested"
          echo "SUCCESS: Integration tests passed"
          echo "SUCCESS: Ready for deployment"
